
method_template = '''
        {%- if m.mode == 'short' %}
        {{ m|disabled }}.def("{{m.name}}", ({{ m.signature }})&{{ m.parent }}::{{ m.name }})
        {% else %}
        {{ m|disabled }}.def("{{ m.name }}", []({{ m.const }} {{ m.parent }}& self{{ m|argpack(call=False) }}) {{m|respack}} {
        {{ m|disabled }}   {{ m|retpack }}  self.{{m.name}}({{ m|argpack(call=True) }});
        {{ m|disabled }}})
        {% endif %}
'''

class_template = '''
    py::class_<{{cls.typename}}{{cls|fdeleter}}>(m, "{{cls.name}}")
    {% for m in cls.methods %}
        {% block context scoped %}
        {% include "method_template.j2" %}
        {% endblock context %}
    {% endfor %}
    ;

'''

enum_template = '''
    py::enum_<{{e.typename}}>({{ e|enum_parent }}, "{{e.typename|replace("::", "_")}}")
        {% for v in e.xitems %}
        .value("{{v}}", {{e.typename}}::{{v}})
        {% endfor %}
        .export_values();
    ;

'''

module_enum = '''
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"
{{ model.prelude }}

namespace py = pybind11;

void autogenerated_enums(pybind11::module& m)
{
    {% for e in model.enums %}
    {% block c2 scoped %}
    {% include "enum_template.j2" %}
    {% endblock c2 %}
    {% endfor %}
}
'''

module_class = '''
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"
{{ model.prelude }}


namespace py = pybind11;

void autogenerated_classes_{{page.idx}}(pybind11::module& m)
{
    {% for cls in model.classes[page.start:page.end] %}
    {% block c1 scoped %}
    {% if cls.is_disabled %}
    // Skipping generation of {{ cls.typename }}
    {% else %}
    {% include "class_template.j2" %}
    {% endif %}
    {% endblock c1 %}
    {% endfor %}
}
'''

def clast_templates():
    templates = {
        'class_module.j2'    : module_class,
        'enum_module.j2'     : module_enum,
        'method_template.j2' : method_template,
        'class_template.j2'  : class_template,
        'enum_template.j2'   : enum_template,
    }
    return templates


