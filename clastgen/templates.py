
short_method = '''
        {{ m|disabled }}.def("{{m.name}}", ({{ m.signature }})&{{ m.parent }}::{{ m.name }})
'''

long_method = '''
        {{ m|disabled }}.def("{{ m.name }}", []({{ m|mthd_const }} {{ m.parent }}& self{{ m.args|argpack(call=False) }}) {{m|respack}} {
        {{ m|disabled }}  {{ m|retpack }} self.{{m.name}}({{ m.args|argpack(call=True) }});
        {{ m|disabled }}})
'''

aux_method = '''
        .def("{{ m.name }}", []({{ m|mthd_const }} {{ m.parent }}& self{{ m.args[:-1]|argpack(call=False) }}) -> {{ m.result_type }} {
          bool Invalid = false;
          {{ m.result_type }} res = self.{{m.name}}({{ m.args[:-1]|argpack(call=True) }}, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        })
'''

method_template = '''
        {%- if m.mode == 'short' %}
        {% include "short_method.j2" %}
        {% elif m.mode == 'long' %}
        {% include "long_method.j2" %}
        {% elif m.mode == 'aux' %}
        {% include "aux_method.j2" %}
        {% endif %}
'''

class_template = '''
    py::class_<{{cls.typename}}{{cls|fdeleter}}>(m, "{{cls.name}}" {{cls|baseclass}})
    {% for m in cls.methods %}
        {% block context scoped %}
        {% include "method_template.j2" %}
        {% endblock context %}
    {% endfor %}

    ;

'''

enum_template = '''
    py::enum_<{{e.typename}}>({{ e|enum_parent }}, "{{e.typename|replace("::", "_")}}")
        {% for v in e.xitems %}
        .value("{{v}}", {{e.typename}}::{{v}})
        {% endfor %}
        .export_values();
    ;

'''

file_template = '''////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - {{ model.clang_version }}
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"
{{ model.prelude }}

namespace py = pybind11;

{% block fblock scoped %}
{% endblock %}
'''

dyntyped_node = '''
{% extends 'file_template.j2' %}

{% block fblock scoped %}
namespace clatt = clang::ast_type_traits;

template<typename T>
const T* dyn_node_convert(const clatt::DynTypedNode& self)
{
    return self.get<T>();
}

void install_dyntypednode(pybind11::module& m) 
{
    py::class_<clatt::DynTypedNode>(m, "DynTypedNode")
        .def("getNodeKind", &clang::ast_type_traits::DynTypedNode::getNodeKind)
        .def("getSourceRange", &clang::ast_type_traits::DynTypedNode::getSourceRange)
        .def("__eq__", [](const clatt::DynTypedNode& self, const clatt::DynTypedNode& other) {
            return self == other;
        })
        .def("__ne__", [](const clatt::DynTypedNode& self, const clatt::DynTypedNode& other) {
            return self != other;
        })
        {% for cls in model.classes %}
        {% if cls.node %}
        .def("_get_{{ cls.name }}", &clatt::DynTypedNode::get<{{cls.typename}}>, py::return_value_policy::reference)
        {% endif %}
        {% endfor %}
    ;
}
{% endblock %}
'''

module_class = '''
{% extends 'file_template.j2' %}

{% block fblock scoped %}
void autogenerated_classes_{{page.idx}}(pybind11::module& m)
{
    {% for cls in model.classes[page.start:page.end] %}
    {% block c1 scoped %}
    {% if cls.is_disabled %}
    // Skipping generation of {{ cls.typename }}
    {% else %}
    {% include "class_template.j2" %}
    {% endif %}
    {% endblock c1 %}
    {% endfor %}
}
{% endblock %}
'''

allclass_template = '''
{% extends 'file_template.j2' %}

{% block fblock scoped %}
{% for class_fun in range(pagecnt) %}
extern void autogenerated_classes_{{ class_fun }}(pybind11::module& m);
{% endfor %}

void autogenerated_classes(pybind11::module& m)
{
    {% for class_fun in range(pagecnt) %}
    autogenerated_classes_{{ class_fun }}(m);
    {% endfor %}
}
{% endblock %}
'''

module_enum = '''
{% extends 'file_template.j2' %}

{% block fblock scoped %}
void autogenerated_enums(pybind11::module& m)
{
    {% for e in model.enums %}
    {% block c2 scoped %}
    {% include "enum_template.j2" %}
    {% endblock c2 %}
    {% endfor %}
}
{% endblock %}
'''

def clast_templates():
    templates = {
        'file_template.j2'     : file_template,
        'class_module.j2'      : module_class,
        'enum_module.j2'       : module_enum,
        'method_template.j2'   : method_template,
        'short_method.j2'      : short_method,
        'long_method.j2'       : long_method,
        'aux_method.j2'        : aux_method,
        'class_template.j2'    : class_template,
        'allclass_template.j2' : allclass_template,
        'enum_template.j2'     : enum_template,
        'dyntyped_node_template.j2': dyntyped_node,
    }
    return templates


