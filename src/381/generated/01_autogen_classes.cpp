
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 3.8.1-svn271772-1~exp1 (branches/release_38)
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_0(pybind11::module& m)
{
    // Skipping generation of llvm::StringRef

    py::class_<clang::SourceLocation>(m, "SourceLocation" )

        .def("isFileID", (bool (clang::SourceLocation::*)() const)&clang::SourceLocation::isFileID  )
        .def("isMacroID", (bool (clang::SourceLocation::*)() const)&clang::SourceLocation::isMacroID  )
        .def("isValid", (bool (clang::SourceLocation::*)() const)&clang::SourceLocation::isValid  )
        .def("isInvalid", (bool (clang::SourceLocation::*)() const)&clang::SourceLocation::isInvalid  )
        .def("getLocWithOffset", (clang::SourceLocation (clang::SourceLocation::*)(int) const)&clang::SourceLocation::getLocWithOffset  )
        .def("getRawEncoding", (unsigned int (clang::SourceLocation::*)() const)&clang::SourceLocation::getRawEncoding  )
        .def("getPtrEncoding", (void * (clang::SourceLocation::*)() const)&clang::SourceLocation::getPtrEncoding  )
        //.def("print", (void (clang::SourceLocation::*)(llvm::raw_ostream &, const clang::SourceManager &) const)&clang::SourceLocation::print  )
        .def("printToString", (std::basic_string<char> (clang::SourceLocation::*)(const clang::SourceManager &) const)&clang::SourceLocation::printToString  )
        .def("dump", (void (clang::SourceLocation::*)(const clang::SourceManager &) const)&clang::SourceLocation::dump  )
    ;

    py::class_<clang::SourceRange>(m, "SourceRange" )

        .def("getBegin", (clang::SourceLocation (clang::SourceRange::*)() const)&clang::SourceRange::getBegin  )
        .def("getEnd", (clang::SourceLocation (clang::SourceRange::*)() const)&clang::SourceRange::getEnd  )
        .def("setBegin", (void (clang::SourceRange::*)(clang::SourceLocation))&clang::SourceRange::setBegin  )
        .def("setEnd", (void (clang::SourceRange::*)(clang::SourceLocation))&clang::SourceRange::setEnd  )
        .def("isValid", (bool (clang::SourceRange::*)() const)&clang::SourceRange::isValid  )
        .def("isInvalid", (bool (clang::SourceRange::*)() const)&clang::SourceRange::isInvalid  )
    ;

    py::class_<clang::DeclarationName>(m, "DeclarationName" )

        .def("isEmpty", (bool (clang::DeclarationName::*)() const)&clang::DeclarationName::isEmpty  )
        .def("isIdentifier", (bool (clang::DeclarationName::*)() const)&clang::DeclarationName::isIdentifier  )
        .def("isObjCZeroArgSelector", (bool (clang::DeclarationName::*)() const)&clang::DeclarationName::isObjCZeroArgSelector  )
        .def("isObjCOneArgSelector", (bool (clang::DeclarationName::*)() const)&clang::DeclarationName::isObjCOneArgSelector  )
        .def("getNameKind", (clang::DeclarationName::NameKind (clang::DeclarationName::*)() const)&clang::DeclarationName::getNameKind  )
        .def("isDependentName", (bool (clang::DeclarationName::*)() const)&clang::DeclarationName::isDependentName  )
        .def("getAsString", (std::basic_string<char> (clang::DeclarationName::*)() const)&clang::DeclarationName::getAsString  )
        //.def("getAsIdentifierInfo", (clang::IdentifierInfo * (clang::DeclarationName::*)() const)&clang::DeclarationName::getAsIdentifierInfo , py::return_value_policy::reference_internal )
        .def("getAsOpaqueInteger", (unsigned long (clang::DeclarationName::*)() const)&clang::DeclarationName::getAsOpaqueInteger  )
        .def("getAsOpaquePtr", (void * (clang::DeclarationName::*)() const)&clang::DeclarationName::getAsOpaquePtr  )
        .def("getCXXNameType", (clang::QualType (clang::DeclarationName::*)() const)&clang::DeclarationName::getCXXNameType  )
        .def("getCXXOverloadedOperator", (clang::OverloadedOperatorKind (clang::DeclarationName::*)() const)&clang::DeclarationName::getCXXOverloadedOperator  )
        //.def("getCXXLiteralIdentifier", (clang::IdentifierInfo * (clang::DeclarationName::*)() const)&clang::DeclarationName::getCXXLiteralIdentifier , py::return_value_policy::reference_internal )
        //.def("getObjCSelector", (clang::Selector (clang::DeclarationName::*)() const)&clang::DeclarationName::getObjCSelector  )
        .def("setFETokenInfo", (void (clang::DeclarationName::*)(void *))&clang::DeclarationName::setFETokenInfo  )
        .def("dump", (void (clang::DeclarationName::*)() const)&clang::DeclarationName::dump  )
    ;

    py::class_<clang::DeclarationNameInfo>(m, "DeclarationNameInfo" )

        .def("getName", (clang::DeclarationName (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getName  )
        .def("setName", (void (clang::DeclarationNameInfo::*)(clang::DeclarationName))&clang::DeclarationNameInfo::setName  )
        .def("getLoc", (clang::SourceLocation (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getLoc  )
        .def("setLoc", (void (clang::DeclarationNameInfo::*)(clang::SourceLocation))&clang::DeclarationNameInfo::setLoc  )
        //.def("getInfo", [](const clang::DeclarationNameInfo& self) -> const clang::DeclarationNameLoc & {
        // return self.getInfo();
        //} )
        //.def("getInfo", []( clang::DeclarationNameInfo& self) -> clang::DeclarationNameLoc & {
        // return self.getInfo();
        //} )
        //.def("setInfo", (void (clang::DeclarationNameInfo::*)(const clang::DeclarationNameLoc &))&clang::DeclarationNameInfo::setInfo  )
        .def("getNamedTypeInfo", (clang::TypeSourceInfo * (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getNamedTypeInfo , py::return_value_policy::reference_internal )
        .def("setNamedTypeInfo", (void (clang::DeclarationNameInfo::*)(clang::TypeSourceInfo *))&clang::DeclarationNameInfo::setNamedTypeInfo  )
        .def("getCXXOperatorNameRange", (clang::SourceRange (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getCXXOperatorNameRange  )
        .def("setCXXOperatorNameRange", (void (clang::DeclarationNameInfo::*)(clang::SourceRange))&clang::DeclarationNameInfo::setCXXOperatorNameRange  )
        .def("getCXXLiteralOperatorNameLoc", (clang::SourceLocation (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getCXXLiteralOperatorNameLoc  )
        .def("setCXXLiteralOperatorNameLoc", (void (clang::DeclarationNameInfo::*)(clang::SourceLocation))&clang::DeclarationNameInfo::setCXXLiteralOperatorNameLoc  )
        .def("isInstantiationDependent", (bool (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::isInstantiationDependent  )
        .def("containsUnexpandedParameterPack", (bool (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::containsUnexpandedParameterPack  )
        .def("getAsString", (std::basic_string<char> (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getAsString  )
        //.def("printName", (void (clang::DeclarationNameInfo::*)(llvm::raw_ostream &) const)&clang::DeclarationNameInfo::printName  )
        .def("getBeginLoc", (clang::SourceLocation (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getSourceRange  )
        .def("getLocStart", (clang::SourceLocation (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DeclarationNameInfo::*)() const)&clang::DeclarationNameInfo::getLocEnd  )
    ;

    py::class_<clang::Decl, decl_deleter<clang::Decl>::type>(m, "Decl" )

        .def("getSourceRange", (clang::SourceRange (clang::Decl::*)() const)&clang::Decl::getSourceRange  )
        .def("getLocStart", (clang::SourceLocation (clang::Decl::*)() const)&clang::Decl::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::Decl::*)() const)&clang::Decl::getLocEnd  )
        .def("getLocation", (clang::SourceLocation (clang::Decl::*)() const)&clang::Decl::getLocation  )
        .def("setLocation", (void (clang::Decl::*)(clang::SourceLocation))&clang::Decl::setLocation  )
        .def("getKind", (clang::Decl::Kind (clang::Decl::*)() const)&clang::Decl::getKind  )
        .def("getDeclKindName", (const char * (clang::Decl::*)() const)&clang::Decl::getDeclKindName  )
        .def("getNextDeclInContext", []( clang::Decl& self) -> clang::Decl * {
         return self.getNextDeclInContext();
        } , py::return_value_policy::reference_internal)
        .def("getNextDeclInContext", [](const clang::Decl& self) -> const clang::Decl * {
         return self.getNextDeclInContext();
        } , py::return_value_policy::reference_internal)
        .def("getDeclContext", []( clang::Decl& self) -> clang::DeclContext * {
         return self.getDeclContext();
        } , py::return_value_policy::reference_internal)
        .def("getDeclContext", [](const clang::Decl& self) -> const clang::DeclContext * {
         return self.getDeclContext();
        } , py::return_value_policy::reference_internal)
        .def("getNonClosureContext", []( clang::Decl& self) -> clang::Decl * {
         return self.getNonClosureContext();
        } , py::return_value_policy::reference_internal)
        .def("getNonClosureContext", [](const clang::Decl& self) -> const clang::Decl * {
         return self.getNonClosureContext();
        } , py::return_value_policy::reference_internal)
        .def("getTranslationUnitDecl", []( clang::Decl& self) -> clang::TranslationUnitDecl * {
         return self.getTranslationUnitDecl();
        } , py::return_value_policy::reference_internal)
        .def("getTranslationUnitDecl", [](const clang::Decl& self) -> const clang::TranslationUnitDecl * {
         return self.getTranslationUnitDecl();
        } , py::return_value_policy::reference_internal)
        .def("isInAnonymousNamespace", (bool (clang::Decl::*)() const)&clang::Decl::isInAnonymousNamespace  )
        .def("isInStdNamespace", (bool (clang::Decl::*)() const)&clang::Decl::isInStdNamespace  )
        .def("getASTContext", (clang::ASTContext & (clang::Decl::*)() const)&clang::Decl::getASTContext  )
        .def("setAccess", (void (clang::Decl::*)(clang::AccessSpecifier))&clang::Decl::setAccess  )
        .def("getAccess", (clang::AccessSpecifier (clang::Decl::*)() const)&clang::Decl::getAccess  )
        .def("getAccessUnsafe", (clang::AccessSpecifier (clang::Decl::*)() const)&clang::Decl::getAccessUnsafe  )
        .def("hasAttrs", (bool (clang::Decl::*)() const)&clang::Decl::hasAttrs  )
        //.def("setAttrs", (void (clang::Decl::*)(const llvm::SmallVector<clang::Attr *, 2> &))&clang::Decl::setAttrs  )
        //.def("getAttrs", []( clang::Decl& self) -> llvm::SmallVector<clang::Attr *, 2> & {
        // return self.getAttrs();
        //} )
        //.def("getAttrs", [](const clang::Decl& self) -> const llvm::SmallVector<clang::Attr *, 2> & {
        // return self.getAttrs();
        //} )
        .def("dropAttrs", (void (clang::Decl::*)())&clang::Decl::dropAttrs  )
        //.def("addAttr", (void (clang::Decl::*)(clang::Attr *))&clang::Decl::addAttr  )
        //.def("attrs", (llvm::iterator_range<clang::Attr *const *> (clang::Decl::*)() const)&clang::Decl::attrs  )
        .def("getMaxAlignment", (unsigned int (clang::Decl::*)() const)&clang::Decl::getMaxAlignment  )
        .def("setInvalidDecl", (void (clang::Decl::*)(bool))&clang::Decl::setInvalidDecl  )
        .def("isInvalidDecl", (bool (clang::Decl::*)() const)&clang::Decl::isInvalidDecl  )
        .def("isImplicit", (bool (clang::Decl::*)() const)&clang::Decl::isImplicit  )
        .def("setImplicit", (void (clang::Decl::*)(bool))&clang::Decl::setImplicit  )
        .def("isUsed", (bool (clang::Decl::*)(bool) const)&clang::Decl::isUsed  )
        .def("setIsUsed", (void (clang::Decl::*)())&clang::Decl::setIsUsed  )
        .def("markUsed", (void (clang::Decl::*)(clang::ASTContext &))&clang::Decl::markUsed  )
        .def("isReferenced", (bool (clang::Decl::*)() const)&clang::Decl::isReferenced  )
        .def("isThisDeclarationReferenced", (bool (clang::Decl::*)() const)&clang::Decl::isThisDeclarationReferenced  )
        .def("setReferenced", (void (clang::Decl::*)(bool))&clang::Decl::setReferenced  )
        .def("isTopLevelDeclInObjCContainer", (bool (clang::Decl::*)() const)&clang::Decl::isTopLevelDeclInObjCContainer  )
        .def("setTopLevelDeclInObjCContainer", (void (clang::Decl::*)(bool))&clang::Decl::setTopLevelDeclInObjCContainer  )
        .def("isModulePrivate", (bool (clang::Decl::*)() const)&clang::Decl::isModulePrivate  )
        .def("getAvailability", (clang::AvailabilityResult (clang::Decl::*)(std::basic_string<char> *) const)&clang::Decl::getAvailability  )
        .def("isDeprecated", (bool (clang::Decl::*)(std::basic_string<char> *) const)&clang::Decl::isDeprecated  )
        .def("isUnavailable", (bool (clang::Decl::*)(std::basic_string<char> *) const)&clang::Decl::isUnavailable  )
        .def("isWeakImported", (bool (clang::Decl::*)() const)&clang::Decl::isWeakImported  )
        .def("canBeWeakImported", (bool (clang::Decl::*)(bool &) const)&clang::Decl::canBeWeakImported  )
        .def("isFromASTFile", (bool (clang::Decl::*)() const)&clang::Decl::isFromASTFile  )
        .def("getGlobalID", (unsigned int (clang::Decl::*)() const)&clang::Decl::getGlobalID  )
        .def("getOwningModuleID", (unsigned int (clang::Decl::*)() const)&clang::Decl::getOwningModuleID  )
        //.def("getImportedOwningModule", (clang::Module * (clang::Decl::*)() const)&clang::Decl::getImportedOwningModule , py::return_value_policy::reference_internal )
        //.def("getLocalOwningModule", (clang::Module * (clang::Decl::*)() const)&clang::Decl::getLocalOwningModule , py::return_value_policy::reference_internal )
        //.def("setLocalOwningModule", (void (clang::Decl::*)(clang::Module *))&clang::Decl::setLocalOwningModule  )
        .def("getIdentifierNamespace", (unsigned int (clang::Decl::*)() const)&clang::Decl::getIdentifierNamespace  )
        .def("isInIdentifierNamespace", (bool (clang::Decl::*)(unsigned int) const)&clang::Decl::isInIdentifierNamespace  )
        .def("hasTagIdentifierNamespace", (bool (clang::Decl::*)() const)&clang::Decl::hasTagIdentifierNamespace  )
        .def("getLexicalDeclContext", []( clang::Decl& self) -> clang::DeclContext * {
         return self.getLexicalDeclContext();
        } , py::return_value_policy::reference_internal)
        .def("getLexicalDeclContext", [](const clang::Decl& self) -> const clang::DeclContext * {
         return self.getLexicalDeclContext();
        } , py::return_value_policy::reference_internal)
        .def("isOutOfLine", (bool (clang::Decl::*)() const)&clang::Decl::isOutOfLine  )
        .def("setDeclContext", (void (clang::Decl::*)(clang::DeclContext *))&clang::Decl::setDeclContext  )
        .def("setLexicalDeclContext", (void (clang::Decl::*)(clang::DeclContext *))&clang::Decl::setLexicalDeclContext  )
        .def("isDefinedOutsideFunctionOrMethod", (bool (clang::Decl::*)() const)&clang::Decl::isDefinedOutsideFunctionOrMethod  )
        .def("isLexicallyWithinFunctionOrMethod", (bool (clang::Decl::*)() const)&clang::Decl::isLexicallyWithinFunctionOrMethod  )
        .def("getParentFunctionOrMethod", [](const clang::Decl& self) -> const clang::DeclContext * {
         return self.getParentFunctionOrMethod();
        } , py::return_value_policy::reference_internal)
        .def("getParentFunctionOrMethod", []( clang::Decl& self) -> clang::DeclContext * {
         return self.getParentFunctionOrMethod();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", []( clang::Decl& self) -> clang::Decl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::Decl& self) -> const clang::Decl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("isCanonicalDecl", (bool (clang::Decl::*)() const)&clang::Decl::isCanonicalDecl  )
        //.def("redecls", (llvm::iterator_range<clang::Decl::redecl_iterator> (clang::Decl::*)() const)&clang::Decl::redecls  )
        .def("getPreviousDecl", []( clang::Decl& self) -> clang::Decl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::Decl& self) -> const clang::Decl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("isFirstDecl", (bool (clang::Decl::*)() const)&clang::Decl::isFirstDecl  )
        .def("getMostRecentDecl", []( clang::Decl& self) -> clang::Decl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::Decl& self) -> const clang::Decl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getBody", (clang::Stmt * (clang::Decl::*)() const)&clang::Decl::getBody , py::return_value_policy::reference_internal )
        .def("hasBody", (bool (clang::Decl::*)() const)&clang::Decl::hasBody  )
        .def("getBodyRBrace", (clang::SourceLocation (clang::Decl::*)() const)&clang::Decl::getBodyRBrace  )
        .def("isTemplateParameter", (bool (clang::Decl::*)() const)&clang::Decl::isTemplateParameter  )
        .def("isTemplateParameterPack", (bool (clang::Decl::*)() const)&clang::Decl::isTemplateParameterPack  )
        .def("isParameterPack", (bool (clang::Decl::*)() const)&clang::Decl::isParameterPack  )
        .def("isTemplateDecl", (bool (clang::Decl::*)() const)&clang::Decl::isTemplateDecl  )
        .def("isFunctionOrFunctionTemplate", (bool (clang::Decl::*)() const)&clang::Decl::isFunctionOrFunctionTemplate  )
        .def("getAsFunction", []( clang::Decl& self) -> clang::FunctionDecl * {
         return self.getAsFunction();
        } , py::return_value_policy::reference_internal)
        .def("getAsFunction", [](const clang::Decl& self) -> const clang::FunctionDecl * {
         return self.getAsFunction();
        } , py::return_value_policy::reference_internal)
        .def("setLocalExternDecl", (void (clang::Decl::*)())&clang::Decl::setLocalExternDecl  )
        .def("isLocalExternDecl", (bool (clang::Decl::*)())&clang::Decl::isLocalExternDecl  )
        .def("setObjectOfFriendDecl", (void (clang::Decl::*)(bool))&clang::Decl::setObjectOfFriendDecl  )
        .def("getFriendObjectKind", (clang::Decl::FriendObjectKind (clang::Decl::*)() const)&clang::Decl::getFriendObjectKind  )
        .def("setNonMemberOperator", (void (clang::Decl::*)())&clang::Decl::setNonMemberOperator  )
        //.def("print", [](const clang::Decl& self, llvm::raw_ostream & Out , unsigned int Indentation , bool PrintInstantiation)  {
        //  self.print(Out, Indentation, PrintInstantiation);
        //} )
        //.def("print", [](const clang::Decl& self, llvm::raw_ostream & Out , const clang::PrintingPolicy & Policy , unsigned int Indentation , bool PrintInstantiation)  {
        //  self.print(Out, Policy, Indentation, PrintInstantiation);
        //} )
        .def("dump", [](const clang::Decl& self)  {
          self.dump();
        } )
        .def("dumpColor", (void (clang::Decl::*)() const)&clang::Decl::dumpColor  )
        //.def("dump", [](const clang::Decl& self, llvm::raw_ostream & Out)  {
        //  self.dump(Out);
        //} )
        //.def("getFunctionType", (const clang::FunctionType * (clang::Decl::*)(bool) const)&clang::Decl::getFunctionType , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::DeclContext>(m, "DeclContext" )

        .def("getDeclKind", (clang::Decl::Kind (clang::DeclContext::*)() const)&clang::DeclContext::getDeclKind  )
        .def("getDeclKindName", (const char * (clang::DeclContext::*)() const)&clang::DeclContext::getDeclKindName  )
        .def("getParent", []( clang::DeclContext& self) -> clang::DeclContext * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getParent", [](const clang::DeclContext& self) -> const clang::DeclContext * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getLexicalParent", []( clang::DeclContext& self) -> clang::DeclContext * {
         return self.getLexicalParent();
        } , py::return_value_policy::reference_internal)
        .def("getLexicalParent", [](const clang::DeclContext& self) -> const clang::DeclContext * {
         return self.getLexicalParent();
        } , py::return_value_policy::reference_internal)
        .def("getLookupParent", []( clang::DeclContext& self) -> clang::DeclContext * {
         return self.getLookupParent();
        } , py::return_value_policy::reference_internal)
        .def("getLookupParent", [](const clang::DeclContext& self) -> const clang::DeclContext * {
         return self.getLookupParent();
        } , py::return_value_policy::reference_internal)
        .def("getParentASTContext", (clang::ASTContext & (clang::DeclContext::*)() const)&clang::DeclContext::getParentASTContext  )
        .def("isClosure", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isClosure  )
        .def("isObjCContainer", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isObjCContainer  )
        .def("isFunctionOrMethod", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isFunctionOrMethod  )
        .def("isLookupContext", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isLookupContext  )
        .def("isFileContext", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isFileContext  )
        .def("isTranslationUnit", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isTranslationUnit  )
        .def("isRecord", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isRecord  )
        .def("isNamespace", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isNamespace  )
        .def("isStdNamespace", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isStdNamespace  )
        .def("isInlineNamespace", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isInlineNamespace  )
        .def("isDependentContext", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isDependentContext  )
        .def("isTransparentContext", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isTransparentContext  )
        .def("isExternCContext", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isExternCContext  )
        .def("isExternCXXContext", (bool (clang::DeclContext::*)() const)&clang::DeclContext::isExternCXXContext  )
        .def("Equals", (bool (clang::DeclContext::*)(const clang::DeclContext *) const)&clang::DeclContext::Equals  )
        .def("Encloses", (bool (clang::DeclContext::*)(const clang::DeclContext *) const)&clang::DeclContext::Encloses  )
        .def("getNonClosureAncestor", []( clang::DeclContext& self) -> clang::Decl * {
         return self.getNonClosureAncestor();
        } , py::return_value_policy::reference_internal)
        .def("getNonClosureAncestor", [](const clang::DeclContext& self) -> const clang::Decl * {
         return self.getNonClosureAncestor();
        } , py::return_value_policy::reference_internal)
        .def("getPrimaryContext", []( clang::DeclContext& self) -> clang::DeclContext * {
         return self.getPrimaryContext();
        } , py::return_value_policy::reference_internal)
        .def("getPrimaryContext", [](const clang::DeclContext& self) -> const clang::DeclContext * {
         return self.getPrimaryContext();
        } , py::return_value_policy::reference_internal)
        .def("getRedeclContext", []( clang::DeclContext& self) -> clang::DeclContext * {
         return self.getRedeclContext();
        } , py::return_value_policy::reference_internal)
        .def("getRedeclContext", [](const clang::DeclContext& self) -> const clang::DeclContext * {
         return self.getRedeclContext();
        } , py::return_value_policy::reference_internal)
        .def("getEnclosingNamespaceContext", []( clang::DeclContext& self) -> clang::DeclContext * {
         return self.getEnclosingNamespaceContext();
        } , py::return_value_policy::reference_internal)
        .def("getEnclosingNamespaceContext", [](const clang::DeclContext& self) -> const clang::DeclContext * {
         return self.getEnclosingNamespaceContext();
        } , py::return_value_policy::reference_internal)
        .def("getOuterLexicalRecordContext", []( clang::DeclContext& self) -> clang::RecordDecl * {
         return self.getOuterLexicalRecordContext();
        } , py::return_value_policy::reference_internal)
        .def("getOuterLexicalRecordContext", [](const clang::DeclContext& self) -> const clang::RecordDecl * {
         return self.getOuterLexicalRecordContext();
        } , py::return_value_policy::reference_internal)
        .def("InEnclosingNamespaceSetOf", (bool (clang::DeclContext::*)(const clang::DeclContext *) const)&clang::DeclContext::InEnclosingNamespaceSetOf  )
        //.def("collectAllContexts", (void (clang::DeclContext::*)(llvm::SmallVectorImpl<clang::DeclContext *> &))&clang::DeclContext::collectAllContexts  )
        //.def("decls", (llvm::iterator_range<clang::DeclContext::decl_iterator> (clang::DeclContext::*)() const)&clang::DeclContext::decls  )
        .def("decls_empty", (bool (clang::DeclContext::*)() const)&clang::DeclContext::decls_empty  )
        //.def("noload_decls", (llvm::iterator_range<clang::DeclContext::decl_iterator> (clang::DeclContext::*)() const)&clang::DeclContext::noload_decls  )
        .def("addDecl", (void (clang::DeclContext::*)(clang::Decl *))&clang::DeclContext::addDecl  )
        .def("addDeclInternal", (void (clang::DeclContext::*)(clang::Decl *))&clang::DeclContext::addDeclInternal  )
        .def("addHiddenDecl", (void (clang::DeclContext::*)(clang::Decl *))&clang::DeclContext::addHiddenDecl  )
        .def("removeDecl", (void (clang::DeclContext::*)(clang::Decl *))&clang::DeclContext::removeDecl  )
        .def("containsDecl", (bool (clang::DeclContext::*)(clang::Decl *) const)&clang::DeclContext::containsDecl  )
        //.def("lookup", (clang::DeclContextLookupResult (clang::DeclContext::*)(clang::DeclarationName) const)&clang::DeclContext::lookup  )
        //.def("noload_lookup", (clang::DeclContextLookupResult (clang::DeclContext::*)(clang::DeclarationName))&clang::DeclContext::noload_lookup  )
        //.def("localUncachedLookup", (void (clang::DeclContext::*)(clang::DeclarationName, llvm::SmallVectorImpl<clang::NamedDecl *> &))&clang::DeclContext::localUncachedLookup  )
        .def("makeDeclVisibleInContext", (void (clang::DeclContext::*)(clang::NamedDecl *))&clang::DeclContext::makeDeclVisibleInContext  )
        //.def("lookups", (llvm::iterator_range<clang::DeclContext::all_lookups_iterator> (clang::DeclContext::*)() const)&clang::DeclContext::lookups  )
        //.def("noload_lookups", (llvm::iterator_range<clang::DeclContext::all_lookups_iterator> (clang::DeclContext::*)() const)&clang::DeclContext::noload_lookups  )
        //.def("using_directives", (llvm::iterator_range<clang::DeclContext::udir_iterator> (clang::DeclContext::*)() const)&clang::DeclContext::using_directives  )
        //.def("ddiags", (llvm::iterator_range<clang::DeclContext::ddiag_iterator> (clang::DeclContext::*)() const)&clang::DeclContext::ddiags  )
        .def("setMustBuildLookupTable", (void (clang::DeclContext::*)())&clang::DeclContext::setMustBuildLookupTable  )
        //.def("getLookupPtr", (clang::StoredDeclsMap * (clang::DeclContext::*)() const)&clang::DeclContext::getLookupPtr , py::return_value_policy::reference_internal )
        //.def("buildLookup", (clang::StoredDeclsMap * (clang::DeclContext::*)())&clang::DeclContext::buildLookup , py::return_value_policy::reference_internal )
        .def("hasExternalLexicalStorage", (bool (clang::DeclContext::*)() const)&clang::DeclContext::hasExternalLexicalStorage  )
        .def("setHasExternalLexicalStorage", (void (clang::DeclContext::*)(bool))&clang::DeclContext::setHasExternalLexicalStorage  )
        .def("hasExternalVisibleStorage", (bool (clang::DeclContext::*)() const)&clang::DeclContext::hasExternalVisibleStorage  )
        .def("setHasExternalVisibleStorage", (void (clang::DeclContext::*)(bool))&clang::DeclContext::setHasExternalVisibleStorage  )
        .def("isDeclInLexicalTraversal", (bool (clang::DeclContext::*)(const clang::Decl *) const)&clang::DeclContext::isDeclInLexicalTraversal  )
        .def("setUseQualifiedLookup", (bool (clang::DeclContext::*)(bool))&clang::DeclContext::setUseQualifiedLookup  )
        .def("shouldUseQualifiedLookup", (bool (clang::DeclContext::*)() const)&clang::DeclContext::shouldUseQualifiedLookup  )
        .def("dumpDeclContext", (void (clang::DeclContext::*)() const)&clang::DeclContext::dumpDeclContext  )
        .def("dumpLookups", [](const clang::DeclContext& self)  {
          self.dumpLookups();
        } )
        //.def("dumpLookups", [](const clang::DeclContext& self, llvm::raw_ostream & OS , bool DumpDecls)  {
        //  self.dumpLookups(OS, DumpDecls);
        //} )
    ;

    py::class_<clang::Qualifiers>(m, "Qualifiers" )

        .def("getAsOpaqueValue", (unsigned int (clang::Qualifiers::*)() const)&clang::Qualifiers::getAsOpaqueValue  )
        .def("hasConst", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasConst  )
        .def("setConst", (void (clang::Qualifiers::*)(bool))&clang::Qualifiers::setConst  )
        .def("removeConst", (void (clang::Qualifiers::*)())&clang::Qualifiers::removeConst  )
        .def("addConst", (void (clang::Qualifiers::*)())&clang::Qualifiers::addConst  )
        .def("hasVolatile", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasVolatile  )
        .def("setVolatile", (void (clang::Qualifiers::*)(bool))&clang::Qualifiers::setVolatile  )
        .def("removeVolatile", (void (clang::Qualifiers::*)())&clang::Qualifiers::removeVolatile  )
        .def("addVolatile", (void (clang::Qualifiers::*)())&clang::Qualifiers::addVolatile  )
        .def("hasRestrict", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasRestrict  )
        .def("setRestrict", (void (clang::Qualifiers::*)(bool))&clang::Qualifiers::setRestrict  )
        .def("removeRestrict", (void (clang::Qualifiers::*)())&clang::Qualifiers::removeRestrict  )
        .def("addRestrict", (void (clang::Qualifiers::*)())&clang::Qualifiers::addRestrict  )
        .def("hasCVRQualifiers", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasCVRQualifiers  )
        .def("getCVRQualifiers", (unsigned int (clang::Qualifiers::*)() const)&clang::Qualifiers::getCVRQualifiers  )
        .def("setCVRQualifiers", (void (clang::Qualifiers::*)(unsigned int))&clang::Qualifiers::setCVRQualifiers  )
        .def("removeCVRQualifiers", []( clang::Qualifiers& self, unsigned int mask)  {
          self.removeCVRQualifiers(mask);
        } )
        .def("removeCVRQualifiers", []( clang::Qualifiers& self)  {
          self.removeCVRQualifiers();
        } )
        .def("addCVRQualifiers", (void (clang::Qualifiers::*)(unsigned int))&clang::Qualifiers::addCVRQualifiers  )
        .def("hasObjCGCAttr", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasObjCGCAttr  )
        .def("getObjCGCAttr", (clang::Qualifiers::GC (clang::Qualifiers::*)() const)&clang::Qualifiers::getObjCGCAttr  )
        .def("setObjCGCAttr", (void (clang::Qualifiers::*)(clang::Qualifiers::GC))&clang::Qualifiers::setObjCGCAttr  )
        .def("removeObjCGCAttr", (void (clang::Qualifiers::*)())&clang::Qualifiers::removeObjCGCAttr  )
        .def("addObjCGCAttr", (void (clang::Qualifiers::*)(clang::Qualifiers::GC))&clang::Qualifiers::addObjCGCAttr  )
        .def("withoutObjCGCAttr", (clang::Qualifiers (clang::Qualifiers::*)() const)&clang::Qualifiers::withoutObjCGCAttr  )
        .def("withoutObjCLifetime", (clang::Qualifiers (clang::Qualifiers::*)() const)&clang::Qualifiers::withoutObjCLifetime  )
        .def("hasObjCLifetime", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasObjCLifetime  )
        .def("getObjCLifetime", (clang::Qualifiers::ObjCLifetime (clang::Qualifiers::*)() const)&clang::Qualifiers::getObjCLifetime  )
        .def("setObjCLifetime", (void (clang::Qualifiers::*)(clang::Qualifiers::ObjCLifetime))&clang::Qualifiers::setObjCLifetime  )
        .def("removeObjCLifetime", (void (clang::Qualifiers::*)())&clang::Qualifiers::removeObjCLifetime  )
        .def("addObjCLifetime", (void (clang::Qualifiers::*)(clang::Qualifiers::ObjCLifetime))&clang::Qualifiers::addObjCLifetime  )
        .def("hasNonTrivialObjCLifetime", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasNonTrivialObjCLifetime  )
        .def("hasStrongOrWeakObjCLifetime", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasStrongOrWeakObjCLifetime  )
        .def("hasAddressSpace", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasAddressSpace  )
        .def("getAddressSpace", (unsigned int (clang::Qualifiers::*)() const)&clang::Qualifiers::getAddressSpace  )
        .def("setAddressSpace", (void (clang::Qualifiers::*)(unsigned int))&clang::Qualifiers::setAddressSpace  )
        .def("removeAddressSpace", (void (clang::Qualifiers::*)())&clang::Qualifiers::removeAddressSpace  )
        .def("addAddressSpace", (void (clang::Qualifiers::*)(unsigned int))&clang::Qualifiers::addAddressSpace  )
        .def("hasFastQualifiers", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasFastQualifiers  )
        .def("getFastQualifiers", (unsigned int (clang::Qualifiers::*)() const)&clang::Qualifiers::getFastQualifiers  )
        .def("setFastQualifiers", (void (clang::Qualifiers::*)(unsigned int))&clang::Qualifiers::setFastQualifiers  )
        .def("removeFastQualifiers", []( clang::Qualifiers& self, unsigned int mask)  {
          self.removeFastQualifiers(mask);
        } )
        .def("removeFastQualifiers", []( clang::Qualifiers& self)  {
          self.removeFastQualifiers();
        } )
        .def("addFastQualifiers", (void (clang::Qualifiers::*)(unsigned int))&clang::Qualifiers::addFastQualifiers  )
        .def("hasNonFastQualifiers", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasNonFastQualifiers  )
        .def("getNonFastQualifiers", (clang::Qualifiers (clang::Qualifiers::*)() const)&clang::Qualifiers::getNonFastQualifiers  )
        .def("hasQualifiers", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::hasQualifiers  )
        .def("empty", (bool (clang::Qualifiers::*)() const)&clang::Qualifiers::empty  )
        .def("addQualifiers", (void (clang::Qualifiers::*)(clang::Qualifiers))&clang::Qualifiers::addQualifiers  )
        .def("removeQualifiers", (void (clang::Qualifiers::*)(clang::Qualifiers))&clang::Qualifiers::removeQualifiers  )
        .def("addConsistentQualifiers", (void (clang::Qualifiers::*)(clang::Qualifiers))&clang::Qualifiers::addConsistentQualifiers  )
        .def("isAddressSpaceSupersetOf", (bool (clang::Qualifiers::*)(clang::Qualifiers) const)&clang::Qualifiers::isAddressSpaceSupersetOf  )
        .def("compatiblyIncludes", (bool (clang::Qualifiers::*)(clang::Qualifiers) const)&clang::Qualifiers::compatiblyIncludes  )
        .def("compatiblyIncludesObjCLifetime", (bool (clang::Qualifiers::*)(clang::Qualifiers) const)&clang::Qualifiers::compatiblyIncludesObjCLifetime  )
        .def("isStrictSupersetOf", (bool (clang::Qualifiers::*)(clang::Qualifiers) const)&clang::Qualifiers::isStrictSupersetOf  )
        .def("getAsString", [](const clang::Qualifiers& self) -> std::basic_string<char> {
         return self.getAsString();
        } )
        //.def("getAsString", [](const clang::Qualifiers& self, const clang::PrintingPolicy & Policy) -> std::basic_string<char> {
        // return self.getAsString(Policy);
        //} )
        //.def("isEmptyWhenPrinted", (bool (clang::Qualifiers::*)(const clang::PrintingPolicy &) const)&clang::Qualifiers::isEmptyWhenPrinted  )
        //.def("print", (void (clang::Qualifiers::*)(llvm::raw_ostream &, const clang::PrintingPolicy &, bool) const)&clang::Qualifiers::print  )
        //.def("Profile", (void (clang::Qualifiers::*)(llvm::FoldingSetNodeID &) const)&clang::Qualifiers::Profile  )
    ;

    py::class_<clang::QualType>(m, "QualType" )

        .def("getLocalFastQualifiers", (unsigned int (clang::QualType::*)() const)&clang::QualType::getLocalFastQualifiers  )
        .def("setLocalFastQualifiers", (void (clang::QualType::*)(unsigned int))&clang::QualType::setLocalFastQualifiers  )
        .def("getTypePtr", (const clang::Type * (clang::QualType::*)() const)&clang::QualType::getTypePtr , py::return_value_policy::reference_internal )
        .def("getTypePtrOrNull", (const clang::Type * (clang::QualType::*)() const)&clang::QualType::getTypePtrOrNull , py::return_value_policy::reference_internal )
        //.def("getBaseTypeIdentifier", (const clang::IdentifierInfo * (clang::QualType::*)() const)&clang::QualType::getBaseTypeIdentifier , py::return_value_policy::reference_internal )
        //.def("split", (clang::SplitQualType (clang::QualType::*)() const)&clang::QualType::split  )
        .def("getAsOpaquePtr", (void * (clang::QualType::*)() const)&clang::QualType::getAsOpaquePtr  )
        .def("isCanonical", (bool (clang::QualType::*)() const)&clang::QualType::isCanonical  )
        .def("isCanonicalAsParam", (bool (clang::QualType::*)() const)&clang::QualType::isCanonicalAsParam  )
        .def("isNull", (bool (clang::QualType::*)() const)&clang::QualType::isNull  )
        .def("isLocalConstQualified", (bool (clang::QualType::*)() const)&clang::QualType::isLocalConstQualified  )
        .def("isConstQualified", (bool (clang::QualType::*)() const)&clang::QualType::isConstQualified  )
        .def("isLocalRestrictQualified", (bool (clang::QualType::*)() const)&clang::QualType::isLocalRestrictQualified  )
        .def("isRestrictQualified", (bool (clang::QualType::*)() const)&clang::QualType::isRestrictQualified  )
        .def("isLocalVolatileQualified", (bool (clang::QualType::*)() const)&clang::QualType::isLocalVolatileQualified  )
        .def("isVolatileQualified", (bool (clang::QualType::*)() const)&clang::QualType::isVolatileQualified  )
        .def("hasLocalQualifiers", (bool (clang::QualType::*)() const)&clang::QualType::hasLocalQualifiers  )
        .def("hasQualifiers", (bool (clang::QualType::*)() const)&clang::QualType::hasQualifiers  )
        .def("hasLocalNonFastQualifiers", (bool (clang::QualType::*)() const)&clang::QualType::hasLocalNonFastQualifiers  )
        .def("getLocalQualifiers", (clang::Qualifiers (clang::QualType::*)() const)&clang::QualType::getLocalQualifiers  )
        .def("getQualifiers", (clang::Qualifiers (clang::QualType::*)() const)&clang::QualType::getQualifiers  )
        .def("getLocalCVRQualifiers", (unsigned int (clang::QualType::*)() const)&clang::QualType::getLocalCVRQualifiers  )
        .def("getCVRQualifiers", (unsigned int (clang::QualType::*)() const)&clang::QualType::getCVRQualifiers  )
        .def("isConstant", [](const clang::QualType& self, clang::ASTContext & Ctx) -> bool {
         return self.isConstant(Ctx);
        } )
        .def("isPODType", (bool (clang::QualType::*)(clang::ASTContext &) const)&clang::QualType::isPODType  )
        .def("isCXX98PODType", (bool (clang::QualType::*)(clang::ASTContext &) const)&clang::QualType::isCXX98PODType  )
        .def("isCXX11PODType", (bool (clang::QualType::*)(clang::ASTContext &) const)&clang::QualType::isCXX11PODType  )
        .def("isTrivialType", (bool (clang::QualType::*)(clang::ASTContext &) const)&clang::QualType::isTrivialType  )
        .def("isTriviallyCopyableType", (bool (clang::QualType::*)(clang::ASTContext &) const)&clang::QualType::isTriviallyCopyableType  )
        .def("addConst", (void (clang::QualType::*)())&clang::QualType::addConst  )
        .def("withConst", (clang::QualType (clang::QualType::*)() const)&clang::QualType::withConst  )
        .def("addVolatile", (void (clang::QualType::*)())&clang::QualType::addVolatile  )
        .def("withVolatile", (clang::QualType (clang::QualType::*)() const)&clang::QualType::withVolatile  )
        .def("addRestrict", (void (clang::QualType::*)())&clang::QualType::addRestrict  )
        .def("withRestrict", (clang::QualType (clang::QualType::*)() const)&clang::QualType::withRestrict  )
        .def("withCVRQualifiers", (clang::QualType (clang::QualType::*)(unsigned int) const)&clang::QualType::withCVRQualifiers  )
        .def("addFastQualifiers", (void (clang::QualType::*)(unsigned int))&clang::QualType::addFastQualifiers  )
        .def("removeLocalConst", (void (clang::QualType::*)())&clang::QualType::removeLocalConst  )
        .def("removeLocalVolatile", (void (clang::QualType::*)())&clang::QualType::removeLocalVolatile  )
        .def("removeLocalRestrict", (void (clang::QualType::*)())&clang::QualType::removeLocalRestrict  )
        .def("removeLocalCVRQualifiers", (void (clang::QualType::*)(unsigned int))&clang::QualType::removeLocalCVRQualifiers  )
        .def("removeLocalFastQualifiers", []( clang::QualType& self)  {
          self.removeLocalFastQualifiers();
        } )
        .def("removeLocalFastQualifiers", []( clang::QualType& self, unsigned int Mask)  {
          self.removeLocalFastQualifiers(Mask);
        } )
        .def("withFastQualifiers", (clang::QualType (clang::QualType::*)(unsigned int) const)&clang::QualType::withFastQualifiers  )
        .def("withExactLocalFastQualifiers", (clang::QualType (clang::QualType::*)(unsigned int) const)&clang::QualType::withExactLocalFastQualifiers  )
        .def("withoutLocalFastQualifiers", (clang::QualType (clang::QualType::*)() const)&clang::QualType::withoutLocalFastQualifiers  )
        .def("getCanonicalType", (clang::QualType (clang::QualType::*)() const)&clang::QualType::getCanonicalType  )
        .def("getLocalUnqualifiedType", (clang::QualType (clang::QualType::*)() const)&clang::QualType::getLocalUnqualifiedType  )
        .def("getUnqualifiedType", (clang::QualType (clang::QualType::*)() const)&clang::QualType::getUnqualifiedType  )
        //.def("getSplitUnqualifiedType", (clang::SplitQualType (clang::QualType::*)() const)&clang::QualType::getSplitUnqualifiedType  )
        .def("isMoreQualifiedThan", (bool (clang::QualType::*)(clang::QualType) const)&clang::QualType::isMoreQualifiedThan  )
        .def("isAtLeastAsQualifiedAs", (bool (clang::QualType::*)(clang::QualType) const)&clang::QualType::isAtLeastAsQualifiedAs  )
        .def("getNonReferenceType", (clang::QualType (clang::QualType::*)() const)&clang::QualType::getNonReferenceType  )
        .def("getNonLValueExprType", (clang::QualType (clang::QualType::*)(const clang::ASTContext &) const)&clang::QualType::getNonLValueExprType  )
        .def("getDesugaredType", [](const clang::QualType& self, const clang::ASTContext & Context) -> clang::QualType {
         return self.getDesugaredType(Context);
        } )
        //.def("getSplitDesugaredType", [](const clang::QualType& self) -> clang::SplitQualType {
        // return self.getSplitDesugaredType();
        //} )
        .def("getSingleStepDesugaredType", (clang::QualType (clang::QualType::*)(const clang::ASTContext &) const)&clang::QualType::getSingleStepDesugaredType  )
        .def("IgnoreParens", [](const clang::QualType& self) -> clang::QualType {
         return self.IgnoreParens();
        } )
        .def("getAsString", [](const clang::QualType& self) -> std::basic_string<char> {
         return self.getAsString();
        } )
        //.def("getAsString", [](const clang::QualType& self, const clang::PrintingPolicy & Policy) -> std::basic_string<char> {
        // return self.getAsString(Policy);
        //} )
        //.def("print", [](const clang::QualType& self, llvm::raw_ostream & OS , const clang::PrintingPolicy & Policy , const llvm::Twine & PlaceHolder)  {
        //  self.print(OS, Policy, PlaceHolder);
        //} )
        //.def("getAsStringInternal", [](const clang::QualType& self, std::basic_string<char> & Str , const clang::PrintingPolicy & Policy)  {
        //  self.getAsStringInternal(Str, Policy);
        //} )
        //.def("stream", (clang::QualType::StreamedQualTypeHelper (clang::QualType::*)(const clang::PrintingPolicy &, const llvm::Twine &) const)&clang::QualType::stream  )
        .def("dump", [](const clang::QualType& self, const char * s)  {
          self.dump(s);
        } )
        .def("dump", [](const clang::QualType& self)  {
          self.dump();
        } )
        //.def("Profile", (void (clang::QualType::*)(llvm::FoldingSetNodeID &) const)&clang::QualType::Profile  )
        .def("getAddressSpace", (unsigned int (clang::QualType::*)() const)&clang::QualType::getAddressSpace  )
        .def("getObjCGCAttr", (clang::Qualifiers::GC (clang::QualType::*)() const)&clang::QualType::getObjCGCAttr  )
        .def("isObjCGCWeak", (bool (clang::QualType::*)() const)&clang::QualType::isObjCGCWeak  )
        .def("isObjCGCStrong", (bool (clang::QualType::*)() const)&clang::QualType::isObjCGCStrong  )
        .def("getObjCLifetime", (clang::Qualifiers::ObjCLifetime (clang::QualType::*)() const)&clang::QualType::getObjCLifetime  )
        .def("hasNonTrivialObjCLifetime", (bool (clang::QualType::*)() const)&clang::QualType::hasNonTrivialObjCLifetime  )
        .def("hasStrongOrWeakObjCLifetime", (bool (clang::QualType::*)() const)&clang::QualType::hasStrongOrWeakObjCLifetime  )
        .def("isDestructedType", (clang::QualType::DestructionKind (clang::QualType::*)() const)&clang::QualType::isDestructedType  )
        .def("isCForbiddenLValueType", (bool (clang::QualType::*)() const)&clang::QualType::isCForbiddenLValueType  )
        //.def("substObjCTypeArgs", (clang::QualType (clang::QualType::*)(clang::ASTContext &, llvm::ArrayRef<clang::QualType>, clang::ObjCSubstitutionContext) const)&clang::QualType::substObjCTypeArgs  )
        .def("substObjCMemberType", (clang::QualType (clang::QualType::*)(clang::QualType, const clang::DeclContext *, clang::ObjCSubstitutionContext) const)&clang::QualType::substObjCMemberType  )
        .def("stripObjCKindOfType", (clang::QualType (clang::QualType::*)(const clang::ASTContext &) const)&clang::QualType::stripObjCKindOfType  )
    ;

    py::class_<clang::Type>(m, "Type" )

        .def("getTypeClass", (clang::Type::TypeClass (clang::Type::*)() const)&clang::Type::getTypeClass  )
        .def("isFromAST", (bool (clang::Type::*)() const)&clang::Type::isFromAST  )
        .def("containsUnexpandedParameterPack", (bool (clang::Type::*)() const)&clang::Type::containsUnexpandedParameterPack  )
        .def("isCanonicalUnqualified", (bool (clang::Type::*)() const)&clang::Type::isCanonicalUnqualified  )
        .def("getLocallyUnqualifiedSingleStepDesugaredType", (clang::QualType (clang::Type::*)() const)&clang::Type::getLocallyUnqualifiedSingleStepDesugaredType  )
        .def("isIncompleteOrObjectType", (bool (clang::Type::*)() const)&clang::Type::isIncompleteOrObjectType  )
        .def("isObjectType", (bool (clang::Type::*)() const)&clang::Type::isObjectType  )
        .def("isLiteralType", (bool (clang::Type::*)(const clang::ASTContext &) const)&clang::Type::isLiteralType  )
        .def("isStandardLayoutType", (bool (clang::Type::*)() const)&clang::Type::isStandardLayoutType  )
        .def("isBuiltinType", (bool (clang::Type::*)() const)&clang::Type::isBuiltinType  )
        .def("isSpecificBuiltinType", (bool (clang::Type::*)(unsigned int) const)&clang::Type::isSpecificBuiltinType  )
        .def("isPlaceholderType", (bool (clang::Type::*)() const)&clang::Type::isPlaceholderType  )
        //.def("getAsPlaceholderType", (const clang::BuiltinType * (clang::Type::*)() const)&clang::Type::getAsPlaceholderType , py::return_value_policy::reference_internal )
        .def("isSpecificPlaceholderType", (bool (clang::Type::*)(unsigned int) const)&clang::Type::isSpecificPlaceholderType  )
        .def("isNonOverloadPlaceholderType", (bool (clang::Type::*)() const)&clang::Type::isNonOverloadPlaceholderType  )
        .def("isIntegerType", (bool (clang::Type::*)() const)&clang::Type::isIntegerType  )
        .def("isEnumeralType", (bool (clang::Type::*)() const)&clang::Type::isEnumeralType  )
        .def("isBooleanType", (bool (clang::Type::*)() const)&clang::Type::isBooleanType  )
        .def("isCharType", (bool (clang::Type::*)() const)&clang::Type::isCharType  )
        .def("isWideCharType", (bool (clang::Type::*)() const)&clang::Type::isWideCharType  )
        .def("isChar16Type", (bool (clang::Type::*)() const)&clang::Type::isChar16Type  )
        .def("isChar32Type", (bool (clang::Type::*)() const)&clang::Type::isChar32Type  )
        .def("isAnyCharacterType", (bool (clang::Type::*)() const)&clang::Type::isAnyCharacterType  )
        .def("isIntegralType", (bool (clang::Type::*)(clang::ASTContext &) const)&clang::Type::isIntegralType  )
        .def("isIntegralOrEnumerationType", (bool (clang::Type::*)() const)&clang::Type::isIntegralOrEnumerationType  )
        .def("isIntegralOrUnscopedEnumerationType", (bool (clang::Type::*)() const)&clang::Type::isIntegralOrUnscopedEnumerationType  )
        .def("isRealFloatingType", (bool (clang::Type::*)() const)&clang::Type::isRealFloatingType  )
        .def("isComplexType", (bool (clang::Type::*)() const)&clang::Type::isComplexType  )
        .def("isAnyComplexType", (bool (clang::Type::*)() const)&clang::Type::isAnyComplexType  )
        .def("isFloatingType", (bool (clang::Type::*)() const)&clang::Type::isFloatingType  )
        .def("isHalfType", (bool (clang::Type::*)() const)&clang::Type::isHalfType  )
        .def("isRealType", (bool (clang::Type::*)() const)&clang::Type::isRealType  )
        .def("isArithmeticType", (bool (clang::Type::*)() const)&clang::Type::isArithmeticType  )
        .def("isVoidType", (bool (clang::Type::*)() const)&clang::Type::isVoidType  )
        .def("isScalarType", (bool (clang::Type::*)() const)&clang::Type::isScalarType  )
        .def("isAggregateType", (bool (clang::Type::*)() const)&clang::Type::isAggregateType  )
        .def("isFundamentalType", (bool (clang::Type::*)() const)&clang::Type::isFundamentalType  )
        .def("isCompoundType", (bool (clang::Type::*)() const)&clang::Type::isCompoundType  )
        .def("isFunctionType", (bool (clang::Type::*)() const)&clang::Type::isFunctionType  )
        .def("isFunctionNoProtoType", (bool (clang::Type::*)() const)&clang::Type::isFunctionNoProtoType  )
        .def("isFunctionProtoType", (bool (clang::Type::*)() const)&clang::Type::isFunctionProtoType  )
        .def("isPointerType", (bool (clang::Type::*)() const)&clang::Type::isPointerType  )
        .def("isAnyPointerType", (bool (clang::Type::*)() const)&clang::Type::isAnyPointerType  )
        .def("isBlockPointerType", (bool (clang::Type::*)() const)&clang::Type::isBlockPointerType  )
        .def("isVoidPointerType", (bool (clang::Type::*)() const)&clang::Type::isVoidPointerType  )
        .def("isReferenceType", (bool (clang::Type::*)() const)&clang::Type::isReferenceType  )
        .def("isLValueReferenceType", (bool (clang::Type::*)() const)&clang::Type::isLValueReferenceType  )
        .def("isRValueReferenceType", (bool (clang::Type::*)() const)&clang::Type::isRValueReferenceType  )
        .def("isFunctionPointerType", (bool (clang::Type::*)() const)&clang::Type::isFunctionPointerType  )
        .def("isMemberPointerType", (bool (clang::Type::*)() const)&clang::Type::isMemberPointerType  )
        .def("isMemberFunctionPointerType", (bool (clang::Type::*)() const)&clang::Type::isMemberFunctionPointerType  )
        .def("isMemberDataPointerType", (bool (clang::Type::*)() const)&clang::Type::isMemberDataPointerType  )
        .def("isArrayType", (bool (clang::Type::*)() const)&clang::Type::isArrayType  )
        .def("isConstantArrayType", (bool (clang::Type::*)() const)&clang::Type::isConstantArrayType  )
        .def("isIncompleteArrayType", (bool (clang::Type::*)() const)&clang::Type::isIncompleteArrayType  )
        .def("isVariableArrayType", (bool (clang::Type::*)() const)&clang::Type::isVariableArrayType  )
        .def("isDependentSizedArrayType", (bool (clang::Type::*)() const)&clang::Type::isDependentSizedArrayType  )
        .def("isRecordType", (bool (clang::Type::*)() const)&clang::Type::isRecordType  )
        .def("isClassType", (bool (clang::Type::*)() const)&clang::Type::isClassType  )
        .def("isStructureType", (bool (clang::Type::*)() const)&clang::Type::isStructureType  )
        .def("isObjCBoxableRecordType", (bool (clang::Type::*)() const)&clang::Type::isObjCBoxableRecordType  )
        .def("isInterfaceType", (bool (clang::Type::*)() const)&clang::Type::isInterfaceType  )
        .def("isStructureOrClassType", (bool (clang::Type::*)() const)&clang::Type::isStructureOrClassType  )
        .def("isUnionType", (bool (clang::Type::*)() const)&clang::Type::isUnionType  )
        .def("isComplexIntegerType", (bool (clang::Type::*)() const)&clang::Type::isComplexIntegerType  )
        .def("isVectorType", (bool (clang::Type::*)() const)&clang::Type::isVectorType  )
        .def("isExtVectorType", (bool (clang::Type::*)() const)&clang::Type::isExtVectorType  )
        .def("isObjCObjectPointerType", (bool (clang::Type::*)() const)&clang::Type::isObjCObjectPointerType  )
        .def("isObjCRetainableType", (bool (clang::Type::*)() const)&clang::Type::isObjCRetainableType  )
        .def("isObjCLifetimeType", (bool (clang::Type::*)() const)&clang::Type::isObjCLifetimeType  )
        .def("isObjCIndirectLifetimeType", (bool (clang::Type::*)() const)&clang::Type::isObjCIndirectLifetimeType  )
        .def("isObjCNSObjectType", (bool (clang::Type::*)() const)&clang::Type::isObjCNSObjectType  )
        .def("isObjCIndependentClassType", (bool (clang::Type::*)() const)&clang::Type::isObjCIndependentClassType  )
        .def("isObjCObjectType", (bool (clang::Type::*)() const)&clang::Type::isObjCObjectType  )
        .def("isObjCQualifiedInterfaceType", (bool (clang::Type::*)() const)&clang::Type::isObjCQualifiedInterfaceType  )
        .def("isObjCQualifiedIdType", (bool (clang::Type::*)() const)&clang::Type::isObjCQualifiedIdType  )
        .def("isObjCQualifiedClassType", (bool (clang::Type::*)() const)&clang::Type::isObjCQualifiedClassType  )
        .def("isObjCObjectOrInterfaceType", (bool (clang::Type::*)() const)&clang::Type::isObjCObjectOrInterfaceType  )
        .def("isObjCIdType", (bool (clang::Type::*)() const)&clang::Type::isObjCIdType  )
        .def("isObjCInertUnsafeUnretainedType", (bool (clang::Type::*)() const)&clang::Type::isObjCInertUnsafeUnretainedType  )
        .def("isObjCClassType", (bool (clang::Type::*)() const)&clang::Type::isObjCClassType  )
        .def("isObjCClassOrClassKindOfType", (bool (clang::Type::*)() const)&clang::Type::isObjCClassOrClassKindOfType  )
        .def("isBlockCompatibleObjCPointerType", (bool (clang::Type::*)(clang::ASTContext &) const)&clang::Type::isBlockCompatibleObjCPointerType  )
        .def("isObjCSelType", (bool (clang::Type::*)() const)&clang::Type::isObjCSelType  )
        .def("isObjCBuiltinType", (bool (clang::Type::*)() const)&clang::Type::isObjCBuiltinType  )
        .def("isObjCARCBridgableType", (bool (clang::Type::*)() const)&clang::Type::isObjCARCBridgableType  )
        .def("isCARCBridgableType", (bool (clang::Type::*)() const)&clang::Type::isCARCBridgableType  )
        .def("isTemplateTypeParmType", (bool (clang::Type::*)() const)&clang::Type::isTemplateTypeParmType  )
        .def("isNullPtrType", (bool (clang::Type::*)() const)&clang::Type::isNullPtrType  )
        .def("isAtomicType", (bool (clang::Type::*)() const)&clang::Type::isAtomicType  )
        .def("isImage1dT", (bool (clang::Type::*)() const)&clang::Type::isImage1dT  )
        .def("isImage1dArrayT", (bool (clang::Type::*)() const)&clang::Type::isImage1dArrayT  )
        .def("isImage1dBufferT", (bool (clang::Type::*)() const)&clang::Type::isImage1dBufferT  )
        .def("isImage2dT", (bool (clang::Type::*)() const)&clang::Type::isImage2dT  )
        .def("isImage2dArrayT", (bool (clang::Type::*)() const)&clang::Type::isImage2dArrayT  )
        .def("isImage2dDepthT", (bool (clang::Type::*)() const)&clang::Type::isImage2dDepthT  )
        .def("isImage2dArrayDepthT", (bool (clang::Type::*)() const)&clang::Type::isImage2dArrayDepthT  )
        .def("isImage2dMSAAT", (bool (clang::Type::*)() const)&clang::Type::isImage2dMSAAT  )
        .def("isImage2dArrayMSAAT", (bool (clang::Type::*)() const)&clang::Type::isImage2dArrayMSAAT  )
        .def("isImage2dMSAATDepth", (bool (clang::Type::*)() const)&clang::Type::isImage2dMSAATDepth  )
        .def("isImage2dArrayMSAATDepth", (bool (clang::Type::*)() const)&clang::Type::isImage2dArrayMSAATDepth  )
        .def("isImage3dT", (bool (clang::Type::*)() const)&clang::Type::isImage3dT  )
        .def("isImageType", (bool (clang::Type::*)() const)&clang::Type::isImageType  )
        .def("isSamplerT", (bool (clang::Type::*)() const)&clang::Type::isSamplerT  )
        .def("isEventT", (bool (clang::Type::*)() const)&clang::Type::isEventT  )
        .def("isClkEventT", (bool (clang::Type::*)() const)&clang::Type::isClkEventT  )
        .def("isQueueT", (bool (clang::Type::*)() const)&clang::Type::isQueueT  )
        .def("isNDRangeT", (bool (clang::Type::*)() const)&clang::Type::isNDRangeT  )
        .def("isReserveIDT", (bool (clang::Type::*)() const)&clang::Type::isReserveIDT  )
        .def("isPipeType", (bool (clang::Type::*)() const)&clang::Type::isPipeType  )
        .def("isOpenCLSpecificType", (bool (clang::Type::*)() const)&clang::Type::isOpenCLSpecificType  )
        .def("isObjCARCImplicitlyUnretainedType", (bool (clang::Type::*)() const)&clang::Type::isObjCARCImplicitlyUnretainedType  )
        .def("getObjCARCImplicitLifetime", (clang::Qualifiers::ObjCLifetime (clang::Type::*)() const)&clang::Type::getObjCARCImplicitLifetime  )
        .def("getScalarTypeKind", (clang::Type::ScalarTypeKind (clang::Type::*)() const)&clang::Type::getScalarTypeKind  )
        .def("isDependentType", (bool (clang::Type::*)() const)&clang::Type::isDependentType  )
        .def("isInstantiationDependentType", (bool (clang::Type::*)() const)&clang::Type::isInstantiationDependentType  )
        .def("isUndeducedType", (bool (clang::Type::*)() const)&clang::Type::isUndeducedType  )
        .def("isVariablyModifiedType", (bool (clang::Type::*)() const)&clang::Type::isVariablyModifiedType  )
        .def("hasSizedVLAType", (bool (clang::Type::*)() const)&clang::Type::hasSizedVLAType  )
        .def("hasUnnamedOrLocalType", (bool (clang::Type::*)() const)&clang::Type::hasUnnamedOrLocalType  )
        .def("isOverloadableType", (bool (clang::Type::*)() const)&clang::Type::isOverloadableType  )
        .def("isElaboratedTypeSpecifier", (bool (clang::Type::*)() const)&clang::Type::isElaboratedTypeSpecifier  )
        .def("canDecayToPointerType", (bool (clang::Type::*)() const)&clang::Type::canDecayToPointerType  )
        .def("hasPointerRepresentation", (bool (clang::Type::*)() const)&clang::Type::hasPointerRepresentation  )
        .def("hasObjCPointerRepresentation", (bool (clang::Type::*)() const)&clang::Type::hasObjCPointerRepresentation  )
        .def("hasIntegerRepresentation", (bool (clang::Type::*)() const)&clang::Type::hasIntegerRepresentation  )
        .def("hasSignedIntegerRepresentation", (bool (clang::Type::*)() const)&clang::Type::hasSignedIntegerRepresentation  )
        .def("hasUnsignedIntegerRepresentation", (bool (clang::Type::*)() const)&clang::Type::hasUnsignedIntegerRepresentation  )
        .def("hasFloatingRepresentation", (bool (clang::Type::*)() const)&clang::Type::hasFloatingRepresentation  )
        //.def("getAsStructureType", (const clang::RecordType * (clang::Type::*)() const)&clang::Type::getAsStructureType , py::return_value_policy::reference_internal )
        //.def("getAsUnionType", (const clang::RecordType * (clang::Type::*)() const)&clang::Type::getAsUnionType , py::return_value_policy::reference_internal )
        //.def("getAsComplexIntegerType", (const clang::ComplexType * (clang::Type::*)() const)&clang::Type::getAsComplexIntegerType , py::return_value_policy::reference_internal )
        //.def("getAsObjCInterfaceType", (const clang::ObjCObjectType * (clang::Type::*)() const)&clang::Type::getAsObjCInterfaceType , py::return_value_policy::reference_internal )
        //.def("getAsObjCInterfacePointerType", (const clang::ObjCObjectPointerType * (clang::Type::*)() const)&clang::Type::getAsObjCInterfacePointerType , py::return_value_policy::reference_internal )
        //.def("getAsObjCQualifiedIdType", (const clang::ObjCObjectPointerType * (clang::Type::*)() const)&clang::Type::getAsObjCQualifiedIdType , py::return_value_policy::reference_internal )
        //.def("getAsObjCQualifiedClassType", (const clang::ObjCObjectPointerType * (clang::Type::*)() const)&clang::Type::getAsObjCQualifiedClassType , py::return_value_policy::reference_internal )
        //.def("getAsObjCQualifiedInterfaceType", (const clang::ObjCObjectType * (clang::Type::*)() const)&clang::Type::getAsObjCQualifiedInterfaceType , py::return_value_policy::reference_internal )
        .def("getAsCXXRecordDecl", (clang::CXXRecordDecl * (clang::Type::*)() const)&clang::Type::getAsCXXRecordDecl , py::return_value_policy::reference_internal )
        .def("getAsTagDecl", (clang::TagDecl * (clang::Type::*)() const)&clang::Type::getAsTagDecl , py::return_value_policy::reference_internal )
        .def("getPointeeCXXRecordDecl", (const clang::CXXRecordDecl * (clang::Type::*)() const)&clang::Type::getPointeeCXXRecordDecl , py::return_value_policy::reference_internal )
        //.def("getContainedAutoType", (clang::AutoType * (clang::Type::*)() const)&clang::Type::getContainedAutoType , py::return_value_policy::reference_internal )
        //.def("getAsArrayTypeUnsafe", (const clang::ArrayType * (clang::Type::*)() const)&clang::Type::getAsArrayTypeUnsafe , py::return_value_policy::reference_internal )
        //.def("castAsArrayTypeUnsafe", (const clang::ArrayType * (clang::Type::*)() const)&clang::Type::castAsArrayTypeUnsafe , py::return_value_policy::reference_internal )
        .def("getBaseElementTypeUnsafe", (const clang::Type * (clang::Type::*)() const)&clang::Type::getBaseElementTypeUnsafe , py::return_value_policy::reference_internal )
        .def("getArrayElementTypeNoTypeQual", (const clang::Type * (clang::Type::*)() const)&clang::Type::getArrayElementTypeNoTypeQual , py::return_value_policy::reference_internal )
        .def("getPointeeType", (clang::QualType (clang::Type::*)() const)&clang::Type::getPointeeType  )
        .def("getUnqualifiedDesugaredType", (const clang::Type * (clang::Type::*)() const)&clang::Type::getUnqualifiedDesugaredType , py::return_value_policy::reference_internal )
        .def("isPromotableIntegerType", (bool (clang::Type::*)() const)&clang::Type::isPromotableIntegerType  )
        .def("isSignedIntegerType", (bool (clang::Type::*)() const)&clang::Type::isSignedIntegerType  )
        .def("isUnsignedIntegerType", (bool (clang::Type::*)() const)&clang::Type::isUnsignedIntegerType  )
        .def("isSignedIntegerOrEnumerationType", (bool (clang::Type::*)() const)&clang::Type::isSignedIntegerOrEnumerationType  )
        .def("isUnsignedIntegerOrEnumerationType", (bool (clang::Type::*)() const)&clang::Type::isUnsignedIntegerOrEnumerationType  )
        .def("isConstantSizeType", (bool (clang::Type::*)() const)&clang::Type::isConstantSizeType  )
        .def("isSpecifierType", (bool (clang::Type::*)() const)&clang::Type::isSpecifierType  )
        .def("getLinkage", (clang::Linkage (clang::Type::*)() const)&clang::Type::getLinkage  )
        .def("getVisibility", (clang::Visibility (clang::Type::*)() const)&clang::Type::getVisibility  )
        .def("isVisibilityExplicit", (bool (clang::Type::*)() const)&clang::Type::isVisibilityExplicit  )
        //.def("getLinkageAndVisibility", (clang::LinkageInfo (clang::Type::*)() const)&clang::Type::getLinkageAndVisibility  )
        .def("isLinkageValid", (bool (clang::Type::*)() const)&clang::Type::isLinkageValid  )
        //.def("getNullability", (llvm::Optional<clang::NullabilityKind> (clang::Type::*)(const clang::ASTContext &) const)&clang::Type::getNullability  )
        .def("canHaveNullability", (bool (clang::Type::*)() const)&clang::Type::canHaveNullability  )
        //.def("getObjCSubstitutions", (llvm::Optional<llvm::ArrayRef<clang::QualType> > (clang::Type::*)(const clang::DeclContext *) const)&clang::Type::getObjCSubstitutions  )
        .def("acceptsObjCTypeParams", (bool (clang::Type::*)() const)&clang::Type::acceptsObjCTypeParams  )
        .def("getTypeClassName", (const char * (clang::Type::*)() const)&clang::Type::getTypeClassName  )
        .def("getCanonicalTypeInternal", (clang::QualType (clang::Type::*)() const)&clang::Type::getCanonicalTypeInternal  )
        //.def("getCanonicalTypeUnqualified", (clang::CanQual<clang::Type> (clang::Type::*)() const)&clang::Type::getCanonicalTypeUnqualified  )
        .def("dump", (void (clang::Type::*)() const)&clang::Type::dump  )
    ;

    py::class_<clang::TypeSourceInfo>(m, "TypeSourceInfo" )

        .def("getType", (clang::QualType (clang::TypeSourceInfo::*)() const)&clang::TypeSourceInfo::getType  )
        //.def("getTypeLoc", (clang::TypeLoc (clang::TypeSourceInfo::*)() const)&clang::TypeSourceInfo::getTypeLoc  )
        .def("overrideType", (void (clang::TypeSourceInfo::*)(clang::QualType))&clang::TypeSourceInfo::overrideType  )
    ;

    py::class_<clang::TranslationUnitDecl, decl_deleter<clang::TranslationUnitDecl>::type>(m, "TranslationUnitDecl" , py::base<clang::Decl>())

        .def("getASTContext", (clang::ASTContext & (clang::TranslationUnitDecl::*)() const)&clang::TranslationUnitDecl::getASTContext  )
        .def("getAnonymousNamespace", (clang::NamespaceDecl * (clang::TranslationUnitDecl::*)() const)&clang::TranslationUnitDecl::getAnonymousNamespace , py::return_value_policy::reference_internal )
        .def("setAnonymousNamespace", (void (clang::TranslationUnitDecl::*)(clang::NamespaceDecl *))&clang::TranslationUnitDecl::setAnonymousNamespace  )
    ;

    py::class_<clang::ExternCContextDecl, decl_deleter<clang::ExternCContextDecl>::type>(m, "ExternCContextDecl" , py::base<clang::Decl>())

    ;

    py::class_<clang::NamedDecl, decl_deleter<clang::NamedDecl>::type>(m, "NamedDecl" , py::base<clang::Decl>())

        //.def("getIdentifier", (clang::IdentifierInfo * (clang::NamedDecl::*)() const)&clang::NamedDecl::getIdentifier , py::return_value_policy::reference_internal )
        .def("getName", (llvm::StringRef (clang::NamedDecl::*)() const)&clang::NamedDecl::getName  )
        .def("getNameAsString", (std::basic_string<char> (clang::NamedDecl::*)() const)&clang::NamedDecl::getNameAsString  )
        //.def("printName", (void (clang::NamedDecl::*)(llvm::raw_ostream &) const)&clang::NamedDecl::printName  )
        .def("getDeclName", (clang::DeclarationName (clang::NamedDecl::*)() const)&clang::NamedDecl::getDeclName  )
        .def("setDeclName", (void (clang::NamedDecl::*)(clang::DeclarationName))&clang::NamedDecl::setDeclName  )
        //.def("printQualifiedName", [](const clang::NamedDecl& self, llvm::raw_ostream & OS)  {
        //  self.printQualifiedName(OS);
        //} )
        //.def("printQualifiedName", [](const clang::NamedDecl& self, llvm::raw_ostream & OS , const clang::PrintingPolicy & Policy)  {
        //  self.printQualifiedName(OS, Policy);
        //} )
        .def("getQualifiedNameAsString", (std::basic_string<char> (clang::NamedDecl::*)() const)&clang::NamedDecl::getQualifiedNameAsString  )
        //.def("getNameForDiagnostic", (void (clang::NamedDecl::*)(llvm::raw_ostream &, const clang::PrintingPolicy &, bool) const)&clang::NamedDecl::getNameForDiagnostic  )
        .def("declarationReplaces", (bool (clang::NamedDecl::*)(clang::NamedDecl *, bool) const)&clang::NamedDecl::declarationReplaces  )
        .def("hasLinkage", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::hasLinkage  )
        .def("isHidden", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::isHidden  )
        .def("setHidden", (void (clang::NamedDecl::*)(bool))&clang::NamedDecl::setHidden  )
        .def("isCXXClassMember", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::isCXXClassMember  )
        .def("isCXXInstanceMember", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::isCXXInstanceMember  )
        .def("getLinkageInternal", (clang::Linkage (clang::NamedDecl::*)() const)&clang::NamedDecl::getLinkageInternal  )
        .def("getFormalLinkage", (clang::Linkage (clang::NamedDecl::*)() const)&clang::NamedDecl::getFormalLinkage  )
        .def("hasExternalFormalLinkage", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::hasExternalFormalLinkage  )
        .def("isExternallyVisible", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::isExternallyVisible  )
        .def("getVisibility", (clang::Visibility (clang::NamedDecl::*)() const)&clang::NamedDecl::getVisibility  )
        //.def("getLinkageAndVisibility", (clang::LinkageInfo (clang::NamedDecl::*)() const)&clang::NamedDecl::getLinkageAndVisibility  )
        //.def("getExplicitVisibility", (llvm::Optional<clang::Visibility> (clang::NamedDecl::*)(clang::NamedDecl::ExplicitVisibilityKind) const)&clang::NamedDecl::getExplicitVisibility  )
        .def("isLinkageValid", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::isLinkageValid  )
        .def("hasLinkageBeenComputed", (bool (clang::NamedDecl::*)() const)&clang::NamedDecl::hasLinkageBeenComputed  )
        .def("getUnderlyingDecl", []( clang::NamedDecl& self) -> clang::NamedDecl * {
         return self.getUnderlyingDecl();
        } , py::return_value_policy::reference_internal)
        .def("getUnderlyingDecl", [](const clang::NamedDecl& self) -> const clang::NamedDecl * {
         return self.getUnderlyingDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::NamedDecl& self) -> clang::NamedDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::NamedDecl& self) -> const clang::NamedDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getObjCFStringFormattingFamily", (clang::ObjCStringFormatFamily (clang::NamedDecl::*)() const)&clang::NamedDecl::getObjCFStringFormattingFamily  )
    ;

    py::class_<clang::LabelDecl, decl_deleter<clang::LabelDecl>::type>(m, "LabelDecl" , py::base<clang::NamedDecl>())

        .def("getStmt", (clang::LabelStmt * (clang::LabelDecl::*)() const)&clang::LabelDecl::getStmt , py::return_value_policy::reference_internal )
        .def("setStmt", (void (clang::LabelDecl::*)(clang::LabelStmt *))&clang::LabelDecl::setStmt  )
        .def("isGnuLocal", (bool (clang::LabelDecl::*)() const)&clang::LabelDecl::isGnuLocal  )
        .def("setLocStart", (void (clang::LabelDecl::*)(clang::SourceLocation))&clang::LabelDecl::setLocStart  )
        .def("getSourceRange", (clang::SourceRange (clang::LabelDecl::*)() const)&clang::LabelDecl::getSourceRange  )
        .def("isMSAsmLabel", (bool (clang::LabelDecl::*)() const)&clang::LabelDecl::isMSAsmLabel  )
        .def("isResolvedMSAsmLabel", (bool (clang::LabelDecl::*)() const)&clang::LabelDecl::isResolvedMSAsmLabel  )
        .def("setMSAsmLabel", (void (clang::LabelDecl::*)(llvm::StringRef))&clang::LabelDecl::setMSAsmLabel  )
        .def("getMSAsmLabel", (llvm::StringRef (clang::LabelDecl::*)() const)&clang::LabelDecl::getMSAsmLabel  )
        .def("setMSAsmLabelResolved", (void (clang::LabelDecl::*)())&clang::LabelDecl::setMSAsmLabelResolved  )
    ;

    py::class_<clang::NamespaceDecl, decl_deleter<clang::NamespaceDecl>::type>(m, "NamespaceDecl" , py::base<clang::NamedDecl>())

        .def("isAnonymousNamespace", (bool (clang::NamespaceDecl::*)() const)&clang::NamespaceDecl::isAnonymousNamespace  )
        .def("isInline", (bool (clang::NamespaceDecl::*)() const)&clang::NamespaceDecl::isInline  )
        .def("setInline", (void (clang::NamespaceDecl::*)(bool))&clang::NamespaceDecl::setInline  )
        .def("getOriginalNamespace", []( clang::NamespaceDecl& self) -> clang::NamespaceDecl * {
         return self.getOriginalNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getOriginalNamespace", [](const clang::NamespaceDecl& self) -> const clang::NamespaceDecl * {
         return self.getOriginalNamespace();
        } , py::return_value_policy::reference_internal)
        .def("isOriginalNamespace", (bool (clang::NamespaceDecl::*)() const)&clang::NamespaceDecl::isOriginalNamespace  )
        .def("getAnonymousNamespace", (clang::NamespaceDecl * (clang::NamespaceDecl::*)() const)&clang::NamespaceDecl::getAnonymousNamespace , py::return_value_policy::reference_internal )
        .def("setAnonymousNamespace", (void (clang::NamespaceDecl::*)(clang::NamespaceDecl *))&clang::NamespaceDecl::setAnonymousNamespace  )
        .def("getCanonicalDecl", []( clang::NamespaceDecl& self) -> clang::NamespaceDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::NamespaceDecl& self) -> const clang::NamespaceDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getSourceRange", (clang::SourceRange (clang::NamespaceDecl::*)() const)&clang::NamespaceDecl::getSourceRange  )
        .def("getLocStart", (clang::SourceLocation (clang::NamespaceDecl::*)() const)&clang::NamespaceDecl::getLocStart  )
        .def("getRBraceLoc", (clang::SourceLocation (clang::NamespaceDecl::*)() const)&clang::NamespaceDecl::getRBraceLoc  )
        .def("setLocStart", (void (clang::NamespaceDecl::*)(clang::SourceLocation))&clang::NamespaceDecl::setLocStart  )
        .def("setRBraceLoc", (void (clang::NamespaceDecl::*)(clang::SourceLocation))&clang::NamespaceDecl::setRBraceLoc  )
    ;

    py::class_<clang::ValueDecl, decl_deleter<clang::ValueDecl>::type>(m, "ValueDecl" , py::base<clang::NamedDecl>())

        .def("getType", (clang::QualType (clang::ValueDecl::*)() const)&clang::ValueDecl::getType  )
        .def("setType", (void (clang::ValueDecl::*)(clang::QualType))&clang::ValueDecl::setType  )
        .def("isWeak", (bool (clang::ValueDecl::*)() const)&clang::ValueDecl::isWeak  )
    ;

    py::class_<clang::DeclaratorDecl, decl_deleter<clang::DeclaratorDecl>::type>(m, "DeclaratorDecl" , py::base<clang::ValueDecl>())

        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeSourceInfo", (void (clang::DeclaratorDecl::*)(clang::TypeSourceInfo *))&clang::DeclaratorDecl::setTypeSourceInfo  )
        .def("getInnerLocStart", (clang::SourceLocation (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getInnerLocStart  )
        .def("setInnerLocStart", (void (clang::DeclaratorDecl::*)(clang::SourceLocation))&clang::DeclaratorDecl::setInnerLocStart  )
        .def("getOuterLocStart", (clang::SourceLocation (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getOuterLocStart  )
        .def("getSourceRange", (clang::SourceRange (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getSourceRange  )
        .def("getLocStart", (clang::SourceLocation (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getLocStart  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getQualifier , py::return_value_policy::reference_internal )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getQualifierLoc  )
        //.def("setQualifierInfo", (void (clang::DeclaratorDecl::*)(clang::NestedNameSpecifierLoc))&clang::DeclaratorDecl::setQualifierInfo  )
        .def("getNumTemplateParameterLists", (unsigned int (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getNumTemplateParameterLists  )
        //.def("getTemplateParameterList", (clang::TemplateParameterList * (clang::DeclaratorDecl::*)(unsigned int) const)&clang::DeclaratorDecl::getTemplateParameterList , py::return_value_policy::reference_internal )
        //.def("setTemplateParameterListsInfo", (void (clang::DeclaratorDecl::*)(clang::ASTContext &, llvm::ArrayRef<clang::TemplateParameterList *>))&clang::DeclaratorDecl::setTemplateParameterListsInfo  )
        .def("getTypeSpecStartLoc", (clang::SourceLocation (clang::DeclaratorDecl::*)() const)&clang::DeclaratorDecl::getTypeSpecStartLoc  )
    ;

    py::class_<clang::VarDecl, decl_deleter<clang::VarDecl>::type>(m, "VarDecl" , py::base<clang::DeclaratorDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::VarDecl::*)() const)&clang::VarDecl::getSourceRange  )
        .def("getStorageClass", (clang::StorageClass (clang::VarDecl::*)() const)&clang::VarDecl::getStorageClass  )
        .def("setStorageClass", (void (clang::VarDecl::*)(clang::StorageClass))&clang::VarDecl::setStorageClass  )
        .def("setTSCSpec", (void (clang::VarDecl::*)(clang::ThreadStorageClassSpecifier))&clang::VarDecl::setTSCSpec  )
        .def("getTSCSpec", (clang::ThreadStorageClassSpecifier (clang::VarDecl::*)() const)&clang::VarDecl::getTSCSpec  )
        .def("getTLSKind", (clang::VarDecl::TLSKind (clang::VarDecl::*)() const)&clang::VarDecl::getTLSKind  )
        .def("hasLocalStorage", (bool (clang::VarDecl::*)() const)&clang::VarDecl::hasLocalStorage  )
        .def("isStaticLocal", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isStaticLocal  )
        .def("hasExternalStorage", (bool (clang::VarDecl::*)() const)&clang::VarDecl::hasExternalStorage  )
        .def("hasGlobalStorage", (bool (clang::VarDecl::*)() const)&clang::VarDecl::hasGlobalStorage  )
        .def("getStorageDuration", (clang::StorageDuration (clang::VarDecl::*)() const)&clang::VarDecl::getStorageDuration  )
        .def("getLanguageLinkage", (clang::LanguageLinkage (clang::VarDecl::*)() const)&clang::VarDecl::getLanguageLinkage  )
        .def("isExternC", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isExternC  )
        .def("isInExternCContext", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isInExternCContext  )
        .def("isInExternCXXContext", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isInExternCXXContext  )
        .def("isLocalVarDecl", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isLocalVarDecl  )
        .def("isLocalVarDeclOrParm", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isLocalVarDeclOrParm  )
        .def("isFunctionOrMethodVarDecl", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isFunctionOrMethodVarDecl  )
        .def("isStaticDataMember", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isStaticDataMember  )
        .def("getCanonicalDecl", []( clang::VarDecl& self) -> clang::VarDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::VarDecl& self) -> const clang::VarDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("isThisDeclarationADefinition", [](const clang::VarDecl& self, clang::ASTContext & ) -> clang::VarDecl::DefinitionKind {
         return self.isThisDeclarationADefinition();
        } )
        .def("isThisDeclarationADefinition", [](const clang::VarDecl& self) -> clang::VarDecl::DefinitionKind {
         return self.isThisDeclarationADefinition();
        } )
        .def("hasDefinition", [](const clang::VarDecl& self, clang::ASTContext & ) -> clang::VarDecl::DefinitionKind {
         return self.hasDefinition();
        } )
        .def("hasDefinition", [](const clang::VarDecl& self) -> clang::VarDecl::DefinitionKind {
         return self.hasDefinition();
        } )
        .def("getActingDefinition", []( clang::VarDecl& self) -> clang::VarDecl * {
         return self.getActingDefinition();
        } , py::return_value_policy::reference_internal)
        .def("getActingDefinition", [](const clang::VarDecl& self) -> const clang::VarDecl * {
         return self.getActingDefinition();
        } , py::return_value_policy::reference_internal)
        .def("getDefinition", []( clang::VarDecl& self, clang::ASTContext & ) -> clang::VarDecl * {
         return self.getDefinition();
        } , py::return_value_policy::reference_internal)
        .def("getDefinition", [](const clang::VarDecl& self, clang::ASTContext & C) -> const clang::VarDecl * {
         return self.getDefinition(C);
        } , py::return_value_policy::reference_internal)
        .def("getDefinition", []( clang::VarDecl& self) -> clang::VarDecl * {
         return self.getDefinition();
        } , py::return_value_policy::reference_internal)
        .def("getDefinition", [](const clang::VarDecl& self) -> const clang::VarDecl * {
         return self.getDefinition();
        } , py::return_value_policy::reference_internal)
        .def("isOutOfLine", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isOutOfLine  )
        .def("getOutOfLineDefinition", (clang::VarDecl * (clang::VarDecl::*)())&clang::VarDecl::getOutOfLineDefinition , py::return_value_policy::reference_internal )
        .def("isFileVarDecl", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isFileVarDecl  )
        .def("getAnyInitializer", [](const clang::VarDecl& self) -> const clang::Expr * {
         return self.getAnyInitializer();
        } , py::return_value_policy::reference_internal)
        .def("hasInit", (bool (clang::VarDecl::*)() const)&clang::VarDecl::hasInit  )
        .def("getInit", [](const clang::VarDecl& self) -> const clang::Expr * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("getInit", []( clang::VarDecl& self) -> clang::Expr * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("setInit", (void (clang::VarDecl::*)(clang::Expr *))&clang::VarDecl::setInit  )
        .def("isUsableInConstantExpressions", (bool (clang::VarDecl::*)(clang::ASTContext &) const)&clang::VarDecl::isUsableInConstantExpressions  )
        //.def("ensureEvaluatedStmt", (clang::EvaluatedStmt * (clang::VarDecl::*)() const)&clang::VarDecl::ensureEvaluatedStmt , py::return_value_policy::reference_internal )
        //.def("evaluateValue", [](const clang::VarDecl& self) -> clang::APValue * {
        // return self.evaluateValue();
        //} , py::return_value_policy::reference_internal)
        //.def("evaluateValue", [](const clang::VarDecl& self, llvm::SmallVectorImpl<std::pair<clang::SourceLocation, clang::PartialDiagnostic> > & Notes) -> clang::APValue * {
        // return self.evaluateValue(Notes);
        //} , py::return_value_policy::reference_internal)
        //.def("getEvaluatedValue", (clang::APValue * (clang::VarDecl::*)() const)&clang::VarDecl::getEvaluatedValue , py::return_value_policy::reference_internal )
        .def("isInitKnownICE", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isInitKnownICE  )
        .def("isInitICE", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isInitICE  )
        .def("checkInitIsICE", (bool (clang::VarDecl::*)() const)&clang::VarDecl::checkInitIsICE  )
        .def("setInitStyle", (void (clang::VarDecl::*)(clang::VarDecl::InitializationStyle))&clang::VarDecl::setInitStyle  )
        .def("getInitStyle", (clang::VarDecl::InitializationStyle (clang::VarDecl::*)() const)&clang::VarDecl::getInitStyle  )
        .def("isDirectInit", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isDirectInit  )
        .def("isExceptionVariable", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isExceptionVariable  )
        .def("setExceptionVariable", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setExceptionVariable  )
        .def("isNRVOVariable", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isNRVOVariable  )
        .def("setNRVOVariable", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setNRVOVariable  )
        .def("isCXXForRangeDecl", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isCXXForRangeDecl  )
        .def("setCXXForRangeDecl", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setCXXForRangeDecl  )
        .def("isARCPseudoStrong", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isARCPseudoStrong  )
        .def("setARCPseudoStrong", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setARCPseudoStrong  )
        .def("isConstexpr", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isConstexpr  )
        .def("setConstexpr", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setConstexpr  )
        .def("isConcept", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isConcept  )
        .def("setConcept", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setConcept  )
        .def("isInitCapture", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isInitCapture  )
        .def("setInitCapture", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setInitCapture  )
        .def("isPreviousDeclInSameBlockScope", (bool (clang::VarDecl::*)() const)&clang::VarDecl::isPreviousDeclInSameBlockScope  )
        .def("setPreviousDeclInSameBlockScope", (void (clang::VarDecl::*)(bool))&clang::VarDecl::setPreviousDeclInSameBlockScope  )
        .def("getInstantiatedFromStaticDataMember", (clang::VarDecl * (clang::VarDecl::*)() const)&clang::VarDecl::getInstantiatedFromStaticDataMember , py::return_value_policy::reference_internal )
        .def("getTemplateSpecializationKind", (clang::TemplateSpecializationKind (clang::VarDecl::*)() const)&clang::VarDecl::getTemplateSpecializationKind  )
        .def("getPointOfInstantiation", (clang::SourceLocation (clang::VarDecl::*)() const)&clang::VarDecl::getPointOfInstantiation  )
        //.def("getMemberSpecializationInfo", (clang::MemberSpecializationInfo * (clang::VarDecl::*)() const)&clang::VarDecl::getMemberSpecializationInfo , py::return_value_policy::reference_internal )
        .def("setTemplateSpecializationKind", (void (clang::VarDecl::*)(clang::TemplateSpecializationKind, clang::SourceLocation))&clang::VarDecl::setTemplateSpecializationKind  )
        .def("setInstantiationOfStaticDataMember", (void (clang::VarDecl::*)(clang::VarDecl *, clang::TemplateSpecializationKind))&clang::VarDecl::setInstantiationOfStaticDataMember  )
        .def("getDescribedVarTemplate", (clang::VarTemplateDecl * (clang::VarDecl::*)() const)&clang::VarDecl::getDescribedVarTemplate , py::return_value_policy::reference_internal )
        .def("setDescribedVarTemplate", (void (clang::VarDecl::*)(clang::VarTemplateDecl *))&clang::VarDecl::setDescribedVarTemplate  )
    ;

    py::class_<clang::ImplicitParamDecl, decl_deleter<clang::ImplicitParamDecl>::type>(m, "ImplicitParamDecl" , py::base<clang::VarDecl>())

    ;

    py::class_<clang::ParmVarDecl, decl_deleter<clang::ParmVarDecl>::type>(m, "ParmVarDecl" , py::base<clang::VarDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::getSourceRange  )
        .def("setObjCMethodScopeInfo", (void (clang::ParmVarDecl::*)(unsigned int))&clang::ParmVarDecl::setObjCMethodScopeInfo  )
        .def("setScopeInfo", (void (clang::ParmVarDecl::*)(unsigned int, unsigned int))&clang::ParmVarDecl::setScopeInfo  )
        .def("isObjCMethodParameter", (bool (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::isObjCMethodParameter  )
        .def("getFunctionScopeDepth", (unsigned int (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::getFunctionScopeDepth  )
        .def("getFunctionScopeIndex", (unsigned int (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::getFunctionScopeIndex  )
        .def("getObjCDeclQualifier", (clang::Decl::ObjCDeclQualifier (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::getObjCDeclQualifier  )
        .def("setObjCDeclQualifier", (void (clang::ParmVarDecl::*)(clang::Decl::ObjCDeclQualifier))&clang::ParmVarDecl::setObjCDeclQualifier  )
        .def("isKNRPromoted", (bool (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::isKNRPromoted  )
        .def("setKNRPromoted", (void (clang::ParmVarDecl::*)(bool))&clang::ParmVarDecl::setKNRPromoted  )
        .def("getDefaultArg", []( clang::ParmVarDecl& self) -> clang::Expr * {
         return self.getDefaultArg();
        } , py::return_value_policy::reference_internal)
        .def("getDefaultArg", [](const clang::ParmVarDecl& self) -> const clang::Expr * {
         return self.getDefaultArg();
        } , py::return_value_policy::reference_internal)
        .def("setDefaultArg", (void (clang::ParmVarDecl::*)(clang::Expr *))&clang::ParmVarDecl::setDefaultArg  )
        .def("getDefaultArgRange", (clang::SourceRange (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::getDefaultArgRange  )
        .def("setUninstantiatedDefaultArg", (void (clang::ParmVarDecl::*)(clang::Expr *))&clang::ParmVarDecl::setUninstantiatedDefaultArg  )
        .def("getUninstantiatedDefaultArg", []( clang::ParmVarDecl& self) -> clang::Expr * {
         return self.getUninstantiatedDefaultArg();
        } , py::return_value_policy::reference_internal)
        .def("getUninstantiatedDefaultArg", [](const clang::ParmVarDecl& self) -> const clang::Expr * {
         return self.getUninstantiatedDefaultArg();
        } , py::return_value_policy::reference_internal)
        .def("hasDefaultArg", (bool (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::hasDefaultArg  )
        .def("hasUnparsedDefaultArg", (bool (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::hasUnparsedDefaultArg  )
        .def("hasUninstantiatedDefaultArg", (bool (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::hasUninstantiatedDefaultArg  )
        .def("setUnparsedDefaultArg", (void (clang::ParmVarDecl::*)())&clang::ParmVarDecl::setUnparsedDefaultArg  )
        .def("hasInheritedDefaultArg", (bool (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::hasInheritedDefaultArg  )
        .def("setHasInheritedDefaultArg", (void (clang::ParmVarDecl::*)(bool))&clang::ParmVarDecl::setHasInheritedDefaultArg  )
        .def("getOriginalType", (clang::QualType (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::getOriginalType  )
        .def("isParameterPack", (bool (clang::ParmVarDecl::*)() const)&clang::ParmVarDecl::isParameterPack  )
        .def("setOwningFunction", (void (clang::ParmVarDecl::*)(clang::DeclContext *))&clang::ParmVarDecl::setOwningFunction  )
    ;

    py::class_<clang::FunctionDecl, decl_deleter<clang::FunctionDecl>::type>(m, "FunctionDecl" , py::base<clang::DeclaratorDecl>())

        .def("getNameInfo", (clang::DeclarationNameInfo (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getNameInfo  )
        //.def("getNameForDiagnostic", (void (clang::FunctionDecl::*)(llvm::raw_ostream &, const clang::PrintingPolicy &, bool) const)&clang::FunctionDecl::getNameForDiagnostic  )
        .def("setRangeEnd", (void (clang::FunctionDecl::*)(clang::SourceLocation))&clang::FunctionDecl::setRangeEnd  )
        .def("getSourceRange", (clang::SourceRange (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getSourceRange  )
        .def("hasBody", [](const clang::FunctionDecl& self) -> bool {
         return self.hasBody();
        } )
        .def("hasTrivialBody", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::hasTrivialBody  )
        .def("isDefined", [](const clang::FunctionDecl& self) -> bool {
         return self.isDefined();
        } )
        .def("getBody", [](const clang::FunctionDecl& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("isThisDeclarationADefinition", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isThisDeclarationADefinition  )
        .def("doesThisDeclarationHaveABody", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::doesThisDeclarationHaveABody  )
        .def("setBody", (void (clang::FunctionDecl::*)(clang::Stmt *))&clang::FunctionDecl::setBody  )
        .def("setLazyBody", (void (clang::FunctionDecl::*)(unsigned long))&clang::FunctionDecl::setLazyBody  )
        .def("isVariadic", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isVariadic  )
        .def("isVirtualAsWritten", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isVirtualAsWritten  )
        .def("setVirtualAsWritten", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setVirtualAsWritten  )
        .def("isPure", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isPure  )
        .def("setPure", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setPure  )
        .def("isLateTemplateParsed", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isLateTemplateParsed  )
        .def("setLateTemplateParsed", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setLateTemplateParsed  )
        .def("isTrivial", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isTrivial  )
        .def("setTrivial", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setTrivial  )
        .def("isDefaulted", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isDefaulted  )
        .def("setDefaulted", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setDefaulted  )
        .def("isExplicitlyDefaulted", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isExplicitlyDefaulted  )
        .def("setExplicitlyDefaulted", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setExplicitlyDefaulted  )
        .def("hasImplicitReturnZero", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::hasImplicitReturnZero  )
        .def("setHasImplicitReturnZero", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setHasImplicitReturnZero  )
        .def("hasPrototype", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::hasPrototype  )
        .def("hasWrittenPrototype", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::hasWrittenPrototype  )
        .def("hasInheritedPrototype", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::hasInheritedPrototype  )
        .def("setHasInheritedPrototype", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setHasInheritedPrototype  )
        .def("isConstexpr", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isConstexpr  )
        .def("setConstexpr", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setConstexpr  )
        .def("usesSEHTry", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::usesSEHTry  )
        .def("setUsesSEHTry", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setUsesSEHTry  )
        .def("isDeleted", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isDeleted  )
        .def("isDeletedAsWritten", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isDeletedAsWritten  )
        .def("setDeletedAsWritten", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setDeletedAsWritten  )
        .def("isMain", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isMain  )
        .def("isMSVCRTEntryPoint", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isMSVCRTEntryPoint  )
        .def("isReservedGlobalPlacementOperator", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isReservedGlobalPlacementOperator  )
        .def("isReplaceableGlobalAllocationFunction", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isReplaceableGlobalAllocationFunction  )
        .def("getLanguageLinkage", (clang::LanguageLinkage (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getLanguageLinkage  )
        .def("isExternC", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isExternC  )
        .def("isInExternCContext", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isInExternCContext  )
        .def("isInExternCXXContext", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isInExternCXXContext  )
        .def("isGlobal", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isGlobal  )
        .def("isNoReturn", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isNoReturn  )
        .def("hasSkippedBody", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::hasSkippedBody  )
        .def("setHasSkippedBody", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setHasSkippedBody  )
        .def("setPreviousDeclaration", (void (clang::FunctionDecl::*)(clang::FunctionDecl *))&clang::FunctionDecl::setPreviousDeclaration  )
        .def("getCanonicalDecl", []( clang::FunctionDecl& self) -> clang::FunctionDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::FunctionDecl& self) -> const clang::FunctionDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getBuiltinID", (unsigned int (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getBuiltinID  )
        .def("param_size", (unsigned int (clang::FunctionDecl::*)() const)&clang::FunctionDecl::param_size  )
        //.def("params", []( clang::FunctionDecl& self) -> llvm::iterator_range<clang::ParmVarDecl **> {
        // return self.params();
        //} )
        //.def("params", [](const clang::FunctionDecl& self) -> llvm::iterator_range<clang::ParmVarDecl *const *> {
        // return self.params();
        //} )
        .def("getNumParams", (unsigned int (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getNumParams  )
        .def("getParamDecl", [](const clang::FunctionDecl& self, unsigned int i) -> const clang::ParmVarDecl * {
         return self.getParamDecl(i);
        } , py::return_value_policy::reference_internal)
        .def("getParamDecl", []( clang::FunctionDecl& self, unsigned int i) -> clang::ParmVarDecl * {
         return self.getParamDecl(i);
        } , py::return_value_policy::reference_internal)
        //.def("setParams", []( clang::FunctionDecl& self, llvm::ArrayRef<clang::ParmVarDecl *> NewParamInfo)  {
        //  self.setParams(NewParamInfo);
        //} )
        //.def("parameters", (llvm::ArrayRef<clang::ParmVarDecl *> (clang::FunctionDecl::*)() const)&clang::FunctionDecl::parameters  )
        //.def("getDeclsInPrototypeScope", (llvm::ArrayRef<clang::NamedDecl *> (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getDeclsInPrototypeScope  )
        //.def("setDeclsInPrototypeScope", (void (clang::FunctionDecl::*)(llvm::ArrayRef<clang::NamedDecl *>))&clang::FunctionDecl::setDeclsInPrototypeScope  )
        .def("getMinRequiredArguments", (unsigned int (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getMinRequiredArguments  )
        .def("getReturnType", (clang::QualType (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getReturnType  )
        .def("getReturnTypeSourceRange", (clang::SourceRange (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getReturnTypeSourceRange  )
        .def("getCallResultType", (clang::QualType (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getCallResultType  )
        .def("hasUnusedResultAttr", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::hasUnusedResultAttr  )
        .def("getStorageClass", (clang::StorageClass (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getStorageClass  )
        .def("isInlineSpecified", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isInlineSpecified  )
        .def("setInlineSpecified", (void (clang::FunctionDecl::*)(bool))&clang::FunctionDecl::setInlineSpecified  )
        .def("setImplicitlyInline", (void (clang::FunctionDecl::*)())&clang::FunctionDecl::setImplicitlyInline  )
        .def("isInlined", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isInlined  )
        .def("isInlineDefinitionExternallyVisible", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isInlineDefinitionExternallyVisible  )
        .def("isMSExternInline", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isMSExternInline  )
        .def("doesDeclarationForceExternallyVisibleDefinition", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::doesDeclarationForceExternallyVisibleDefinition  )
        .def("isOverloadedOperator", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isOverloadedOperator  )
        .def("getOverloadedOperator", (clang::OverloadedOperatorKind (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getOverloadedOperator  )
        //.def("getLiteralIdentifier", (const clang::IdentifierInfo * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getLiteralIdentifier , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromMemberFunction", (clang::FunctionDecl * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getInstantiatedFromMemberFunction , py::return_value_policy::reference_internal )
        .def("getTemplatedKind", (clang::FunctionDecl::TemplatedKind (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getTemplatedKind  )
        //.def("getMemberSpecializationInfo", (clang::MemberSpecializationInfo * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getMemberSpecializationInfo , py::return_value_policy::reference_internal )
        .def("setInstantiationOfMemberFunction", []( clang::FunctionDecl& self, clang::FunctionDecl * FD , clang::TemplateSpecializationKind TSK)  {
          self.setInstantiationOfMemberFunction(FD, TSK);
        } )
        .def("getDescribedFunctionTemplate", (clang::FunctionTemplateDecl * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getDescribedFunctionTemplate , py::return_value_policy::reference_internal )
        .def("setDescribedFunctionTemplate", (void (clang::FunctionDecl::*)(clang::FunctionTemplateDecl *))&clang::FunctionDecl::setDescribedFunctionTemplate  )
        .def("isFunctionTemplateSpecialization", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isFunctionTemplateSpecialization  )
        .def("getClassScopeSpecializationPattern", (clang::FunctionDecl * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getClassScopeSpecializationPattern , py::return_value_policy::reference_internal )
        //.def("getTemplateSpecializationInfo", (clang::FunctionTemplateSpecializationInfo * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getTemplateSpecializationInfo , py::return_value_policy::reference_internal )
        .def("isImplicitlyInstantiable", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isImplicitlyInstantiable  )
        .def("isTemplateInstantiation", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isTemplateInstantiation  )
        .def("getTemplateInstantiationPattern", (clang::FunctionDecl * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getTemplateInstantiationPattern , py::return_value_policy::reference_internal )
        .def("getPrimaryTemplate", (clang::FunctionTemplateDecl * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getPrimaryTemplate , py::return_value_policy::reference_internal )
        //.def("getTemplateSpecializationArgs", (const clang::TemplateArgumentList * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getTemplateSpecializationArgs , py::return_value_policy::reference_internal )
        //.def("getTemplateSpecializationArgsAsWritten", (const clang::ASTTemplateArgumentListInfo * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getTemplateSpecializationArgsAsWritten , py::return_value_policy::reference_internal )
        //.def("setFunctionTemplateSpecialization", []( clang::FunctionDecl& self, clang::FunctionTemplateDecl * Template , const clang::TemplateArgumentList * TemplateArgs , void * InsertPos , clang::TemplateSpecializationKind TSK , const clang::TemplateArgumentListInfo * TemplateArgsAsWritten , clang::SourceLocation PointOfInstantiation)  {
        //  self.setFunctionTemplateSpecialization(Template, TemplateArgs, InsertPos, TSK, TemplateArgsAsWritten, PointOfInstantiation);
        //} )
        //.def("setDependentTemplateSpecialization", (void (clang::FunctionDecl::*)(clang::ASTContext &, const clang::UnresolvedSetImpl &, const clang::TemplateArgumentListInfo &))&clang::FunctionDecl::setDependentTemplateSpecialization  )
        //.def("getDependentSpecializationInfo", (clang::DependentFunctionTemplateSpecializationInfo * (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getDependentSpecializationInfo , py::return_value_policy::reference_internal )
        .def("getTemplateSpecializationKind", (clang::TemplateSpecializationKind (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getTemplateSpecializationKind  )
        .def("setTemplateSpecializationKind", (void (clang::FunctionDecl::*)(clang::TemplateSpecializationKind, clang::SourceLocation))&clang::FunctionDecl::setTemplateSpecializationKind  )
        .def("getPointOfInstantiation", (clang::SourceLocation (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getPointOfInstantiation  )
        .def("isOutOfLine", (bool (clang::FunctionDecl::*)() const)&clang::FunctionDecl::isOutOfLine  )
        .def("getMemoryFunctionKind", (unsigned int (clang::FunctionDecl::*)() const)&clang::FunctionDecl::getMemoryFunctionKind  )
    ;

    py::class_<clang::FieldDecl, decl_deleter<clang::FieldDecl>::type>(m, "FieldDecl" , py::base<clang::DeclaratorDecl>())

        .def("getFieldIndex", (unsigned int (clang::FieldDecl::*)() const)&clang::FieldDecl::getFieldIndex  )
        .def("isMutable", (bool (clang::FieldDecl::*)() const)&clang::FieldDecl::isMutable  )
        .def("isBitField", (bool (clang::FieldDecl::*)() const)&clang::FieldDecl::isBitField  )
        .def("isUnnamedBitfield", (bool (clang::FieldDecl::*)() const)&clang::FieldDecl::isUnnamedBitfield  )
        .def("isAnonymousStructOrUnion", (bool (clang::FieldDecl::*)() const)&clang::FieldDecl::isAnonymousStructOrUnion  )
        .def("getBitWidth", (clang::Expr * (clang::FieldDecl::*)() const)&clang::FieldDecl::getBitWidth , py::return_value_policy::reference_internal )
        .def("getBitWidthValue", (unsigned int (clang::FieldDecl::*)(const clang::ASTContext &) const)&clang::FieldDecl::getBitWidthValue  )
        .def("setBitWidth", (void (clang::FieldDecl::*)(clang::Expr *))&clang::FieldDecl::setBitWidth  )
        .def("removeBitWidth", (void (clang::FieldDecl::*)())&clang::FieldDecl::removeBitWidth  )
        .def("getInClassInitStyle", (clang::InClassInitStyle (clang::FieldDecl::*)() const)&clang::FieldDecl::getInClassInitStyle  )
        .def("hasInClassInitializer", (bool (clang::FieldDecl::*)() const)&clang::FieldDecl::hasInClassInitializer  )
        .def("getInClassInitializer", (clang::Expr * (clang::FieldDecl::*)() const)&clang::FieldDecl::getInClassInitializer , py::return_value_policy::reference_internal )
        .def("setInClassInitializer", (void (clang::FieldDecl::*)(clang::Expr *))&clang::FieldDecl::setInClassInitializer  )
        .def("removeInClassInitializer", (void (clang::FieldDecl::*)())&clang::FieldDecl::removeInClassInitializer  )
        .def("hasCapturedVLAType", (bool (clang::FieldDecl::*)() const)&clang::FieldDecl::hasCapturedVLAType  )
        //.def("getCapturedVLAType", (const clang::VariableArrayType * (clang::FieldDecl::*)() const)&clang::FieldDecl::getCapturedVLAType , py::return_value_policy::reference_internal )
        //.def("setCapturedVLAType", (void (clang::FieldDecl::*)(const clang::VariableArrayType *))&clang::FieldDecl::setCapturedVLAType  )
        .def("getParent", [](const clang::FieldDecl& self) -> const clang::RecordDecl * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getParent", []( clang::FieldDecl& self) -> clang::RecordDecl * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getSourceRange", (clang::SourceRange (clang::FieldDecl::*)() const)&clang::FieldDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::FieldDecl& self) -> clang::FieldDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::FieldDecl& self) -> const clang::FieldDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::EnumConstantDecl, decl_deleter<clang::EnumConstantDecl>::type>(m, "EnumConstantDecl" , py::base<clang::ValueDecl>())

        .def("getInitExpr", [](const clang::EnumConstantDecl& self) -> const clang::Expr * {
         return self.getInitExpr();
        } , py::return_value_policy::reference_internal)
        .def("getInitExpr", []( clang::EnumConstantDecl& self) -> clang::Expr * {
         return self.getInitExpr();
        } , py::return_value_policy::reference_internal)
        //.def("getInitVal", (const llvm::APSInt & (clang::EnumConstantDecl::*)() const)&clang::EnumConstantDecl::getInitVal  )
        .def("setInitExpr", (void (clang::EnumConstantDecl::*)(clang::Expr *))&clang::EnumConstantDecl::setInitExpr  )
        //.def("setInitVal", (void (clang::EnumConstantDecl::*)(const llvm::APSInt &))&clang::EnumConstantDecl::setInitVal  )
        .def("getSourceRange", (clang::SourceRange (clang::EnumConstantDecl::*)() const)&clang::EnumConstantDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::EnumConstantDecl& self) -> clang::EnumConstantDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::EnumConstantDecl& self) -> const clang::EnumConstantDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::IndirectFieldDecl, decl_deleter<clang::IndirectFieldDecl>::type>(m, "IndirectFieldDecl" , py::base<clang::ValueDecl>())

        //.def("chain", (llvm::iterator_range<clang::NamedDecl *const *> (clang::IndirectFieldDecl::*)() const)&clang::IndirectFieldDecl::chain  )
        .def("getChainingSize", (unsigned int (clang::IndirectFieldDecl::*)() const)&clang::IndirectFieldDecl::getChainingSize  )
        .def("getAnonField", (clang::FieldDecl * (clang::IndirectFieldDecl::*)() const)&clang::IndirectFieldDecl::getAnonField , py::return_value_policy::reference_internal )
        .def("getVarDecl", (clang::VarDecl * (clang::IndirectFieldDecl::*)() const)&clang::IndirectFieldDecl::getVarDecl , py::return_value_policy::reference_internal )
        .def("getCanonicalDecl", []( clang::IndirectFieldDecl& self) -> clang::IndirectFieldDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::IndirectFieldDecl& self) -> const clang::IndirectFieldDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::TypeDecl, decl_deleter<clang::TypeDecl>::type>(m, "TypeDecl" , py::base<clang::NamedDecl>())

        .def("getTypeForDecl", (const clang::Type * (clang::TypeDecl::*)() const)&clang::TypeDecl::getTypeForDecl , py::return_value_policy::reference_internal )
        .def("setTypeForDecl", (void (clang::TypeDecl::*)(const clang::Type *))&clang::TypeDecl::setTypeForDecl  )
        .def("getLocStart", (clang::SourceLocation (clang::TypeDecl::*)() const)&clang::TypeDecl::getLocStart  )
        .def("setLocStart", (void (clang::TypeDecl::*)(clang::SourceLocation))&clang::TypeDecl::setLocStart  )
        .def("getSourceRange", (clang::SourceRange (clang::TypeDecl::*)() const)&clang::TypeDecl::getSourceRange  )
    ;

    py::class_<clang::TypedefNameDecl, decl_deleter<clang::TypedefNameDecl>::type>(m, "TypedefNameDecl" , py::base<clang::TypeDecl>())

        .def("isModed", (bool (clang::TypedefNameDecl::*)() const)&clang::TypedefNameDecl::isModed  )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::TypedefNameDecl::*)() const)&clang::TypedefNameDecl::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getUnderlyingType", (clang::QualType (clang::TypedefNameDecl::*)() const)&clang::TypedefNameDecl::getUnderlyingType  )
        .def("setTypeSourceInfo", (void (clang::TypedefNameDecl::*)(clang::TypeSourceInfo *))&clang::TypedefNameDecl::setTypeSourceInfo  )
        .def("setModedTypeSourceInfo", (void (clang::TypedefNameDecl::*)(clang::TypeSourceInfo *, clang::QualType))&clang::TypedefNameDecl::setModedTypeSourceInfo  )
        .def("getCanonicalDecl", []( clang::TypedefNameDecl& self) -> clang::TypedefNameDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::TypedefNameDecl& self) -> const clang::TypedefNameDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getAnonDeclWithTypedefName", (clang::TagDecl * (clang::TypedefNameDecl::*)(bool) const)&clang::TypedefNameDecl::getAnonDeclWithTypedefName , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::TypedefDecl, decl_deleter<clang::TypedefDecl>::type>(m, "TypedefDecl" , py::base<clang::TypedefNameDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::TypedefDecl::*)() const)&clang::TypedefDecl::getSourceRange  )
    ;

    py::class_<clang::TypeAliasDecl, decl_deleter<clang::TypeAliasDecl>::type>(m, "TypeAliasDecl" , py::base<clang::TypedefNameDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::TypeAliasDecl::*)() const)&clang::TypeAliasDecl::getSourceRange  )
        .def("getDescribedAliasTemplate", (clang::TypeAliasTemplateDecl * (clang::TypeAliasDecl::*)() const)&clang::TypeAliasDecl::getDescribedAliasTemplate , py::return_value_policy::reference_internal )
        .def("setDescribedAliasTemplate", (void (clang::TypeAliasDecl::*)(clang::TypeAliasTemplateDecl *))&clang::TypeAliasDecl::setDescribedAliasTemplate  )
    ;

    py::class_<clang::TagDecl, decl_deleter<clang::TagDecl>::type>(m, "TagDecl" , py::base<clang::TypeDecl>())

        .def("getRBraceLoc", (clang::SourceLocation (clang::TagDecl::*)() const)&clang::TagDecl::getRBraceLoc  )
        .def("setRBraceLoc", (void (clang::TagDecl::*)(clang::SourceLocation))&clang::TagDecl::setRBraceLoc  )
        .def("getInnerLocStart", (clang::SourceLocation (clang::TagDecl::*)() const)&clang::TagDecl::getInnerLocStart  )
        .def("getOuterLocStart", (clang::SourceLocation (clang::TagDecl::*)() const)&clang::TagDecl::getOuterLocStart  )
        .def("getSourceRange", (clang::SourceRange (clang::TagDecl::*)() const)&clang::TagDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::TagDecl& self) -> clang::TagDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::TagDecl& self) -> const clang::TagDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("isThisDeclarationADefinition", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isThisDeclarationADefinition  )
        .def("isCompleteDefinition", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isCompleteDefinition  )
        .def("isCompleteDefinitionRequired", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isCompleteDefinitionRequired  )
        .def("isBeingDefined", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isBeingDefined  )
        .def("isEmbeddedInDeclarator", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isEmbeddedInDeclarator  )
        .def("setEmbeddedInDeclarator", (void (clang::TagDecl::*)(bool))&clang::TagDecl::setEmbeddedInDeclarator  )
        .def("isFreeStanding", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isFreeStanding  )
        .def("setFreeStanding", (void (clang::TagDecl::*)(bool))&clang::TagDecl::setFreeStanding  )
        .def("isDependentType", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isDependentType  )
        .def("startDefinition", (void (clang::TagDecl::*)())&clang::TagDecl::startDefinition  )
        .def("getDefinition", (clang::TagDecl * (clang::TagDecl::*)() const)&clang::TagDecl::getDefinition , py::return_value_policy::reference_internal )
        .def("setCompleteDefinition", (void (clang::TagDecl::*)(bool))&clang::TagDecl::setCompleteDefinition  )
        .def("setCompleteDefinitionRequired", (void (clang::TagDecl::*)(bool))&clang::TagDecl::setCompleteDefinitionRequired  )
        .def("getKindName", (llvm::StringRef (clang::TagDecl::*)() const)&clang::TagDecl::getKindName  )
        .def("getTagKind", (clang::TagTypeKind (clang::TagDecl::*)() const)&clang::TagDecl::getTagKind  )
        .def("setTagKind", (void (clang::TagDecl::*)(clang::TagTypeKind))&clang::TagDecl::setTagKind  )
        .def("isStruct", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isStruct  )
        .def("isInterface", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isInterface  )
        .def("isClass", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isClass  )
        .def("isUnion", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isUnion  )
        .def("isEnum", (bool (clang::TagDecl::*)() const)&clang::TagDecl::isEnum  )
        .def("hasNameForLinkage", (bool (clang::TagDecl::*)() const)&clang::TagDecl::hasNameForLinkage  )
        .def("getTypedefNameForAnonDecl", (clang::TypedefNameDecl * (clang::TagDecl::*)() const)&clang::TagDecl::getTypedefNameForAnonDecl , py::return_value_policy::reference_internal )
        .def("setTypedefNameForAnonDecl", (void (clang::TagDecl::*)(clang::TypedefNameDecl *))&clang::TagDecl::setTypedefNameForAnonDecl  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::TagDecl::*)() const)&clang::TagDecl::getQualifier , py::return_value_policy::reference_internal )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::TagDecl::*)() const)&clang::TagDecl::getQualifierLoc  )
        //.def("setQualifierInfo", (void (clang::TagDecl::*)(clang::NestedNameSpecifierLoc))&clang::TagDecl::setQualifierInfo  )
        .def("getNumTemplateParameterLists", (unsigned int (clang::TagDecl::*)() const)&clang::TagDecl::getNumTemplateParameterLists  )
        //.def("getTemplateParameterList", (clang::TemplateParameterList * (clang::TagDecl::*)(unsigned int) const)&clang::TagDecl::getTemplateParameterList , py::return_value_policy::reference_internal )
        //.def("setTemplateParameterListsInfo", (void (clang::TagDecl::*)(clang::ASTContext &, llvm::ArrayRef<clang::TemplateParameterList *>))&clang::TagDecl::setTemplateParameterListsInfo  )
    ;

    py::class_<clang::EnumDecl, decl_deleter<clang::EnumDecl>::type>(m, "EnumDecl" , py::base<clang::TagDecl>())

        .def("getCanonicalDecl", []( clang::EnumDecl& self) -> clang::EnumDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::EnumDecl& self) -> const clang::EnumDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::EnumDecl& self) -> clang::EnumDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::EnumDecl& self) -> const clang::EnumDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::EnumDecl& self) -> clang::EnumDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::EnumDecl& self) -> const clang::EnumDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getDefinition", (clang::EnumDecl * (clang::EnumDecl::*)() const)&clang::EnumDecl::getDefinition , py::return_value_policy::reference_internal )
        .def("completeDefinition", (void (clang::EnumDecl::*)(clang::QualType, clang::QualType, unsigned int, unsigned int))&clang::EnumDecl::completeDefinition  )
        //.def("enumerators", (llvm::iterator_range<clang::DeclContext::specific_decl_iterator<clang::EnumConstantDecl> > (clang::EnumDecl::*)() const)&clang::EnumDecl::enumerators  )
        .def("getPromotionType", (clang::QualType (clang::EnumDecl::*)() const)&clang::EnumDecl::getPromotionType  )
        .def("setPromotionType", (void (clang::EnumDecl::*)(clang::QualType))&clang::EnumDecl::setPromotionType  )
        .def("getIntegerType", (clang::QualType (clang::EnumDecl::*)() const)&clang::EnumDecl::getIntegerType  )
        .def("setIntegerType", (void (clang::EnumDecl::*)(clang::QualType))&clang::EnumDecl::setIntegerType  )
        .def("setIntegerTypeSourceInfo", (void (clang::EnumDecl::*)(clang::TypeSourceInfo *))&clang::EnumDecl::setIntegerTypeSourceInfo  )
        .def("getIntegerTypeSourceInfo", (clang::TypeSourceInfo * (clang::EnumDecl::*)() const)&clang::EnumDecl::getIntegerTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getIntegerTypeRange", (clang::SourceRange (clang::EnumDecl::*)() const)&clang::EnumDecl::getIntegerTypeRange  )
        .def("getNumPositiveBits", (unsigned int (clang::EnumDecl::*)() const)&clang::EnumDecl::getNumPositiveBits  )
        .def("setNumPositiveBits", (void (clang::EnumDecl::*)(unsigned int))&clang::EnumDecl::setNumPositiveBits  )
        .def("getNumNegativeBits", (unsigned int (clang::EnumDecl::*)() const)&clang::EnumDecl::getNumNegativeBits  )
        .def("setNumNegativeBits", (void (clang::EnumDecl::*)(unsigned int))&clang::EnumDecl::setNumNegativeBits  )
        .def("isScoped", (bool (clang::EnumDecl::*)() const)&clang::EnumDecl::isScoped  )
        .def("isScopedUsingClassTag", (bool (clang::EnumDecl::*)() const)&clang::EnumDecl::isScopedUsingClassTag  )
        .def("isFixed", (bool (clang::EnumDecl::*)() const)&clang::EnumDecl::isFixed  )
        .def("isComplete", (bool (clang::EnumDecl::*)() const)&clang::EnumDecl::isComplete  )
        .def("getInstantiatedFromMemberEnum", (clang::EnumDecl * (clang::EnumDecl::*)() const)&clang::EnumDecl::getInstantiatedFromMemberEnum , py::return_value_policy::reference_internal )
        .def("getTemplateSpecializationKind", (clang::TemplateSpecializationKind (clang::EnumDecl::*)() const)&clang::EnumDecl::getTemplateSpecializationKind  )
        .def("setTemplateSpecializationKind", (void (clang::EnumDecl::*)(clang::TemplateSpecializationKind, clang::SourceLocation))&clang::EnumDecl::setTemplateSpecializationKind  )
        //.def("getMemberSpecializationInfo", (clang::MemberSpecializationInfo * (clang::EnumDecl::*)() const)&clang::EnumDecl::getMemberSpecializationInfo , py::return_value_policy::reference_internal )
        .def("setInstantiationOfMemberEnum", []( clang::EnumDecl& self, clang::EnumDecl * ED , clang::TemplateSpecializationKind TSK)  {
          self.setInstantiationOfMemberEnum(ED, TSK);
        } )
    ;

    py::class_<clang::RecordDecl, decl_deleter<clang::RecordDecl>::type>(m, "RecordDecl" , py::base<clang::TagDecl>())

        .def("getPreviousDecl", []( clang::RecordDecl& self) -> clang::RecordDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::RecordDecl& self) -> const clang::RecordDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::RecordDecl& self) -> clang::RecordDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::RecordDecl& self) -> const clang::RecordDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("hasFlexibleArrayMember", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::hasFlexibleArrayMember  )
        .def("setHasFlexibleArrayMember", (void (clang::RecordDecl::*)(bool))&clang::RecordDecl::setHasFlexibleArrayMember  )
        .def("isAnonymousStructOrUnion", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::isAnonymousStructOrUnion  )
        .def("setAnonymousStructOrUnion", (void (clang::RecordDecl::*)(bool))&clang::RecordDecl::setAnonymousStructOrUnion  )
        .def("hasObjectMember", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::hasObjectMember  )
        .def("setHasObjectMember", (void (clang::RecordDecl::*)(bool))&clang::RecordDecl::setHasObjectMember  )
        .def("hasVolatileMember", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::hasVolatileMember  )
        .def("setHasVolatileMember", (void (clang::RecordDecl::*)(bool))&clang::RecordDecl::setHasVolatileMember  )
        .def("hasLoadedFieldsFromExternalStorage", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::hasLoadedFieldsFromExternalStorage  )
        .def("setHasLoadedFieldsFromExternalStorage", (void (clang::RecordDecl::*)(bool))&clang::RecordDecl::setHasLoadedFieldsFromExternalStorage  )
        .def("isInjectedClassName", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::isInjectedClassName  )
        .def("isLambda", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::isLambda  )
        .def("isCapturedRecord", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::isCapturedRecord  )
        .def("setCapturedRecord", (void (clang::RecordDecl::*)())&clang::RecordDecl::setCapturedRecord  )
        .def("getDefinition", (clang::RecordDecl * (clang::RecordDecl::*)() const)&clang::RecordDecl::getDefinition , py::return_value_policy::reference_internal )
        //.def("fields", (llvm::iterator_range<clang::DeclContext::specific_decl_iterator<clang::FieldDecl> > (clang::RecordDecl::*)() const)&clang::RecordDecl::fields  )
        .def("field_empty", (bool (clang::RecordDecl::*)() const)&clang::RecordDecl::field_empty  )
        .def("completeDefinition", (void (clang::RecordDecl::*)())&clang::RecordDecl::completeDefinition  )
        .def("isMsStruct", (bool (clang::RecordDecl::*)(const clang::ASTContext &) const)&clang::RecordDecl::isMsStruct  )
        .def("mayInsertExtraPadding", (bool (clang::RecordDecl::*)(bool) const)&clang::RecordDecl::mayInsertExtraPadding  )
        .def("findFirstNamedDataMember", (const clang::FieldDecl * (clang::RecordDecl::*)() const)&clang::RecordDecl::findFirstNamedDataMember , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::FileScopeAsmDecl, decl_deleter<clang::FileScopeAsmDecl>::type>(m, "FileScopeAsmDecl" , py::base<clang::Decl>())

        .def("getAsmLoc", (clang::SourceLocation (clang::FileScopeAsmDecl::*)() const)&clang::FileScopeAsmDecl::getAsmLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::FileScopeAsmDecl::*)() const)&clang::FileScopeAsmDecl::getRParenLoc  )
        .def("setRParenLoc", (void (clang::FileScopeAsmDecl::*)(clang::SourceLocation))&clang::FileScopeAsmDecl::setRParenLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::FileScopeAsmDecl::*)() const)&clang::FileScopeAsmDecl::getSourceRange  )
        .def("getAsmString", [](const clang::FileScopeAsmDecl& self) -> const clang::StringLiteral * {
         return self.getAsmString();
        } , py::return_value_policy::reference_internal)
        .def("getAsmString", []( clang::FileScopeAsmDecl& self) -> clang::StringLiteral * {
         return self.getAsmString();
        } , py::return_value_policy::reference_internal)
        .def("setAsmString", (void (clang::FileScopeAsmDecl::*)(clang::StringLiteral *))&clang::FileScopeAsmDecl::setAsmString  )
    ;

    py::class_<clang::BlockDecl, decl_deleter<clang::BlockDecl>::type>(m, "BlockDecl" , py::base<clang::Decl>())

        .def("getCaretLocation", (clang::SourceLocation (clang::BlockDecl::*)() const)&clang::BlockDecl::getCaretLocation  )
        .def("isVariadic", (bool (clang::BlockDecl::*)() const)&clang::BlockDecl::isVariadic  )
        .def("setIsVariadic", (void (clang::BlockDecl::*)(bool))&clang::BlockDecl::setIsVariadic  )
        .def("getCompoundBody", (clang::CompoundStmt * (clang::BlockDecl::*)() const)&clang::BlockDecl::getCompoundBody , py::return_value_policy::reference_internal )
        .def("getBody", (clang::Stmt * (clang::BlockDecl::*)() const)&clang::BlockDecl::getBody , py::return_value_policy::reference_internal )
        .def("setBody", (void (clang::BlockDecl::*)(clang::CompoundStmt *))&clang::BlockDecl::setBody  )
        .def("setSignatureAsWritten", (void (clang::BlockDecl::*)(clang::TypeSourceInfo *))&clang::BlockDecl::setSignatureAsWritten  )
        .def("getSignatureAsWritten", (clang::TypeSourceInfo * (clang::BlockDecl::*)() const)&clang::BlockDecl::getSignatureAsWritten , py::return_value_policy::reference_internal )
        .def("param_size", (unsigned int (clang::BlockDecl::*)() const)&clang::BlockDecl::param_size  )
        //.def("parameters", (llvm::ArrayRef<clang::ParmVarDecl *> (clang::BlockDecl::*)() const)&clang::BlockDecl::parameters  )
        .def("param_empty", (bool (clang::BlockDecl::*)() const)&clang::BlockDecl::param_empty  )
        //.def("params", []( clang::BlockDecl& self) -> llvm::iterator_range<clang::ParmVarDecl **> {
        // return self.params();
        //} )
        //.def("params", [](const clang::BlockDecl& self) -> llvm::iterator_range<clang::ParmVarDecl *const *> {
        // return self.params();
        //} )
        .def("getNumParams", (unsigned int (clang::BlockDecl::*)() const)&clang::BlockDecl::getNumParams  )
        .def("getParamDecl", [](const clang::BlockDecl& self, unsigned int i) -> const clang::ParmVarDecl * {
         return self.getParamDecl(i);
        } , py::return_value_policy::reference_internal)
        .def("getParamDecl", []( clang::BlockDecl& self, unsigned int i) -> clang::ParmVarDecl * {
         return self.getParamDecl(i);
        } , py::return_value_policy::reference_internal)
        //.def("setParams", (void (clang::BlockDecl::*)(llvm::ArrayRef<clang::ParmVarDecl *>))&clang::BlockDecl::setParams  )
        .def("hasCaptures", (bool (clang::BlockDecl::*)() const)&clang::BlockDecl::hasCaptures  )
        .def("getNumCaptures", (unsigned int (clang::BlockDecl::*)() const)&clang::BlockDecl::getNumCaptures  )
        //.def("captures", []( clang::BlockDecl& self) -> llvm::iterator_range<const clang::BlockDecl::Capture *> {
        // return self.captures();
        //} )
        //.def("captures", [](const clang::BlockDecl& self) -> llvm::iterator_range<const clang::BlockDecl::Capture *> {
        // return self.captures();
        //} )
        .def("capturesCXXThis", (bool (clang::BlockDecl::*)() const)&clang::BlockDecl::capturesCXXThis  )
        .def("blockMissingReturnType", (bool (clang::BlockDecl::*)() const)&clang::BlockDecl::blockMissingReturnType  )
        .def("setBlockMissingReturnType", (void (clang::BlockDecl::*)(bool))&clang::BlockDecl::setBlockMissingReturnType  )
        .def("isConversionFromLambda", (bool (clang::BlockDecl::*)() const)&clang::BlockDecl::isConversionFromLambda  )
        .def("setIsConversionFromLambda", (void (clang::BlockDecl::*)(bool))&clang::BlockDecl::setIsConversionFromLambda  )
        .def("capturesVariable", (bool (clang::BlockDecl::*)(const clang::VarDecl *) const)&clang::BlockDecl::capturesVariable  )
        //.def("setCaptures", (void (clang::BlockDecl::*)(clang::ASTContext &, llvm::ArrayRef<clang::BlockDecl::Capture>, bool))&clang::BlockDecl::setCaptures  )
        .def("getBlockManglingNumber", (unsigned int (clang::BlockDecl::*)() const)&clang::BlockDecl::getBlockManglingNumber  )
        .def("getBlockManglingContextDecl", (clang::Decl * (clang::BlockDecl::*)() const)&clang::BlockDecl::getBlockManglingContextDecl , py::return_value_policy::reference_internal )
        .def("setBlockMangling", (void (clang::BlockDecl::*)(unsigned int, clang::Decl *))&clang::BlockDecl::setBlockMangling  )
        .def("getSourceRange", (clang::SourceRange (clang::BlockDecl::*)() const)&clang::BlockDecl::getSourceRange  )
    ;

    py::class_<clang::CapturedDecl, decl_deleter<clang::CapturedDecl>::type>(m, "CapturedDecl" , py::base<clang::Decl>())

        .def("getBody", (clang::Stmt * (clang::CapturedDecl::*)() const)&clang::CapturedDecl::getBody , py::return_value_policy::reference_internal )
        .def("setBody", (void (clang::CapturedDecl::*)(clang::Stmt *))&clang::CapturedDecl::setBody  )
        .def("isNothrow", (bool (clang::CapturedDecl::*)() const)&clang::CapturedDecl::isNothrow  )
        .def("setNothrow", (void (clang::CapturedDecl::*)(bool))&clang::CapturedDecl::setNothrow  )
        .def("getNumParams", (unsigned int (clang::CapturedDecl::*)() const)&clang::CapturedDecl::getNumParams  )
        .def("getParam", (clang::ImplicitParamDecl * (clang::CapturedDecl::*)(unsigned int) const)&clang::CapturedDecl::getParam , py::return_value_policy::reference_internal )
        .def("setParam", (void (clang::CapturedDecl::*)(unsigned int, clang::ImplicitParamDecl *))&clang::CapturedDecl::setParam  )
        .def("getContextParam", (clang::ImplicitParamDecl * (clang::CapturedDecl::*)() const)&clang::CapturedDecl::getContextParam , py::return_value_policy::reference_internal )
        .def("setContextParam", (void (clang::CapturedDecl::*)(unsigned int, clang::ImplicitParamDecl *))&clang::CapturedDecl::setContextParam  )
        .def("getContextParamPosition", (unsigned int (clang::CapturedDecl::*)() const)&clang::CapturedDecl::getContextParamPosition  )
        //.def("params", (llvm::iterator_range<clang::ImplicitParamDecl *const *> (clang::CapturedDecl::*)() const)&clang::CapturedDecl::params  )
    ;

    py::class_<clang::ImportDecl, decl_deleter<clang::ImportDecl>::type>(m, "ImportDecl" , py::base<clang::Decl>())

        //.def("getImportedModule", (clang::Module * (clang::ImportDecl::*)() const)&clang::ImportDecl::getImportedModule , py::return_value_policy::reference_internal )
        //.def("getIdentifierLocs", (llvm::ArrayRef<clang::SourceLocation> (clang::ImportDecl::*)() const)&clang::ImportDecl::getIdentifierLocs  )
        .def("getSourceRange", (clang::SourceRange (clang::ImportDecl::*)() const)&clang::ImportDecl::getSourceRange  )
    ;

    py::class_<clang::EmptyDecl, decl_deleter<clang::EmptyDecl>::type>(m, "EmptyDecl" , py::base<clang::Decl>())

    ;

    py::class_<clang::Stmt, stmt_deleter<clang::Stmt>::type>(m, "Stmt" )

        .def("getStmtClass", (clang::Stmt::StmtClass (clang::Stmt::*)() const)&clang::Stmt::getStmtClass  )
        .def("getStmtClassName", (const char * (clang::Stmt::*)() const)&clang::Stmt::getStmtClassName  )
        .def("getSourceRange", (clang::SourceRange (clang::Stmt::*)() const)&clang::Stmt::getSourceRange  )
        .def("getLocStart", (clang::SourceLocation (clang::Stmt::*)() const)&clang::Stmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::Stmt::*)() const)&clang::Stmt::getLocEnd  )
        .def("dump", [](const clang::Stmt& self)  {
          self.dump();
        } )
        .def("dump", [](const clang::Stmt& self, clang::SourceManager & SM)  {
          self.dump(SM);
        } )
        //.def("dump", [](const clang::Stmt& self, llvm::raw_ostream & OS , clang::SourceManager & SM)  {
        //  self.dump(OS, SM);
        //} )
        //.def("dump", [](const clang::Stmt& self, llvm::raw_ostream & OS)  {
        //  self.dump(OS);
        //} )
        .def("dumpColor", (void (clang::Stmt::*)() const)&clang::Stmt::dumpColor  )
        .def("dumpPretty", (void (clang::Stmt::*)(const clang::ASTContext &) const)&clang::Stmt::dumpPretty  )
        //.def("printPretty", (void (clang::Stmt::*)(llvm::raw_ostream &, clang::PrinterHelper *, const clang::PrintingPolicy &, unsigned int) const)&clang::Stmt::printPretty  )
        .def("viewAST", (void (clang::Stmt::*)() const)&clang::Stmt::viewAST  )
        .def("IgnoreImplicit", (clang::Stmt * (clang::Stmt::*)())&clang::Stmt::IgnoreImplicit , py::return_value_policy::reference_internal )
        .def("IgnoreContainers", (clang::Stmt * (clang::Stmt::*)(bool))&clang::Stmt::IgnoreContainers , py::return_value_policy::reference_internal )
        .def("stripLabelLikeStatements", [](const clang::Stmt& self) -> const clang::Stmt * {
         return self.stripLabelLikeStatements();
        } , py::return_value_policy::reference_internal)
        .def("stripLabelLikeStatements", []( clang::Stmt& self) -> clang::Stmt * {
         return self.stripLabelLikeStatements();
        } , py::return_value_policy::reference_internal)
        //.def("children", []( clang::Stmt& self) -> llvm::iterator_range<clang::StmtIterator> {
        // return self.children();
        //} )
        //.def("children", [](const clang::Stmt& self) -> llvm::iterator_range<clang::ConstStmtIterator> {
        // return self.children();
        //} )
        //.def("Profile", (void (clang::Stmt::*)(llvm::FoldingSetNodeID &, const clang::ASTContext &, bool) const)&clang::Stmt::Profile  )
    ;

    py::class_<clang::DeclStmt, stmt_deleter<clang::DeclStmt>::type>(m, "DeclStmt" , py::base<clang::Stmt>())

        .def("isSingleDecl", (bool (clang::DeclStmt::*)() const)&clang::DeclStmt::isSingleDecl  )
        .def("getSingleDecl", [](const clang::DeclStmt& self) -> const clang::Decl * {
         return self.getSingleDecl();
        } , py::return_value_policy::reference_internal)
        .def("getSingleDecl", []( clang::DeclStmt& self) -> clang::Decl * {
         return self.getSingleDecl();
        } , py::return_value_policy::reference_internal)
        //.def("getDeclGroup", [](const clang::DeclStmt& self) -> const clang::DeclGroupRef {
        // return self.getDeclGroup();
        //} )
        //.def("getDeclGroup", []( clang::DeclStmt& self) -> clang::DeclGroupRef {
        // return self.getDeclGroup();
        //} )
        //.def("setDeclGroup", (void (clang::DeclStmt::*)(clang::DeclGroupRef))&clang::DeclStmt::setDeclGroup  )
        .def("getStartLoc", (clang::SourceLocation (clang::DeclStmt::*)() const)&clang::DeclStmt::getStartLoc  )
        .def("setStartLoc", (void (clang::DeclStmt::*)(clang::SourceLocation))&clang::DeclStmt::setStartLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::DeclStmt::*)() const)&clang::DeclStmt::getEndLoc  )
        .def("setEndLoc", (void (clang::DeclStmt::*)(clang::SourceLocation))&clang::DeclStmt::setEndLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::DeclStmt::*)() const)&clang::DeclStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DeclStmt::*)() const)&clang::DeclStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DeclStmt::*)())&clang::DeclStmt::children  )
        //.def("decls", []( clang::DeclStmt& self) -> llvm::iterator_range<clang::Decl **> {
        // return self.decls();
        //} )
        //.def("decls", [](const clang::DeclStmt& self) -> llvm::iterator_range<clang::Decl *const *> {
        // return self.decls();
        //} )
    ;

    py::class_<clang::NullStmt, stmt_deleter<clang::NullStmt>::type>(m, "NullStmt" , py::base<clang::Stmt>())

        .def("getSemiLoc", (clang::SourceLocation (clang::NullStmt::*)() const)&clang::NullStmt::getSemiLoc  )
        .def("setSemiLoc", (void (clang::NullStmt::*)(clang::SourceLocation))&clang::NullStmt::setSemiLoc  )
        .def("hasLeadingEmptyMacro", (bool (clang::NullStmt::*)() const)&clang::NullStmt::hasLeadingEmptyMacro  )
        .def("getLocStart", (clang::SourceLocation (clang::NullStmt::*)() const)&clang::NullStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::NullStmt::*)() const)&clang::NullStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::NullStmt::*)())&clang::NullStmt::children  )
    ;

    py::class_<clang::CompoundStmt, stmt_deleter<clang::CompoundStmt>::type>(m, "CompoundStmt" , py::base<clang::Stmt>())

        //.def("setStmts", (void (clang::CompoundStmt::*)(const clang::ASTContext &, llvm::ArrayRef<clang::Stmt *>))&clang::CompoundStmt::setStmts  )
        .def("body_empty", (bool (clang::CompoundStmt::*)() const)&clang::CompoundStmt::body_empty  )
        .def("size", (unsigned int (clang::CompoundStmt::*)() const)&clang::CompoundStmt::size  )
        //.def("body", []( clang::CompoundStmt& self) -> llvm::iterator_range<clang::Stmt **> {
        // return self.body();
        //} )
        .def("body_front", []( clang::CompoundStmt& self) -> clang::Stmt * {
         return self.body_front();
        } , py::return_value_policy::reference_internal)
        .def("body_back", []( clang::CompoundStmt& self) -> clang::Stmt * {
         return self.body_back();
        } , py::return_value_policy::reference_internal)
        .def("setLastStmt", (void (clang::CompoundStmt::*)(clang::Stmt *))&clang::CompoundStmt::setLastStmt  )
        //.def("body", [](const clang::CompoundStmt& self) -> llvm::iterator_range<clang::Stmt *const *> {
        // return self.body();
        //} )
        .def("body_front", [](const clang::CompoundStmt& self) -> const clang::Stmt * {
         return self.body_front();
        } , py::return_value_policy::reference_internal)
        .def("body_back", [](const clang::CompoundStmt& self) -> const clang::Stmt * {
         return self.body_back();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::CompoundStmt::*)() const)&clang::CompoundStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CompoundStmt::*)() const)&clang::CompoundStmt::getLocEnd  )
        .def("getLBracLoc", (clang::SourceLocation (clang::CompoundStmt::*)() const)&clang::CompoundStmt::getLBracLoc  )
        .def("getRBracLoc", (clang::SourceLocation (clang::CompoundStmt::*)() const)&clang::CompoundStmt::getRBracLoc  )
        //.def("children", []( clang::CompoundStmt& self) -> llvm::iterator_range<clang::StmtIterator> {
        // return self.children();
        //} )
        //.def("children", [](const clang::CompoundStmt& self) -> llvm::iterator_range<clang::ConstStmtIterator> {
        // return self.children();
        //} )
    ;

    py::class_<clang::SwitchCase, stmt_deleter<clang::SwitchCase>::type>(m, "SwitchCase" , py::base<clang::Stmt>())

        .def("getNextSwitchCase", [](const clang::SwitchCase& self) -> const clang::SwitchCase * {
         return self.getNextSwitchCase();
        } , py::return_value_policy::reference_internal)
        .def("getNextSwitchCase", []( clang::SwitchCase& self) -> clang::SwitchCase * {
         return self.getNextSwitchCase();
        } , py::return_value_policy::reference_internal)
        .def("setNextSwitchCase", (void (clang::SwitchCase::*)(clang::SwitchCase *))&clang::SwitchCase::setNextSwitchCase  )
        .def("getKeywordLoc", (clang::SourceLocation (clang::SwitchCase::*)() const)&clang::SwitchCase::getKeywordLoc  )
        .def("setKeywordLoc", (void (clang::SwitchCase::*)(clang::SourceLocation))&clang::SwitchCase::setKeywordLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::SwitchCase::*)() const)&clang::SwitchCase::getColonLoc  )
        .def("setColonLoc", (void (clang::SwitchCase::*)(clang::SourceLocation))&clang::SwitchCase::setColonLoc  )
        .def("getSubStmt", []( clang::SwitchCase& self) -> clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", [](const clang::SwitchCase& self) -> const clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::SwitchCase::*)() const)&clang::SwitchCase::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::SwitchCase::*)() const)&clang::SwitchCase::getLocEnd  )
    ;

    py::class_<clang::CaseStmt, stmt_deleter<clang::CaseStmt>::type>(m, "CaseStmt" , py::base<clang::SwitchCase>())

        .def("getCaseLoc", (clang::SourceLocation (clang::CaseStmt::*)() const)&clang::CaseStmt::getCaseLoc  )
        .def("setCaseLoc", (void (clang::CaseStmt::*)(clang::SourceLocation))&clang::CaseStmt::setCaseLoc  )
        .def("getEllipsisLoc", (clang::SourceLocation (clang::CaseStmt::*)() const)&clang::CaseStmt::getEllipsisLoc  )
        .def("setEllipsisLoc", (void (clang::CaseStmt::*)(clang::SourceLocation))&clang::CaseStmt::setEllipsisLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::CaseStmt::*)() const)&clang::CaseStmt::getColonLoc  )
        .def("setColonLoc", (void (clang::CaseStmt::*)(clang::SourceLocation))&clang::CaseStmt::setColonLoc  )
        .def("getLHS", []( clang::CaseStmt& self) -> clang::Expr * {
         return self.getLHS();
        } , py::return_value_policy::reference_internal)
        .def("getRHS", []( clang::CaseStmt& self) -> clang::Expr * {
         return self.getRHS();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", []( clang::CaseStmt& self) -> clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getLHS", [](const clang::CaseStmt& self) -> const clang::Expr * {
         return self.getLHS();
        } , py::return_value_policy::reference_internal)
        .def("getRHS", [](const clang::CaseStmt& self) -> const clang::Expr * {
         return self.getRHS();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", [](const clang::CaseStmt& self) -> const clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("setSubStmt", (void (clang::CaseStmt::*)(clang::Stmt *))&clang::CaseStmt::setSubStmt  )
        .def("setLHS", (void (clang::CaseStmt::*)(clang::Expr *))&clang::CaseStmt::setLHS  )
        .def("setRHS", (void (clang::CaseStmt::*)(clang::Expr *))&clang::CaseStmt::setRHS  )
        .def("getLocStart", (clang::SourceLocation (clang::CaseStmt::*)() const)&clang::CaseStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CaseStmt::*)() const)&clang::CaseStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CaseStmt::*)())&clang::CaseStmt::children  )
    ;

    py::class_<clang::DefaultStmt, stmt_deleter<clang::DefaultStmt>::type>(m, "DefaultStmt" , py::base<clang::SwitchCase>())

        .def("getSubStmt", []( clang::DefaultStmt& self) -> clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", [](const clang::DefaultStmt& self) -> const clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("setSubStmt", (void (clang::DefaultStmt::*)(clang::Stmt *))&clang::DefaultStmt::setSubStmt  )
        .def("getDefaultLoc", (clang::SourceLocation (clang::DefaultStmt::*)() const)&clang::DefaultStmt::getDefaultLoc  )
        .def("setDefaultLoc", (void (clang::DefaultStmt::*)(clang::SourceLocation))&clang::DefaultStmt::setDefaultLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::DefaultStmt::*)() const)&clang::DefaultStmt::getColonLoc  )
        .def("setColonLoc", (void (clang::DefaultStmt::*)(clang::SourceLocation))&clang::DefaultStmt::setColonLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::DefaultStmt::*)() const)&clang::DefaultStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DefaultStmt::*)() const)&clang::DefaultStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DefaultStmt::*)())&clang::DefaultStmt::children  )
    ;

    py::class_<clang::LabelStmt, stmt_deleter<clang::LabelStmt>::type>(m, "LabelStmt" , py::base<clang::Stmt>())

        .def("getIdentLoc", (clang::SourceLocation (clang::LabelStmt::*)() const)&clang::LabelStmt::getIdentLoc  )
        .def("getDecl", (clang::LabelDecl * (clang::LabelStmt::*)() const)&clang::LabelStmt::getDecl , py::return_value_policy::reference_internal )
        .def("setDecl", (void (clang::LabelStmt::*)(clang::LabelDecl *))&clang::LabelStmt::setDecl  )
        .def("getName", (const char * (clang::LabelStmt::*)() const)&clang::LabelStmt::getName  )
        .def("getSubStmt", []( clang::LabelStmt& self) -> clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", [](const clang::LabelStmt& self) -> const clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("setIdentLoc", (void (clang::LabelStmt::*)(clang::SourceLocation))&clang::LabelStmt::setIdentLoc  )
        .def("setSubStmt", (void (clang::LabelStmt::*)(clang::Stmt *))&clang::LabelStmt::setSubStmt  )
        .def("getLocStart", (clang::SourceLocation (clang::LabelStmt::*)() const)&clang::LabelStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::LabelStmt::*)() const)&clang::LabelStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::LabelStmt::*)())&clang::LabelStmt::children  )
    ;

    py::class_<clang::AttributedStmt, stmt_deleter<clang::AttributedStmt>::type>(m, "AttributedStmt" , py::base<clang::Stmt>())

        .def("getAttrLoc", (clang::SourceLocation (clang::AttributedStmt::*)() const)&clang::AttributedStmt::getAttrLoc  )
        //.def("getAttrs", (llvm::ArrayRef<const clang::Attr *> (clang::AttributedStmt::*)() const)&clang::AttributedStmt::getAttrs  )
        .def("getSubStmt", []( clang::AttributedStmt& self) -> clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", [](const clang::AttributedStmt& self) -> const clang::Stmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::AttributedStmt::*)() const)&clang::AttributedStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::AttributedStmt::*)() const)&clang::AttributedStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AttributedStmt::*)())&clang::AttributedStmt::children  )
    ;

    py::class_<clang::IfStmt, stmt_deleter<clang::IfStmt>::type>(m, "IfStmt" , py::base<clang::Stmt>())

        .def("getConditionVariable", (clang::VarDecl * (clang::IfStmt::*)() const)&clang::IfStmt::getConditionVariable , py::return_value_policy::reference_internal )
        .def("setConditionVariable", (void (clang::IfStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::IfStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", (const clang::DeclStmt * (clang::IfStmt::*)() const)&clang::IfStmt::getConditionVariableDeclStmt , py::return_value_policy::reference_internal )
        .def("getCond", [](const clang::IfStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::IfStmt::*)(clang::Expr *))&clang::IfStmt::setCond  )
        .def("getThen", [](const clang::IfStmt& self) -> const clang::Stmt * {
         return self.getThen();
        } , py::return_value_policy::reference_internal)
        .def("setThen", (void (clang::IfStmt::*)(clang::Stmt *))&clang::IfStmt::setThen  )
        .def("getElse", [](const clang::IfStmt& self) -> const clang::Stmt * {
         return self.getElse();
        } , py::return_value_policy::reference_internal)
        .def("setElse", (void (clang::IfStmt::*)(clang::Stmt *))&clang::IfStmt::setElse  )
        .def("getCond", []( clang::IfStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getThen", []( clang::IfStmt& self) -> clang::Stmt * {
         return self.getThen();
        } , py::return_value_policy::reference_internal)
        .def("getElse", []( clang::IfStmt& self) -> clang::Stmt * {
         return self.getElse();
        } , py::return_value_policy::reference_internal)
        .def("getIfLoc", (clang::SourceLocation (clang::IfStmt::*)() const)&clang::IfStmt::getIfLoc  )
        .def("setIfLoc", (void (clang::IfStmt::*)(clang::SourceLocation))&clang::IfStmt::setIfLoc  )
        .def("getElseLoc", (clang::SourceLocation (clang::IfStmt::*)() const)&clang::IfStmt::getElseLoc  )
        .def("setElseLoc", (void (clang::IfStmt::*)(clang::SourceLocation))&clang::IfStmt::setElseLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::IfStmt::*)() const)&clang::IfStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::IfStmt::*)() const)&clang::IfStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::IfStmt::*)())&clang::IfStmt::children  )
    ;

    py::class_<clang::SwitchStmt, stmt_deleter<clang::SwitchStmt>::type>(m, "SwitchStmt" , py::base<clang::Stmt>())

        .def("getConditionVariable", (clang::VarDecl * (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getConditionVariable , py::return_value_policy::reference_internal )
        .def("setConditionVariable", (void (clang::SwitchStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::SwitchStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", (const clang::DeclStmt * (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getConditionVariableDeclStmt , py::return_value_policy::reference_internal )
        .def("getCond", [](const clang::SwitchStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::SwitchStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getSwitchCaseList", [](const clang::SwitchStmt& self) -> const clang::SwitchCase * {
         return self.getSwitchCaseList();
        } , py::return_value_policy::reference_internal)
        .def("getCond", []( clang::SwitchStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::SwitchStmt::*)(clang::Expr *))&clang::SwitchStmt::setCond  )
        .def("getBody", []( clang::SwitchStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", []( clang::SwitchStmt& self, clang::Stmt * S)  {
          self.setBody(S);
        } )
        .def("getSwitchCaseList", []( clang::SwitchStmt& self) -> clang::SwitchCase * {
         return self.getSwitchCaseList();
        } , py::return_value_policy::reference_internal)
        .def("setSwitchCaseList", (void (clang::SwitchStmt::*)(clang::SwitchCase *))&clang::SwitchStmt::setSwitchCaseList  )
        .def("getSwitchLoc", (clang::SourceLocation (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getSwitchLoc  )
        .def("setSwitchLoc", (void (clang::SwitchStmt::*)(clang::SourceLocation))&clang::SwitchStmt::setSwitchLoc  )
        .def("setBody", []( clang::SwitchStmt& self, clang::Stmt * S , clang::SourceLocation SL)  {
          self.setBody(S, SL);
        } )
        .def("addSwitchCase", (void (clang::SwitchStmt::*)(clang::SwitchCase *))&clang::SwitchStmt::addSwitchCase  )
        .def("setAllEnumCasesCovered", (void (clang::SwitchStmt::*)())&clang::SwitchStmt::setAllEnumCasesCovered  )
        .def("isAllEnumCasesCovered", (bool (clang::SwitchStmt::*)() const)&clang::SwitchStmt::isAllEnumCasesCovered  )
        .def("getLocStart", (clang::SourceLocation (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SwitchStmt::*)())&clang::SwitchStmt::children  )
    ;

    py::class_<clang::WhileStmt, stmt_deleter<clang::WhileStmt>::type>(m, "WhileStmt" , py::base<clang::Stmt>())

        .def("getConditionVariable", (clang::VarDecl * (clang::WhileStmt::*)() const)&clang::WhileStmt::getConditionVariable , py::return_value_policy::reference_internal )
        .def("setConditionVariable", (void (clang::WhileStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::WhileStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", (const clang::DeclStmt * (clang::WhileStmt::*)() const)&clang::WhileStmt::getConditionVariableDeclStmt , py::return_value_policy::reference_internal )
        .def("getCond", []( clang::WhileStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::WhileStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::WhileStmt::*)(clang::Expr *))&clang::WhileStmt::setCond  )
        .def("getBody", []( clang::WhileStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::WhileStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", (void (clang::WhileStmt::*)(clang::Stmt *))&clang::WhileStmt::setBody  )
        .def("getWhileLoc", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getWhileLoc  )
        .def("setWhileLoc", (void (clang::WhileStmt::*)(clang::SourceLocation))&clang::WhileStmt::setWhileLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::WhileStmt::*)())&clang::WhileStmt::children  )
    ;

    py::class_<clang::DoStmt, stmt_deleter<clang::DoStmt>::type>(m, "DoStmt" , py::base<clang::Stmt>())

        .def("getCond", []( clang::DoStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::DoStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::DoStmt::*)(clang::Expr *))&clang::DoStmt::setCond  )
        .def("getBody", []( clang::DoStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::DoStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", (void (clang::DoStmt::*)(clang::Stmt *))&clang::DoStmt::setBody  )
        .def("getDoLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getDoLoc  )
        .def("setDoLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setDoLoc  )
        .def("getWhileLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getWhileLoc  )
        .def("setWhileLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setWhileLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getRParenLoc  )
        .def("setRParenLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DoStmt::*)())&clang::DoStmt::children  )
    ;
}
