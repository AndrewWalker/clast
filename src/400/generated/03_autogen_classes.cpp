
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 4.0.0-svn276543-1~exp1 (trunk)
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_2(pybind11::module& m)
{

    py::class_<clang::VAArgExpr, stmt_deleter<clang::VAArgExpr>::type>(m, "VAArgExpr" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::VAArgExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::VAArgExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::VAArgExpr::*)(clang::Expr *))&clang::VAArgExpr::setSubExpr  )
        .def("isMicrosoftABI", (bool (clang::VAArgExpr::*)() const)&clang::VAArgExpr::isMicrosoftABI  )
        .def("setIsMicrosoftABI", (void (clang::VAArgExpr::*)(bool))&clang::VAArgExpr::setIsMicrosoftABI  )
        .def("getWrittenTypeInfo", (clang::TypeSourceInfo * (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getWrittenTypeInfo , py::return_value_policy::reference_internal )
        .def("setWrittenTypeInfo", (void (clang::VAArgExpr::*)(clang::TypeSourceInfo *))&clang::VAArgExpr::setWrittenTypeInfo  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getBuiltinLoc  )
        .def("setBuiltinLoc", (void (clang::VAArgExpr::*)(clang::SourceLocation))&clang::VAArgExpr::setBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::VAArgExpr::*)(clang::SourceLocation))&clang::VAArgExpr::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::VAArgExpr::*)())&clang::VAArgExpr::children  )
    ;

    py::class_<clang::InitListExpr, stmt_deleter<clang::InitListExpr>::type>(m, "InitListExpr" , py::base<clang::Expr>())

        .def("getNumInits", (unsigned int (clang::InitListExpr::*)() const)&clang::InitListExpr::getNumInits  )
        //.def("inits", (llvm::ArrayRef<clang::Expr *> (clang::InitListExpr::*)())&clang::InitListExpr::inits  )
        .def("getInit", [](const clang::InitListExpr& self, unsigned int Init) -> const clang::Expr * {
         return self.getInit(Init);
        } , py::return_value_policy::reference_internal)
        .def("getInit", []( clang::InitListExpr& self, unsigned int Init) -> clang::Expr * {
         return self.getInit(Init);
        } , py::return_value_policy::reference_internal)
        .def("setInit", (void (clang::InitListExpr::*)(unsigned int, clang::Expr *))&clang::InitListExpr::setInit  )
        .def("reserveInits", (void (clang::InitListExpr::*)(const clang::ASTContext &, unsigned int))&clang::InitListExpr::reserveInits  )
        .def("resizeInits", (void (clang::InitListExpr::*)(const clang::ASTContext &, unsigned int))&clang::InitListExpr::resizeInits  )
        .def("updateInit", (clang::Expr * (clang::InitListExpr::*)(const clang::ASTContext &, unsigned int, clang::Expr *))&clang::InitListExpr::updateInit , py::return_value_policy::reference_internal )
        .def("getArrayFiller", []( clang::InitListExpr& self) -> clang::Expr * {
         return self.getArrayFiller();
        } , py::return_value_policy::reference_internal)
        .def("getArrayFiller", [](const clang::InitListExpr& self) -> const clang::Expr * {
         return self.getArrayFiller();
        } , py::return_value_policy::reference_internal)
        .def("setArrayFiller", (void (clang::InitListExpr::*)(clang::Expr *))&clang::InitListExpr::setArrayFiller  )
        .def("hasArrayFiller", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::hasArrayFiller  )
        .def("getInitializedFieldInUnion", []( clang::InitListExpr& self) -> clang::FieldDecl * {
         return self.getInitializedFieldInUnion();
        } , py::return_value_policy::reference_internal)
        .def("getInitializedFieldInUnion", [](const clang::InitListExpr& self) -> const clang::FieldDecl * {
         return self.getInitializedFieldInUnion();
        } , py::return_value_policy::reference_internal)
        .def("setInitializedFieldInUnion", (void (clang::InitListExpr::*)(clang::FieldDecl *))&clang::InitListExpr::setInitializedFieldInUnion  )
        .def("isExplicit", (bool (clang::InitListExpr::*)())&clang::InitListExpr::isExplicit  )
        .def("isStringLiteralInit", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::isStringLiteralInit  )
        .def("getLBraceLoc", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getLBraceLoc  )
        .def("setLBraceLoc", (void (clang::InitListExpr::*)(clang::SourceLocation))&clang::InitListExpr::setLBraceLoc  )
        .def("getRBraceLoc", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getRBraceLoc  )
        .def("setRBraceLoc", (void (clang::InitListExpr::*)(clang::SourceLocation))&clang::InitListExpr::setRBraceLoc  )
        .def("isSemanticForm", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::isSemanticForm  )
        .def("getSemanticForm", (clang::InitListExpr * (clang::InitListExpr::*)() const)&clang::InitListExpr::getSemanticForm , py::return_value_policy::reference_internal )
        .def("getSyntacticForm", (clang::InitListExpr * (clang::InitListExpr::*)() const)&clang::InitListExpr::getSyntacticForm , py::return_value_policy::reference_internal )
        .def("setSyntacticForm", (void (clang::InitListExpr::*)(clang::InitListExpr *))&clang::InitListExpr::setSyntacticForm  )
        .def("hadArrayRangeDesignator", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::hadArrayRangeDesignator  )
        .def("sawArrayRangeDesignator", (void (clang::InitListExpr::*)(bool))&clang::InitListExpr::sawArrayRangeDesignator  )
        .def("getLocStart", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::InitListExpr::*)())&clang::InitListExpr::children  )
    ;

    py::class_<clang::DesignatedInitExpr, stmt_deleter<clang::DesignatedInitExpr>::type>(m, "DesignatedInitExpr" , py::base<clang::Expr>())

        .def("size", (unsigned int (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::size  )
        //.def("designators", []( clang::DesignatedInitExpr& self) -> llvm::MutableArrayRef<clang::DesignatedInitExpr::Designator> {
        // return self.designators();
        //} )
        //.def("designators", [](const clang::DesignatedInitExpr& self) -> llvm::ArrayRef<clang::DesignatedInitExpr::Designator> {
        // return self.designators();
        //} )
        //.def("getDesignator", (clang::DesignatedInitExpr::Designator * (clang::DesignatedInitExpr::*)(unsigned int))&clang::DesignatedInitExpr::getDesignator , py::return_value_policy::reference_internal )
        //.def("setDesignators", (void (clang::DesignatedInitExpr::*)(const clang::ASTContext &, const clang::DesignatedInitExpr::Designator *, unsigned int))&clang::DesignatedInitExpr::setDesignators  )
        //.def("getArrayIndex", (clang::Expr * (clang::DesignatedInitExpr::*)(const clang::DesignatedInitExpr::Designator &) const)&clang::DesignatedInitExpr::getArrayIndex , py::return_value_policy::reference_internal )
        //.def("getArrayRangeStart", (clang::Expr * (clang::DesignatedInitExpr::*)(const clang::DesignatedInitExpr::Designator &) const)&clang::DesignatedInitExpr::getArrayRangeStart , py::return_value_policy::reference_internal )
        //.def("getArrayRangeEnd", (clang::Expr * (clang::DesignatedInitExpr::*)(const clang::DesignatedInitExpr::Designator &) const)&clang::DesignatedInitExpr::getArrayRangeEnd , py::return_value_policy::reference_internal )
        .def("getEqualOrColonLoc", (clang::SourceLocation (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getEqualOrColonLoc  )
        .def("setEqualOrColonLoc", (void (clang::DesignatedInitExpr::*)(clang::SourceLocation))&clang::DesignatedInitExpr::setEqualOrColonLoc  )
        .def("usesGNUSyntax", (bool (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::usesGNUSyntax  )
        .def("setGNUSyntax", (void (clang::DesignatedInitExpr::*)(bool))&clang::DesignatedInitExpr::setGNUSyntax  )
        .def("getInit", (clang::Expr * (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getInit , py::return_value_policy::reference_internal )
        .def("setInit", (void (clang::DesignatedInitExpr::*)(clang::Expr *))&clang::DesignatedInitExpr::setInit  )
        .def("getNumSubExprs", (unsigned int (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getNumSubExprs  )
        .def("getSubExpr", (clang::Expr * (clang::DesignatedInitExpr::*)(unsigned int) const)&clang::DesignatedInitExpr::getSubExpr , py::return_value_policy::reference_internal )
        .def("setSubExpr", (void (clang::DesignatedInitExpr::*)(unsigned int, clang::Expr *))&clang::DesignatedInitExpr::setSubExpr  )
        //.def("ExpandDesignator", (void (clang::DesignatedInitExpr::*)(const clang::ASTContext &, unsigned int, const clang::DesignatedInitExpr::Designator *, const clang::DesignatedInitExpr::Designator *))&clang::DesignatedInitExpr::ExpandDesignator  )
        .def("getDesignatorsSourceRange", (clang::SourceRange (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getDesignatorsSourceRange  )
        .def("getLocStart", (clang::SourceLocation (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DesignatedInitExpr::*)())&clang::DesignatedInitExpr::children  )
    ;

    py::class_<clang::NoInitExpr, stmt_deleter<clang::NoInitExpr>::type>(m, "NoInitExpr" , py::base<clang::Expr>())

        .def("getLocStart", (clang::SourceLocation (clang::NoInitExpr::*)() const)&clang::NoInitExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::NoInitExpr::*)() const)&clang::NoInitExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::NoInitExpr::*)())&clang::NoInitExpr::children  )
    ;

    py::class_<clang::DesignatedInitUpdateExpr, stmt_deleter<clang::DesignatedInitUpdateExpr>::type>(m, "DesignatedInitUpdateExpr" , py::base<clang::Expr>())

        .def("getLocStart", (clang::SourceLocation (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getLocEnd  )
        .def("getBase", (clang::Expr * (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getBase , py::return_value_policy::reference_internal )
        .def("setBase", (void (clang::DesignatedInitUpdateExpr::*)(clang::Expr *))&clang::DesignatedInitUpdateExpr::setBase  )
        .def("getUpdater", (clang::InitListExpr * (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getUpdater , py::return_value_policy::reference_internal )
        .def("setUpdater", (void (clang::DesignatedInitUpdateExpr::*)(clang::Expr *))&clang::DesignatedInitUpdateExpr::setUpdater  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DesignatedInitUpdateExpr::*)())&clang::DesignatedInitUpdateExpr::children  )
    ;

    py::class_<clang::ImplicitValueInitExpr, stmt_deleter<clang::ImplicitValueInitExpr>::type>(m, "ImplicitValueInitExpr" , py::base<clang::Expr>())

        .def("getLocStart", (clang::SourceLocation (clang::ImplicitValueInitExpr::*)() const)&clang::ImplicitValueInitExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ImplicitValueInitExpr::*)() const)&clang::ImplicitValueInitExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ImplicitValueInitExpr::*)())&clang::ImplicitValueInitExpr::children  )
    ;

    py::class_<clang::ParenListExpr, stmt_deleter<clang::ParenListExpr>::type>(m, "ParenListExpr" , py::base<clang::Expr>())

        .def("getNumExprs", (unsigned int (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getNumExprs  )
        .def("getExpr", [](const clang::ParenListExpr& self, unsigned int Init) -> const clang::Expr * {
         return self.getExpr(Init);
        } , py::return_value_policy::reference_internal)
        .def("getExpr", []( clang::ParenListExpr& self, unsigned int Init) -> clang::Expr * {
         return self.getExpr(Init);
        } , py::return_value_policy::reference_internal)
        //.def("exprs", (llvm::ArrayRef<clang::Expr *> (clang::ParenListExpr::*)())&clang::ParenListExpr::exprs  )
        .def("getLParenLoc", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ParenListExpr::*)())&clang::ParenListExpr::children  )
    ;

    py::class_<clang::GenericSelectionExpr, stmt_deleter<clang::GenericSelectionExpr>::type>(m, "GenericSelectionExpr" , py::base<clang::Expr>())

        .def("getNumAssocs", (unsigned int (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getNumAssocs  )
        .def("getGenericLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getGenericLoc  )
        .def("getDefaultLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getDefaultLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getRParenLoc  )
        .def("getAssocExpr", [](const clang::GenericSelectionExpr& self, unsigned int i) -> const clang::Expr * {
         return self.getAssocExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getAssocExpr", []( clang::GenericSelectionExpr& self, unsigned int i) -> clang::Expr * {
         return self.getAssocExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getAssocTypeSourceInfo", [](const clang::GenericSelectionExpr& self, unsigned int i) -> const clang::TypeSourceInfo * {
         return self.getAssocTypeSourceInfo(i);
        } , py::return_value_policy::reference_internal)
        .def("getAssocTypeSourceInfo", []( clang::GenericSelectionExpr& self, unsigned int i) -> clang::TypeSourceInfo * {
         return self.getAssocTypeSourceInfo(i);
        } , py::return_value_policy::reference_internal)
        .def("getAssocType", (clang::QualType (clang::GenericSelectionExpr::*)(unsigned int) const)&clang::GenericSelectionExpr::getAssocType  )
        .def("getControllingExpr", [](const clang::GenericSelectionExpr& self) -> const clang::Expr * {
         return self.getControllingExpr();
        } , py::return_value_policy::reference_internal)
        .def("getControllingExpr", []( clang::GenericSelectionExpr& self) -> clang::Expr * {
         return self.getControllingExpr();
        } , py::return_value_policy::reference_internal)
        .def("isResultDependent", (bool (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::isResultDependent  )
        .def("getResultIndex", (unsigned int (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getResultIndex  )
        .def("getResultExpr", [](const clang::GenericSelectionExpr& self) -> const clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getResultExpr", []( clang::GenericSelectionExpr& self) -> clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::GenericSelectionExpr::*)())&clang::GenericSelectionExpr::children  )
    ;

    py::class_<clang::ExtVectorElementExpr, stmt_deleter<clang::ExtVectorElementExpr>::type>(m, "ExtVectorElementExpr" , py::base<clang::Expr>())

        .def("getBase", [](const clang::ExtVectorElementExpr& self) -> const clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getBase", []( clang::ExtVectorElementExpr& self) -> clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("setBase", (void (clang::ExtVectorElementExpr::*)(clang::Expr *))&clang::ExtVectorElementExpr::setBase  )
        //.def("getAccessor", (clang::IdentifierInfo & (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getAccessor  )
        //.def("setAccessor", (void (clang::ExtVectorElementExpr::*)(clang::IdentifierInfo *))&clang::ExtVectorElementExpr::setAccessor  )
        .def("getAccessorLoc", (clang::SourceLocation (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getAccessorLoc  )
        .def("setAccessorLoc", (void (clang::ExtVectorElementExpr::*)(clang::SourceLocation))&clang::ExtVectorElementExpr::setAccessorLoc  )
        .def("getNumElements", (unsigned int (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getNumElements  )
        .def("containsDuplicateElements", (bool (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::containsDuplicateElements  )
        //.def("getEncodedElementAccess", (void (clang::ExtVectorElementExpr::*)(llvm::SmallVectorImpl<unsigned int> &) const)&clang::ExtVectorElementExpr::getEncodedElementAccess  )
        .def("getLocStart", (clang::SourceLocation (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getLocEnd  )
        .def("isArrow", (bool (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::isArrow  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ExtVectorElementExpr::*)())&clang::ExtVectorElementExpr::children  )
    ;

    py::class_<clang::BlockExpr, stmt_deleter<clang::BlockExpr>::type>(m, "BlockExpr" , py::base<clang::Expr>())

        .def("getBlockDecl", [](const clang::BlockExpr& self) -> const clang::BlockDecl * {
         return self.getBlockDecl();
        } , py::return_value_policy::reference_internal)
        .def("getBlockDecl", []( clang::BlockExpr& self) -> clang::BlockDecl * {
         return self.getBlockDecl();
        } , py::return_value_policy::reference_internal)
        .def("setBlockDecl", (void (clang::BlockExpr::*)(clang::BlockDecl *))&clang::BlockExpr::setBlockDecl  )
        .def("getCaretLocation", (clang::SourceLocation (clang::BlockExpr::*)() const)&clang::BlockExpr::getCaretLocation  )
        .def("getBody", [](const clang::BlockExpr& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", []( clang::BlockExpr& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::BlockExpr::*)() const)&clang::BlockExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::BlockExpr::*)() const)&clang::BlockExpr::getLocEnd  )
        //.def("getFunctionType", (const clang::FunctionProtoType * (clang::BlockExpr::*)() const)&clang::BlockExpr::getFunctionType , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BlockExpr::*)())&clang::BlockExpr::children  )
    ;

    py::class_<clang::AsTypeExpr, stmt_deleter<clang::AsTypeExpr>::type>(m, "AsTypeExpr" , py::base<clang::Expr>())

        .def("getSrcExpr", (clang::Expr * (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getSrcExpr , py::return_value_policy::reference_internal )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AsTypeExpr::*)())&clang::AsTypeExpr::children  )
    ;

    py::class_<clang::PseudoObjectExpr, stmt_deleter<clang::PseudoObjectExpr>::type>(m, "PseudoObjectExpr" , py::base<clang::Expr>())

        .def("getSyntacticForm", []( clang::PseudoObjectExpr& self) -> clang::Expr * {
         return self.getSyntacticForm();
        } , py::return_value_policy::reference_internal)
        .def("getSyntacticForm", [](const clang::PseudoObjectExpr& self) -> const clang::Expr * {
         return self.getSyntacticForm();
        } , py::return_value_policy::reference_internal)
        .def("getResultExprIndex", (unsigned int (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getResultExprIndex  )
        .def("getResultExpr", []( clang::PseudoObjectExpr& self) -> clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getResultExpr", [](const clang::PseudoObjectExpr& self) -> const clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getNumSemanticExprs", (unsigned int (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getNumSemanticExprs  )
        //.def("semantics", []( clang::PseudoObjectExpr& self) -> llvm::iterator_range<clang::Expr *const *> {
        // return self.semantics();
        //} )
        //.def("semantics", [](const clang::PseudoObjectExpr& self) -> llvm::iterator_range<const clang::Expr *const *> {
        // return self.semantics();
        //} )
        .def("getSemanticExpr", []( clang::PseudoObjectExpr& self, unsigned int index) -> clang::Expr * {
         return self.getSemanticExpr(index);
        } , py::return_value_policy::reference_internal)
        .def("getSemanticExpr", [](const clang::PseudoObjectExpr& self, unsigned int index) -> const clang::Expr * {
         return self.getSemanticExpr(index);
        } , py::return_value_policy::reference_internal)
        .def("getExprLoc", (clang::SourceLocation (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getExprLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::PseudoObjectExpr::*)())&clang::PseudoObjectExpr::children  )
    ;

    py::class_<clang::AtomicExpr, stmt_deleter<clang::AtomicExpr>::type>(m, "AtomicExpr" , py::base<clang::Expr>())

        .def("getPtr", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getPtr , py::return_value_policy::reference_internal )
        .def("getOrder", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getOrder , py::return_value_policy::reference_internal )
        .def("getVal1", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getVal1 , py::return_value_policy::reference_internal )
        .def("getOrderFail", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getOrderFail , py::return_value_policy::reference_internal )
        .def("getVal2", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getVal2 , py::return_value_policy::reference_internal )
        .def("getWeak", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getWeak , py::return_value_policy::reference_internal )
        .def("getOp", (clang::AtomicExpr::AtomicOp (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getOp  )
        .def("getNumSubExprs", [](const clang::AtomicExpr& self) -> unsigned int {
         return self.getNumSubExprs();
        } )
        .def("isVolatile", (bool (clang::AtomicExpr::*)() const)&clang::AtomicExpr::isVolatile  )
        .def("isCmpXChg", (bool (clang::AtomicExpr::*)() const)&clang::AtomicExpr::isCmpXChg  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AtomicExpr::*)())&clang::AtomicExpr::children  )
    ;

    py::class_<clang::TypoExpr, stmt_deleter<clang::TypoExpr>::type>(m, "TypoExpr" , py::base<clang::Expr>())

        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::TypoExpr::*)())&clang::TypoExpr::children  )
        .def("getLocStart", (clang::SourceLocation (clang::TypoExpr::*)() const)&clang::TypoExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::TypoExpr::*)() const)&clang::TypoExpr::getLocEnd  )
    ;

    py::class_<clang::AccessSpecDecl, decl_deleter<clang::AccessSpecDecl>::type>(m, "AccessSpecDecl" , py::base<clang::Decl>())

        .def("getAccessSpecifierLoc", (clang::SourceLocation (clang::AccessSpecDecl::*)() const)&clang::AccessSpecDecl::getAccessSpecifierLoc  )
        .def("setAccessSpecifierLoc", (void (clang::AccessSpecDecl::*)(clang::SourceLocation))&clang::AccessSpecDecl::setAccessSpecifierLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::AccessSpecDecl::*)() const)&clang::AccessSpecDecl::getColonLoc  )
        .def("setColonLoc", (void (clang::AccessSpecDecl::*)(clang::SourceLocation))&clang::AccessSpecDecl::setColonLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::AccessSpecDecl::*)() const)&clang::AccessSpecDecl::getSourceRange  )
    ;

    py::class_<clang::CXXRecordDecl, decl_deleter<clang::CXXRecordDecl>::type>(m, "CXXRecordDecl" , py::base<clang::RecordDecl>())

        .def("getCanonicalDecl", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getDefinition", (clang::CXXRecordDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getDefinition , py::return_value_policy::reference_internal )
        .def("hasDefinition", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasDefinition  )
        .def("isDynamicClass", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isDynamicClass  )
        .def("setIsParsingBaseSpecifiers", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setIsParsingBaseSpecifiers  )
        .def("isParsingBaseSpecifiers", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isParsingBaseSpecifiers  )
        .def("getNumBases", (unsigned int (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getNumBases  )
        //.def("bases", []( clang::CXXRecordDecl& self) -> llvm::iterator_range<clang::CXXBaseSpecifier *> {
        // return self.bases();
        //} )
        //.def("bases", [](const clang::CXXRecordDecl& self) -> llvm::iterator_range<const clang::CXXBaseSpecifier *> {
        // return self.bases();
        //} )
        .def("getNumVBases", (unsigned int (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getNumVBases  )
        //.def("vbases", []( clang::CXXRecordDecl& self) -> llvm::iterator_range<clang::CXXBaseSpecifier *> {
        // return self.vbases();
        //} )
        //.def("vbases", [](const clang::CXXRecordDecl& self) -> llvm::iterator_range<const clang::CXXBaseSpecifier *> {
        // return self.vbases();
        //} )
        .def("hasAnyDependentBases", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasAnyDependentBases  )
        //.def("methods", (llvm::iterator_range<clang::DeclContext::specific_decl_iterator<clang::CXXMethodDecl> > (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::methods  )
        //.def("ctors", (llvm::iterator_range<clang::DeclContext::specific_decl_iterator<clang::CXXConstructorDecl> > (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::ctors  )
        //.def("friends", (llvm::iterator_range<clang::CXXRecordDecl::friend_iterator> (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::friends  )
        .def("pushFriendDecl", (void (clang::CXXRecordDecl::*)(clang::FriendDecl *))&clang::CXXRecordDecl::pushFriendDecl  )
        .def("hasFriends", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasFriends  )
        .def("hasSimpleMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasSimpleMoveConstructor  )
        .def("hasSimpleMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasSimpleMoveAssignment  )
        .def("hasSimpleDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasSimpleDestructor  )
        .def("hasDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasDefaultConstructor  )
        .def("needsImplicitDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitDefaultConstructor  )
        .def("hasUserDeclaredConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredConstructor  )
        .def("hasUserProvidedDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserProvidedDefaultConstructor  )
        .def("hasUserDeclaredCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredCopyConstructor  )
        .def("needsImplicitCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitCopyConstructor  )
        .def("needsOverloadResolutionForCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForCopyConstructor  )
        .def("implicitCopyConstructorHasConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::implicitCopyConstructorHasConstParam  )
        .def("hasCopyConstructorWithConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasCopyConstructorWithConstParam  )
        .def("hasUserDeclaredMoveOperation", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredMoveOperation  )
        .def("hasUserDeclaredMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredMoveConstructor  )
        .def("hasMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasMoveConstructor  )
        .def("setImplicitMoveConstructorIsDeleted", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setImplicitMoveConstructorIsDeleted  )
        .def("needsImplicitMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitMoveConstructor  )
        .def("needsOverloadResolutionForMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForMoveConstructor  )
        .def("hasUserDeclaredCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredCopyAssignment  )
        .def("needsImplicitCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitCopyAssignment  )
        .def("needsOverloadResolutionForCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForCopyAssignment  )
        .def("implicitCopyAssignmentHasConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::implicitCopyAssignmentHasConstParam  )
        .def("hasCopyAssignmentWithConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasCopyAssignmentWithConstParam  )
        .def("hasUserDeclaredMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredMoveAssignment  )
        .def("hasMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasMoveAssignment  )
        .def("setImplicitMoveAssignmentIsDeleted", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setImplicitMoveAssignmentIsDeleted  )
        .def("needsImplicitMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitMoveAssignment  )
        .def("needsOverloadResolutionForMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForMoveAssignment  )
        .def("hasUserDeclaredDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredDestructor  )
        .def("needsImplicitDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitDestructor  )
        .def("needsOverloadResolutionForDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForDestructor  )
        .def("isLambda", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isLambda  )
        .def("isGenericLambda", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isGenericLambda  )
        .def("getLambdaCallOperator", (clang::CXXMethodDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaCallOperator , py::return_value_policy::reference_internal )
        .def("getLambdaStaticInvoker", (clang::CXXMethodDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaStaticInvoker , py::return_value_policy::reference_internal )
        //.def("getGenericLambdaTemplateParameterList", (clang::TemplateParameterList * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getGenericLambdaTemplateParameterList , py::return_value_policy::reference_internal )
        .def("getLambdaCaptureDefault", (clang::LambdaCaptureDefault (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaCaptureDefault  )
        //.def("captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::captures  )
        .def("removeConversion", (void (clang::CXXRecordDecl::*)(const clang::NamedDecl *))&clang::CXXRecordDecl::removeConversion  )
        //.def("getVisibleConversionFunctions", (llvm::iterator_range<clang::UnresolvedSetIterator> (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::getVisibleConversionFunctions  )
        .def("isAggregate", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isAggregate  )
        .def("hasInClassInitializer", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasInClassInitializer  )
        .def("hasUninitializedReferenceMember", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUninitializedReferenceMember  )
        .def("isPOD", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isPOD  )
        .def("isCLike", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isCLike  )
        .def("isEmpty", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isEmpty  )
        .def("isPolymorphic", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isPolymorphic  )
        .def("isAbstract", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isAbstract  )
        .def("isStandardLayout", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isStandardLayout  )
        .def("hasMutableFields", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasMutableFields  )
        .def("hasVariantMembers", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasVariantMembers  )
        .def("hasTrivialDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialDefaultConstructor  )
        .def("hasNonTrivialDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialDefaultConstructor  )
        .def("hasConstexprNonCopyMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasConstexprNonCopyMoveConstructor  )
        .def("defaultedDefaultConstructorIsConstexpr", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::defaultedDefaultConstructorIsConstexpr  )
        .def("hasConstexprDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasConstexprDefaultConstructor  )
        .def("hasTrivialCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialCopyConstructor  )
        .def("hasNonTrivialCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialCopyConstructor  )
        .def("hasTrivialMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialMoveConstructor  )
        .def("hasNonTrivialMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialMoveConstructor  )
        .def("hasTrivialCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialCopyAssignment  )
        .def("hasNonTrivialCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialCopyAssignment  )
        .def("hasTrivialMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialMoveAssignment  )
        .def("hasNonTrivialMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialMoveAssignment  )
        .def("hasTrivialDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialDestructor  )
        .def("hasNonTrivialDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialDestructor  )
        .def("allowConstDefaultInit", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::allowConstDefaultInit  )
        .def("hasIrrelevantDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasIrrelevantDestructor  )
        .def("hasNonLiteralTypeFieldsOrBases", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonLiteralTypeFieldsOrBases  )
        .def("hasInheritedConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasInheritedConstructor  )
        .def("hasInheritedAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasInheritedAssignment  )
        .def("isTriviallyCopyable", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isTriviallyCopyable  )
        .def("isTrivial", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isTrivial  )
        .def("isLiteral", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isLiteral  )
        .def("getInstantiatedFromMemberClass", (clang::CXXRecordDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getInstantiatedFromMemberClass , py::return_value_policy::reference_internal )
        //.def("getMemberSpecializationInfo", (clang::MemberSpecializationInfo * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getMemberSpecializationInfo , py::return_value_policy::reference_internal )
        .def("setInstantiationOfMemberClass", (void (clang::CXXRecordDecl::*)(clang::CXXRecordDecl *, clang::TemplateSpecializationKind))&clang::CXXRecordDecl::setInstantiationOfMemberClass  )
        .def("getDescribedClassTemplate", (clang::ClassTemplateDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getDescribedClassTemplate , py::return_value_policy::reference_internal )
        .def("setDescribedClassTemplate", (void (clang::CXXRecordDecl::*)(clang::ClassTemplateDecl *))&clang::CXXRecordDecl::setDescribedClassTemplate  )
        .def("getTemplateSpecializationKind", (clang::TemplateSpecializationKind (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getTemplateSpecializationKind  )
        .def("setTemplateSpecializationKind", (void (clang::CXXRecordDecl::*)(clang::TemplateSpecializationKind))&clang::CXXRecordDecl::setTemplateSpecializationKind  )
        .def("getTemplateInstantiationPattern", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getTemplateInstantiationPattern();
        } , py::return_value_policy::reference_internal)
        .def("getTemplateInstantiationPattern", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getTemplateInstantiationPattern();
        } , py::return_value_policy::reference_internal)
        .def("getDestructor", (clang::CXXDestructorDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getDestructor , py::return_value_policy::reference_internal )
        .def("isAnyDestructorNoReturn", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isAnyDestructorNoReturn  )
        .def("isLocalClass", [](const clang::CXXRecordDecl& self) -> const clang::FunctionDecl * {
         return self.isLocalClass();
        } , py::return_value_policy::reference_internal)
        .def("isLocalClass", []( clang::CXXRecordDecl& self) -> clang::FunctionDecl * {
         return self.isLocalClass();
        } , py::return_value_policy::reference_internal)
        .def("isCurrentInstantiation", (bool (clang::CXXRecordDecl::*)(const clang::DeclContext *) const)&clang::CXXRecordDecl::isCurrentInstantiation  )
        .def("isDerivedFrom", [](const clang::CXXRecordDecl& self, const clang::CXXRecordDecl * Base) -> bool {
         return self.isDerivedFrom(Base);
        } )
        //.def("isDerivedFrom", [](const clang::CXXRecordDecl& self, const clang::CXXRecordDecl * Base , clang::CXXBasePaths & Paths) -> bool {
        // return self.isDerivedFrom(Base, Paths);
        //} )
        .def("isVirtuallyDerivedFrom", (bool (clang::CXXRecordDecl::*)(const clang::CXXRecordDecl *) const)&clang::CXXRecordDecl::isVirtuallyDerivedFrom  )
        .def("isProvablyNotDerivedFrom", (bool (clang::CXXRecordDecl::*)(const clang::CXXRecordDecl *) const)&clang::CXXRecordDecl::isProvablyNotDerivedFrom  )
        //.def("forallBases", (bool (clang::CXXRecordDecl::*)(llvm::function_ref<bool (const clang::CXXRecordDecl *)>, bool) const)&clang::CXXRecordDecl::forallBases  )
        //.def("lookupInBases", (bool (clang::CXXRecordDecl::*)(llvm::function_ref<bool (const clang::CXXBaseSpecifier *, clang::CXXBasePath &)>, clang::CXXBasePaths &) const)&clang::CXXRecordDecl::lookupInBases  )
        //.def("getFinalOverriders", (void (clang::CXXRecordDecl::*)(clang::CXXFinalOverriderMap &) const)&clang::CXXRecordDecl::getFinalOverriders  )
        //.def("getIndirectPrimaryBases", (void (clang::CXXRecordDecl::*)(clang::CXXIndirectPrimaryBaseSet &) const)&clang::CXXRecordDecl::getIndirectPrimaryBases  )
        .def("viewInheritance", (void (clang::CXXRecordDecl::*)(clang::ASTContext &) const)&clang::CXXRecordDecl::viewInheritance  )
        .def("finishedDefaultedOrDeletedMember", (void (clang::CXXRecordDecl::*)(clang::CXXMethodDecl *))&clang::CXXRecordDecl::finishedDefaultedOrDeletedMember  )
        .def("completeDefinition", []( clang::CXXRecordDecl& self)  {
          self.completeDefinition();
        } )
        //.def("completeDefinition", []( clang::CXXRecordDecl& self, clang::CXXFinalOverriderMap * FinalOverriders)  {
        //  self.completeDefinition(FinalOverriders);
        //} )
        .def("mayBeAbstract", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::mayBeAbstract  )
        .def("getLambdaManglingNumber", (unsigned int (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaManglingNumber  )
        .def("getLambdaContextDecl", (clang::Decl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaContextDecl , py::return_value_policy::reference_internal )
        .def("setLambdaMangling", (void (clang::CXXRecordDecl::*)(unsigned int, clang::Decl *))&clang::CXXRecordDecl::setLambdaMangling  )
        //.def("getMSInheritanceModel", (clang::MSInheritanceAttr::Spelling (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getMSInheritanceModel  )
        //.def("calculateInheritanceModel", (clang::MSInheritanceAttr::Spelling (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::calculateInheritanceModel  )
        .def("nullFieldOffsetIsZero", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::nullFieldOffsetIsZero  )
        //.def("getMSVtorDispMode", (clang::MSVtorDispAttr::Mode (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getMSVtorDispMode  )
        .def("isDependentLambda", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isDependentLambda  )
        .def("getLambdaTypeInfo", (clang::TypeSourceInfo * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaTypeInfo , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::CXXMethodDecl, decl_deleter<clang::CXXMethodDecl>::type>(m, "CXXMethodDecl" , py::base<clang::FunctionDecl>())

        .def("isStatic", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isStatic  )
        .def("isInstance", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isInstance  )
        .def("isConst", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isConst  )
        .def("isVolatile", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isVolatile  )
        .def("isVirtual", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isVirtual  )
        .def("isUsualDeallocationFunction", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isUsualDeallocationFunction  )
        .def("isCopyAssignmentOperator", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isCopyAssignmentOperator  )
        .def("isMoveAssignmentOperator", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isMoveAssignmentOperator  )
        .def("getCanonicalDecl", []( clang::CXXMethodDecl& self) -> clang::CXXMethodDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXMethodDecl& self) -> const clang::CXXMethodDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::CXXMethodDecl& self) -> clang::CXXMethodDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::CXXMethodDecl& self) -> const clang::CXXMethodDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("isUserProvided", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isUserProvided  )
        .def("addOverriddenMethod", (void (clang::CXXMethodDecl::*)(const clang::CXXMethodDecl *))&clang::CXXMethodDecl::addOverriddenMethod  )
        .def("size_overridden_methods", (unsigned int (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::size_overridden_methods  )
        //.def("overridden_methods", (llvm::iterator_range<const clang::CXXMethodDecl *const *> (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::overridden_methods  )
        .def("getParent", [](const clang::CXXMethodDecl& self) -> const clang::CXXRecordDecl * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getParent", []( clang::CXXMethodDecl& self) -> clang::CXXRecordDecl * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getThisType", (clang::QualType (clang::CXXMethodDecl::*)(clang::ASTContext &) const)&clang::CXXMethodDecl::getThisType  )
        .def("getTypeQualifiers", (unsigned int (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::getTypeQualifiers  )
        .def("getRefQualifier", (clang::RefQualifierKind (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::getRefQualifier  )
        .def("hasInlineBody", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::hasInlineBody  )
        .def("isLambdaStaticInvoker", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isLambdaStaticInvoker  )
        .def("getCorrespondingMethodInClass", []( clang::CXXMethodDecl& self, const clang::CXXRecordDecl * RD , bool MayBeBase) -> clang::CXXMethodDecl * {
         return self.getCorrespondingMethodInClass(RD, MayBeBase);
        } , py::return_value_policy::reference_internal)
        .def("getCorrespondingMethodInClass", [](const clang::CXXMethodDecl& self, const clang::CXXRecordDecl * RD , bool MayBeBase) -> const clang::CXXMethodDecl * {
         return self.getCorrespondingMethodInClass(RD, MayBeBase);
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::CXXConstructorDecl, decl_deleter<clang::CXXConstructorDecl>::type>(m, "CXXConstructorDecl" , py::base<clang::CXXMethodDecl>())

        .def("isExplicitSpecified", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isExplicitSpecified  )
        .def("isExplicit", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isExplicit  )
        //.def("inits", []( clang::CXXConstructorDecl& self) -> llvm::iterator_range<clang::CXXCtorInitializer **> {
        // return self.inits();
        //} )
        //.def("inits", [](const clang::CXXConstructorDecl& self) -> llvm::iterator_range<clang::CXXCtorInitializer *const *> {
        // return self.inits();
        //} )
        .def("getNumCtorInitializers", (unsigned int (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::getNumCtorInitializers  )
        .def("setNumCtorInitializers", (void (clang::CXXConstructorDecl::*)(unsigned int))&clang::CXXConstructorDecl::setNumCtorInitializers  )
        .def("isDelegatingConstructor", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isDelegatingConstructor  )
        .def("getTargetConstructor", (clang::CXXConstructorDecl * (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::getTargetConstructor , py::return_value_policy::reference_internal )
        .def("isDefaultConstructor", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isDefaultConstructor  )
        .def("isCopyConstructor", [](const clang::CXXConstructorDecl& self, unsigned int & TypeQuals) -> bool {
         return self.isCopyConstructor(TypeQuals);
        } )
        .def("isCopyConstructor", [](const clang::CXXConstructorDecl& self) -> bool {
         return self.isCopyConstructor();
        } )
        .def("isMoveConstructor", [](const clang::CXXConstructorDecl& self, unsigned int & TypeQuals) -> bool {
         return self.isMoveConstructor(TypeQuals);
        } )
        .def("isMoveConstructor", [](const clang::CXXConstructorDecl& self) -> bool {
         return self.isMoveConstructor();
        } )
        .def("isCopyOrMoveConstructor", [](const clang::CXXConstructorDecl& self, unsigned int & TypeQuals) -> bool {
         return self.isCopyOrMoveConstructor(TypeQuals);
        } )
        .def("isCopyOrMoveConstructor", [](const clang::CXXConstructorDecl& self) -> bool {
         return self.isCopyOrMoveConstructor();
        } )
        .def("isConvertingConstructor", (bool (clang::CXXConstructorDecl::*)(bool) const)&clang::CXXConstructorDecl::isConvertingConstructor  )
        .def("isSpecializationCopyingObject", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isSpecializationCopyingObject  )
        .def("isInheritingConstructor", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isInheritingConstructor  )
        //.def("getInheritedConstructor", (clang::InheritedConstructor (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::getInheritedConstructor  )
        .def("getCanonicalDecl", []( clang::CXXConstructorDecl& self) -> clang::CXXConstructorDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXConstructorDecl& self) -> const clang::CXXConstructorDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::CXXDestructorDecl, decl_deleter<clang::CXXDestructorDecl>::type>(m, "CXXDestructorDecl" , py::base<clang::CXXMethodDecl>())

        .def("setOperatorDelete", (void (clang::CXXDestructorDecl::*)(clang::FunctionDecl *))&clang::CXXDestructorDecl::setOperatorDelete  )
        .def("getOperatorDelete", (const clang::FunctionDecl * (clang::CXXDestructorDecl::*)() const)&clang::CXXDestructorDecl::getOperatorDelete , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::CXXConversionDecl, decl_deleter<clang::CXXConversionDecl>::type>(m, "CXXConversionDecl" , py::base<clang::CXXMethodDecl>())

        .def("isExplicitSpecified", (bool (clang::CXXConversionDecl::*)() const)&clang::CXXConversionDecl::isExplicitSpecified  )
        .def("isExplicit", (bool (clang::CXXConversionDecl::*)() const)&clang::CXXConversionDecl::isExplicit  )
        .def("getConversionType", (clang::QualType (clang::CXXConversionDecl::*)() const)&clang::CXXConversionDecl::getConversionType  )
        .def("isLambdaToBlockPointerConversion", (bool (clang::CXXConversionDecl::*)() const)&clang::CXXConversionDecl::isLambdaToBlockPointerConversion  )
    ;

    py::class_<clang::LinkageSpecDecl, decl_deleter<clang::LinkageSpecDecl>::type>(m, "LinkageSpecDecl" , py::base<clang::Decl>())

        .def("getLanguage", (clang::LinkageSpecDecl::LanguageIDs (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getLanguage  )
        .def("setLanguage", (void (clang::LinkageSpecDecl::*)(clang::LinkageSpecDecl::LanguageIDs))&clang::LinkageSpecDecl::setLanguage  )
        .def("hasBraces", (bool (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::hasBraces  )
        .def("getExternLoc", (clang::SourceLocation (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getExternLoc  )
        .def("getRBraceLoc", (clang::SourceLocation (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getRBraceLoc  )
        .def("setExternLoc", (void (clang::LinkageSpecDecl::*)(clang::SourceLocation))&clang::LinkageSpecDecl::setExternLoc  )
        .def("setRBraceLoc", (void (clang::LinkageSpecDecl::*)(clang::SourceLocation))&clang::LinkageSpecDecl::setRBraceLoc  )
        .def("getLocEnd", (clang::SourceLocation (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getLocEnd  )
        .def("getSourceRange", (clang::SourceRange (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getSourceRange  )
    ;

    py::class_<clang::UsingDirectiveDecl, decl_deleter<clang::UsingDirectiveDecl>::type>(m, "UsingDirectiveDecl" , py::base<clang::NamedDecl>())

        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNominatedNamespaceAsWritten", []( clang::UsingDirectiveDecl& self) -> clang::NamedDecl * {
         return self.getNominatedNamespaceAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("getNominatedNamespaceAsWritten", [](const clang::UsingDirectiveDecl& self) -> const clang::NamedDecl * {
         return self.getNominatedNamespaceAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("getNominatedNamespace", []( clang::UsingDirectiveDecl& self) -> clang::NamespaceDecl * {
         return self.getNominatedNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getNominatedNamespace", [](const clang::UsingDirectiveDecl& self) -> const clang::NamespaceDecl * {
         return self.getNominatedNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getCommonAncestor", []( clang::UsingDirectiveDecl& self) -> clang::DeclContext * {
         return self.getCommonAncestor();
        } , py::return_value_policy::reference_internal)
        .def("getCommonAncestor", [](const clang::UsingDirectiveDecl& self) -> const clang::DeclContext * {
         return self.getCommonAncestor();
        } , py::return_value_policy::reference_internal)
        .def("getUsingLoc", (clang::SourceLocation (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getUsingLoc  )
        .def("getNamespaceKeyLocation", (clang::SourceLocation (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getNamespaceKeyLocation  )
        .def("getIdentLocation", (clang::SourceLocation (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getIdentLocation  )
        .def("getSourceRange", (clang::SourceRange (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getSourceRange  )
    ;

    py::class_<clang::NamespaceAliasDecl, decl_deleter<clang::NamespaceAliasDecl>::type>(m, "NamespaceAliasDecl" , py::base<clang::NamedDecl>())

        .def("getCanonicalDecl", []( clang::NamespaceAliasDecl& self) -> clang::NamespaceAliasDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::NamespaceAliasDecl& self) -> const clang::NamespaceAliasDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNamespace", []( clang::NamespaceAliasDecl& self) -> clang::NamespaceDecl * {
         return self.getNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getNamespace", [](const clang::NamespaceAliasDecl& self) -> const clang::NamespaceDecl * {
         return self.getNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getAliasLoc", (clang::SourceLocation (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getAliasLoc  )
        .def("getNamespaceLoc", (clang::SourceLocation (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getNamespaceLoc  )
        .def("getTargetNameLoc", (clang::SourceLocation (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getTargetNameLoc  )
        .def("getAliasedNamespace", (clang::NamedDecl * (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getAliasedNamespace , py::return_value_policy::reference_internal )
        .def("getSourceRange", (clang::SourceRange (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getSourceRange  )
    ;

    py::class_<clang::UsingShadowDecl, decl_deleter<clang::UsingShadowDecl>::type>(m, "UsingShadowDecl" , py::base<clang::NamedDecl>())

        .def("getCanonicalDecl", []( clang::UsingShadowDecl& self) -> clang::UsingShadowDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UsingShadowDecl& self) -> const clang::UsingShadowDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getTargetDecl", (clang::NamedDecl * (clang::UsingShadowDecl::*)() const)&clang::UsingShadowDecl::getTargetDecl , py::return_value_policy::reference_internal )
        .def("setTargetDecl", (void (clang::UsingShadowDecl::*)(clang::NamedDecl *))&clang::UsingShadowDecl::setTargetDecl  )
        .def("getUsingDecl", (clang::UsingDecl * (clang::UsingShadowDecl::*)() const)&clang::UsingShadowDecl::getUsingDecl , py::return_value_policy::reference_internal )
        .def("getNextUsingShadowDecl", (clang::UsingShadowDecl * (clang::UsingShadowDecl::*)() const)&clang::UsingShadowDecl::getNextUsingShadowDecl , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::UsingDecl, decl_deleter<clang::UsingDecl>::type>(m, "UsingDecl" , py::base<clang::NamedDecl>())

        .def("getUsingLoc", (clang::SourceLocation (clang::UsingDecl::*)() const)&clang::UsingDecl::getUsingLoc  )
        .def("setUsingLoc", (void (clang::UsingDecl::*)(clang::SourceLocation))&clang::UsingDecl::setUsingLoc  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UsingDecl::*)() const)&clang::UsingDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UsingDecl::*)() const)&clang::UsingDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::UsingDecl::*)() const)&clang::UsingDecl::getNameInfo  )
        .def("isAccessDeclaration", (bool (clang::UsingDecl::*)() const)&clang::UsingDecl::isAccessDeclaration  )
        .def("hasTypename", (bool (clang::UsingDecl::*)() const)&clang::UsingDecl::hasTypename  )
        .def("setTypename", (void (clang::UsingDecl::*)(bool))&clang::UsingDecl::setTypename  )
        //.def("shadows", (llvm::iterator_range<clang::UsingDecl::shadow_iterator> (clang::UsingDecl::*)() const)&clang::UsingDecl::shadows  )
        .def("shadow_size", (unsigned int (clang::UsingDecl::*)() const)&clang::UsingDecl::shadow_size  )
        .def("addShadowDecl", (void (clang::UsingDecl::*)(clang::UsingShadowDecl *))&clang::UsingDecl::addShadowDecl  )
        .def("removeShadowDecl", (void (clang::UsingDecl::*)(clang::UsingShadowDecl *))&clang::UsingDecl::removeShadowDecl  )
        .def("getSourceRange", (clang::SourceRange (clang::UsingDecl::*)() const)&clang::UsingDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::UsingDecl& self) -> clang::UsingDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UsingDecl& self) -> const clang::UsingDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::UnresolvedUsingValueDecl, decl_deleter<clang::UnresolvedUsingValueDecl>::type>(m, "UnresolvedUsingValueDecl" , py::base<clang::ValueDecl>())

        .def("getUsingLoc", (clang::SourceLocation (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getUsingLoc  )
        .def("setUsingLoc", (void (clang::UnresolvedUsingValueDecl::*)(clang::SourceLocation))&clang::UnresolvedUsingValueDecl::setUsingLoc  )
        .def("isAccessDeclaration", (bool (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::isAccessDeclaration  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getNameInfo  )
        .def("getSourceRange", (clang::SourceRange (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::UnresolvedUsingValueDecl& self) -> clang::UnresolvedUsingValueDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UnresolvedUsingValueDecl& self) -> const clang::UnresolvedUsingValueDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::UnresolvedUsingTypenameDecl, decl_deleter<clang::UnresolvedUsingTypenameDecl>::type>(m, "UnresolvedUsingTypenameDecl" , py::base<clang::TypeDecl>())

        .def("getUsingLoc", (clang::SourceLocation (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getUsingLoc  )
        .def("getTypenameLoc", (clang::SourceLocation (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getTypenameLoc  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getCanonicalDecl", []( clang::UnresolvedUsingTypenameDecl& self) -> clang::UnresolvedUsingTypenameDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UnresolvedUsingTypenameDecl& self) -> const clang::UnresolvedUsingTypenameDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::StaticAssertDecl, decl_deleter<clang::StaticAssertDecl>::type>(m, "StaticAssertDecl" , py::base<clang::Decl>())

        .def("getAssertExpr", []( clang::StaticAssertDecl& self) -> clang::Expr * {
         return self.getAssertExpr();
        } , py::return_value_policy::reference_internal)
        .def("getAssertExpr", [](const clang::StaticAssertDecl& self) -> const clang::Expr * {
         return self.getAssertExpr();
        } , py::return_value_policy::reference_internal)
        .def("getMessage", []( clang::StaticAssertDecl& self) -> clang::StringLiteral * {
         return self.getMessage();
        } , py::return_value_policy::reference_internal)
        .def("getMessage", [](const clang::StaticAssertDecl& self) -> const clang::StringLiteral * {
         return self.getMessage();
        } , py::return_value_policy::reference_internal)
        .def("isFailed", (bool (clang::StaticAssertDecl::*)() const)&clang::StaticAssertDecl::isFailed  )
        .def("getRParenLoc", (clang::SourceLocation (clang::StaticAssertDecl::*)() const)&clang::StaticAssertDecl::getRParenLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::StaticAssertDecl::*)() const)&clang::StaticAssertDecl::getSourceRange  )
    ;

    py::class_<clang::BindingDecl, decl_deleter<clang::BindingDecl>::type>(m, "BindingDecl" , py::base<clang::ValueDecl>())

        .def("getBinding", (clang::Expr * (clang::BindingDecl::*)() const)&clang::BindingDecl::getBinding , py::return_value_policy::reference_internal )
        .def("setBinding", (void (clang::BindingDecl::*)(clang::QualType, clang::Expr *))&clang::BindingDecl::setBinding  )
    ;

    py::class_<clang::DecompositionDecl, decl_deleter<clang::DecompositionDecl>::type>(m, "DecompositionDecl" , py::base<clang::VarDecl>())

        //.def("bindings", (llvm::ArrayRef<clang::BindingDecl *> (clang::DecompositionDecl::*)() const)&clang::DecompositionDecl::bindings  )
    ;

    py::class_<clang::MSPropertyDecl, decl_deleter<clang::MSPropertyDecl>::type>(m, "MSPropertyDecl" , py::base<clang::DeclaratorDecl>())

        .def("hasGetter", (bool (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::hasGetter  )
        //.def("getGetterId", (clang::IdentifierInfo * (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::getGetterId , py::return_value_policy::reference_internal )
        .def("hasSetter", (bool (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::hasSetter  )
        //.def("getSetterId", (clang::IdentifierInfo * (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::getSetterId , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::TemplateDecl, decl_deleter<clang::TemplateDecl>::type>(m, "TemplateDecl" , py::base<clang::NamedDecl>())

        //.def("getTemplateParameters", (clang::TemplateParameterList * (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getTemplateParameters , py::return_value_policy::reference_internal )
        .def("getTemplatedDecl", (clang::NamedDecl * (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("getSourceRange", (clang::SourceRange (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getSourceRange  )
        .def("isConcept", (bool (clang::TemplateDecl::*)() const)&clang::TemplateDecl::isConcept  )
        .def("setConcept", (void (clang::TemplateDecl::*)())&clang::TemplateDecl::setConcept  )
        //.def("init", (void (clang::TemplateDecl::*)(clang::NamedDecl *, clang::TemplateParameterList *))&clang::TemplateDecl::init  )
    ;

    py::class_<clang::RedeclarableTemplateDecl, decl_deleter<clang::RedeclarableTemplateDecl>::type>(m, "RedeclarableTemplateDecl" , py::base<clang::TemplateDecl>())

        .def("getCanonicalDecl", []( clang::RedeclarableTemplateDecl& self) -> clang::RedeclarableTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::RedeclarableTemplateDecl& self) -> const clang::RedeclarableTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("isMemberSpecialization", (bool (clang::RedeclarableTemplateDecl::*)() const)&clang::RedeclarableTemplateDecl::isMemberSpecialization  )
        .def("setMemberSpecialization", (void (clang::RedeclarableTemplateDecl::*)())&clang::RedeclarableTemplateDecl::setMemberSpecialization  )
        .def("getInstantiatedFromMemberTemplate", (clang::RedeclarableTemplateDecl * (clang::RedeclarableTemplateDecl::*)() const)&clang::RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromMemberTemplate", (void (clang::RedeclarableTemplateDecl::*)(clang::RedeclarableTemplateDecl *))&clang::RedeclarableTemplateDecl::setInstantiatedFromMemberTemplate  )
    ;

    py::class_<clang::FunctionTemplateDecl, decl_deleter<clang::FunctionTemplateDecl>::type>(m, "FunctionTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("LoadLazySpecializations", (void (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::LoadLazySpecializations  )
        .def("getTemplatedDecl", (clang::FunctionDecl * (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("isThisDeclarationADefinition", (bool (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::isThisDeclarationADefinition  )
        .def("getCanonicalDecl", []( clang::FunctionTemplateDecl& self) -> clang::FunctionTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::FunctionTemplateDecl& self) -> const clang::FunctionTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::FunctionTemplateDecl& self) -> clang::FunctionTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::FunctionTemplateDecl& self) -> const clang::FunctionTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::FunctionTemplateDecl& self) -> clang::FunctionTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::FunctionTemplateDecl& self) -> const clang::FunctionTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::FunctionTemplateDecl * (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        //.def("specializations", (llvm::iterator_range<clang::RedeclarableTemplateDecl::SpecIterator<clang::FunctionTemplateSpecializationInfo, clang::RedeclarableTemplateDecl::SpecEntryTraits<clang::FunctionTemplateSpecializationInfo>, clang::FunctionDecl> > (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::specializations  )
        //.def("getInjectedTemplateArgs", (llvm::ArrayRef<clang::TemplateArgument> (clang::FunctionTemplateDecl::*)())&clang::FunctionTemplateDecl::getInjectedTemplateArgs  )
    ;

    py::class_<clang::TemplateTypeParmDecl, decl_deleter<clang::TemplateTypeParmDecl>::type>(m, "TemplateTypeParmDecl" , py::base<clang::TypeDecl>())

        .def("wasDeclaredWithTypename", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::wasDeclaredWithTypename  )
        //.def("getDefaultArgStorage", (const clang::DefaultArgStorage<clang::TemplateTypeParmDecl, clang::TypeSourceInfo *> & (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgStorage  )
        .def("hasDefaultArgument", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::hasDefaultArgument  )
        .def("getDefaultArgument", (clang::QualType (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgument  )
        .def("getDefaultArgumentInfo", (clang::TypeSourceInfo * (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgumentInfo , py::return_value_policy::reference_internal )
        .def("getDefaultArgumentLoc", (clang::SourceLocation (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgumentLoc  )
        .def("defaultArgumentWasInherited", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::defaultArgumentWasInherited  )
        .def("setDefaultArgument", (void (clang::TemplateTypeParmDecl::*)(clang::TypeSourceInfo *))&clang::TemplateTypeParmDecl::setDefaultArgument  )
        .def("setInheritedDefaultArgument", (void (clang::TemplateTypeParmDecl::*)(const clang::ASTContext &, clang::TemplateTypeParmDecl *))&clang::TemplateTypeParmDecl::setInheritedDefaultArgument  )
        .def("removeDefaultArgument", (void (clang::TemplateTypeParmDecl::*)())&clang::TemplateTypeParmDecl::removeDefaultArgument  )
        .def("setDeclaredWithTypename", (void (clang::TemplateTypeParmDecl::*)(bool))&clang::TemplateTypeParmDecl::setDeclaredWithTypename  )
        .def("getDepth", (unsigned int (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDepth  )
        .def("getIndex", (unsigned int (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getIndex  )
        .def("isParameterPack", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::isParameterPack  )
        .def("getSourceRange", (clang::SourceRange (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getSourceRange  )
    ;

    py::class_<clang::NonTypeTemplateParmDecl, decl_deleter<clang::NonTypeTemplateParmDecl>::type>(m, "NonTypeTemplateParmDecl" , py::base<clang::DeclaratorDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getSourceRange  )
        //.def("getDefaultArgStorage", (const clang::DefaultArgStorage<clang::NonTypeTemplateParmDecl, clang::Expr *> & (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getDefaultArgStorage  )
        .def("hasDefaultArgument", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::hasDefaultArgument  )
        .def("getDefaultArgument", (clang::Expr * (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getDefaultArgument , py::return_value_policy::reference_internal )
        .def("getDefaultArgumentLoc", (clang::SourceLocation (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getDefaultArgumentLoc  )
        .def("defaultArgumentWasInherited", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::defaultArgumentWasInherited  )
        .def("setDefaultArgument", (void (clang::NonTypeTemplateParmDecl::*)(clang::Expr *))&clang::NonTypeTemplateParmDecl::setDefaultArgument  )
        .def("setInheritedDefaultArgument", (void (clang::NonTypeTemplateParmDecl::*)(const clang::ASTContext &, clang::NonTypeTemplateParmDecl *))&clang::NonTypeTemplateParmDecl::setInheritedDefaultArgument  )
        .def("removeDefaultArgument", (void (clang::NonTypeTemplateParmDecl::*)())&clang::NonTypeTemplateParmDecl::removeDefaultArgument  )
        .def("isParameterPack", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::isParameterPack  )
        .def("isPackExpansion", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::isPackExpansion  )
        .def("isExpandedParameterPack", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::isExpandedParameterPack  )
        .def("getNumExpansionTypes", (unsigned int (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getNumExpansionTypes  )
        .def("getExpansionType", (clang::QualType (clang::NonTypeTemplateParmDecl::*)(unsigned int) const)&clang::NonTypeTemplateParmDecl::getExpansionType  )
        .def("getExpansionTypeSourceInfo", (clang::TypeSourceInfo * (clang::NonTypeTemplateParmDecl::*)(unsigned int) const)&clang::NonTypeTemplateParmDecl::getExpansionTypeSourceInfo , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::TemplateTemplateParmDecl, decl_deleter<clang::TemplateTemplateParmDecl>::type>(m, "TemplateTemplateParmDecl" , py::base<clang::TemplateDecl>())

        .def("isParameterPack", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::isParameterPack  )
        .def("isPackExpansion", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::isPackExpansion  )
        .def("isExpandedParameterPack", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::isExpandedParameterPack  )
        .def("getNumExpansionTemplateParameters", (unsigned int (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getNumExpansionTemplateParameters  )
        //.def("getExpansionTemplateParameters", (clang::TemplateParameterList * (clang::TemplateTemplateParmDecl::*)(unsigned int) const)&clang::TemplateTemplateParmDecl::getExpansionTemplateParameters , py::return_value_policy::reference_internal )
        //.def("getDefaultArgStorage", (const clang::DefaultArgStorage<clang::TemplateTemplateParmDecl, clang::TemplateArgumentLoc *> & (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getDefaultArgStorage  )
        .def("hasDefaultArgument", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::hasDefaultArgument  )
        //.def("getDefaultArgument", (const clang::TemplateArgumentLoc & (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getDefaultArgument  )
        .def("getDefaultArgumentLoc", (clang::SourceLocation (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getDefaultArgumentLoc  )
        .def("defaultArgumentWasInherited", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::defaultArgumentWasInherited  )
        //.def("setDefaultArgument", (void (clang::TemplateTemplateParmDecl::*)(const clang::ASTContext &, const clang::TemplateArgumentLoc &))&clang::TemplateTemplateParmDecl::setDefaultArgument  )
        .def("setInheritedDefaultArgument", (void (clang::TemplateTemplateParmDecl::*)(const clang::ASTContext &, clang::TemplateTemplateParmDecl *))&clang::TemplateTemplateParmDecl::setInheritedDefaultArgument  )
        .def("removeDefaultArgument", (void (clang::TemplateTemplateParmDecl::*)())&clang::TemplateTemplateParmDecl::removeDefaultArgument  )
        .def("getSourceRange", (clang::SourceRange (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getSourceRange  )
    ;

    py::class_<clang::BuiltinTemplateDecl, decl_deleter<clang::BuiltinTemplateDecl>::type>(m, "BuiltinTemplateDecl" , py::base<clang::TemplateDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::BuiltinTemplateDecl::*)() const)&clang::BuiltinTemplateDecl::getSourceRange  )
        .def("getBuiltinTemplateKind", (clang::BuiltinTemplateKind (clang::BuiltinTemplateDecl::*)() const)&clang::BuiltinTemplateDecl::getBuiltinTemplateKind  )
    ;

    py::class_<clang::ClassTemplateSpecializationDecl, decl_deleter<clang::ClassTemplateSpecializationDecl>::type>(m, "ClassTemplateSpecializationDecl" , py::base<clang::CXXRecordDecl>())

        //.def("getNameForDiagnostic", (void (clang::ClassTemplateSpecializationDecl::*)(llvm::raw_ostream &, const clang::PrintingPolicy &, bool) const)&clang::ClassTemplateSpecializationDecl::getNameForDiagnostic  )
        .def("getMostRecentDecl", (clang::ClassTemplateSpecializationDecl * (clang::ClassTemplateSpecializationDecl::*)())&clang::ClassTemplateSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        .def("getSpecializedTemplate", (clang::ClassTemplateDecl * (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSpecializedTemplate , py::return_value_policy::reference_internal )
        //.def("getTemplateArgs", (const clang::TemplateArgumentList & (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTemplateArgs  )
        .def("getSpecializationKind", (clang::TemplateSpecializationKind (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSpecializationKind  )
        .def("isExplicitSpecialization", (bool (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::isExplicitSpecialization  )
        .def("isExplicitInstantiationOrSpecialization", (bool (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization  )
        .def("setSpecializationKind", (void (clang::ClassTemplateSpecializationDecl::*)(clang::TemplateSpecializationKind))&clang::ClassTemplateSpecializationDecl::setSpecializationKind  )
        .def("getPointOfInstantiation", (clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getPointOfInstantiation  )
        .def("setPointOfInstantiation", (void (clang::ClassTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::ClassTemplateSpecializationDecl::setPointOfInstantiation  )
        //.def("getInstantiatedFrom", (llvm::PointerUnion<clang::ClassTemplateDecl *, clang::ClassTemplatePartialSpecializationDecl *> (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getInstantiatedFrom  )
        //.def("getSpecializedTemplateOrPartial", (llvm::PointerUnion<clang::ClassTemplateDecl *, clang::ClassTemplatePartialSpecializationDecl *> (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSpecializedTemplateOrPartial  )
        //.def("getTemplateInstantiationArgs", (const clang::TemplateArgumentList & (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTemplateInstantiationArgs  )
        //.def("setInstantiationOf", []( clang::ClassTemplateSpecializationDecl& self, clang::ClassTemplatePartialSpecializationDecl * PartialSpec , const clang::TemplateArgumentList * TemplateArgs)  {
        //  self.setInstantiationOf(PartialSpec, TemplateArgs);
        //} )
        .def("setInstantiationOf", []( clang::ClassTemplateSpecializationDecl& self, clang::ClassTemplateDecl * TemplDecl)  {
          self.setInstantiationOf(TemplDecl);
        } )
        .def("setTypeAsWritten", (void (clang::ClassTemplateSpecializationDecl::*)(clang::TypeSourceInfo *))&clang::ClassTemplateSpecializationDecl::setTypeAsWritten  )
        .def("getTypeAsWritten", (clang::TypeSourceInfo * (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTypeAsWritten , py::return_value_policy::reference_internal )
        .def("getExternLoc", (clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getExternLoc  )
        .def("setExternLoc", (void (clang::ClassTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::ClassTemplateSpecializationDecl::setExternLoc  )
        .def("setTemplateKeywordLoc", (void (clang::ClassTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::ClassTemplateSpecializationDecl::setTemplateKeywordLoc  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTemplateKeywordLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSourceRange  )
        //.def("Profile", [](const clang::ClassTemplateSpecializationDecl& self, llvm::FoldingSetNodeID & ID)  {
        //  self.Profile(ID);
        //} )
    ;

    py::class_<clang::ClassTemplatePartialSpecializationDecl, decl_deleter<clang::ClassTemplatePartialSpecializationDecl>::type>(m, "ClassTemplatePartialSpecializationDecl" , py::base<clang::ClassTemplateSpecializationDecl>())

        .def("getMostRecentDecl", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplatePartialSpecializationDecl::*)())&clang::ClassTemplatePartialSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        //.def("getTemplateParameters", (clang::TemplateParameterList * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getTemplateParameters , py::return_value_policy::reference_internal )
        //.def("getTemplateArgsAsWritten", (const clang::ASTTemplateArgumentListInfo * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getTemplateArgsAsWritten , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromMember", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getInstantiatedFromMember , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromMemberTemplate", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromMember", (void (clang::ClassTemplatePartialSpecializationDecl::*)(clang::ClassTemplatePartialSpecializationDecl *))&clang::ClassTemplatePartialSpecializationDecl::setInstantiatedFromMember  )
        .def("isMemberSpecialization", (bool (clang::ClassTemplatePartialSpecializationDecl::*)())&clang::ClassTemplatePartialSpecializationDecl::isMemberSpecialization  )
        .def("setMemberSpecialization", (void (clang::ClassTemplatePartialSpecializationDecl::*)())&clang::ClassTemplatePartialSpecializationDecl::setMemberSpecialization  )
        .def("getInjectedSpecializationType", (clang::QualType (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getInjectedSpecializationType  )
    ;

    py::class_<clang::ClassTemplateDecl, decl_deleter<clang::ClassTemplateDecl>::type>(m, "ClassTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("LoadLazySpecializations", (void (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::LoadLazySpecializations  )
        .def("getTemplatedDecl", (clang::CXXRecordDecl * (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("isThisDeclarationADefinition", (bool (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::isThisDeclarationADefinition  )
        .def("AddSpecialization", (void (clang::ClassTemplateDecl::*)(clang::ClassTemplateSpecializationDecl *, void *))&clang::ClassTemplateDecl::AddSpecialization  )
        .def("getCanonicalDecl", []( clang::ClassTemplateDecl& self) -> clang::ClassTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::ClassTemplateDecl& self) -> const clang::ClassTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::ClassTemplateDecl& self) -> clang::ClassTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::ClassTemplateDecl& self) -> const clang::ClassTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::ClassTemplateDecl& self) -> clang::ClassTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::ClassTemplateDecl& self) -> const clang::ClassTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::ClassTemplateDecl * (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        .def("AddPartialSpecialization", (void (clang::ClassTemplateDecl::*)(clang::ClassTemplatePartialSpecializationDecl *, void *))&clang::ClassTemplateDecl::AddPartialSpecialization  )
        //.def("getPartialSpecializations", []( clang::ClassTemplateDecl& self, llvm::SmallVectorImpl<clang::ClassTemplatePartialSpecializationDecl *> & PS)  {
        //  self.getPartialSpecializations(PS);
        //} )
        .def("findPartialSpecialization", []( clang::ClassTemplateDecl& self, clang::QualType T) -> clang::ClassTemplatePartialSpecializationDecl * {
         return self.findPartialSpecialization(T);
        } , py::return_value_policy::reference_internal)
        .def("findPartialSpecInstantiatedFromMember", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplateDecl::*)(clang::ClassTemplatePartialSpecializationDecl *))&clang::ClassTemplateDecl::findPartialSpecInstantiatedFromMember , py::return_value_policy::reference_internal )
        .def("getInjectedClassNameSpecialization", (clang::QualType (clang::ClassTemplateDecl::*)())&clang::ClassTemplateDecl::getInjectedClassNameSpecialization  )
        //.def("specializations", (llvm::iterator_range<clang::RedeclarableTemplateDecl::SpecIterator<clang::ClassTemplateSpecializationDecl, clang::RedeclarableTemplateDecl::SpecEntryTraits<clang::ClassTemplateSpecializationDecl>, clang::ClassTemplateSpecializationDecl> > (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::specializations  )
    ;

    py::class_<clang::FriendTemplateDecl, decl_deleter<clang::FriendTemplateDecl>::type>(m, "FriendTemplateDecl" , py::base<clang::Decl>())

        .def("getFriendType", (clang::TypeSourceInfo * (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getFriendType , py::return_value_policy::reference_internal )
        .def("getFriendDecl", (clang::NamedDecl * (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getFriendDecl , py::return_value_policy::reference_internal )
        .def("getFriendLoc", (clang::SourceLocation (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getFriendLoc  )
        //.def("getTemplateParameterList", (clang::TemplateParameterList * (clang::FriendTemplateDecl::*)(unsigned int) const)&clang::FriendTemplateDecl::getTemplateParameterList , py::return_value_policy::reference_internal )
        .def("getNumTemplateParameters", (unsigned int (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getNumTemplateParameters  )
    ;

    py::class_<clang::TypeAliasTemplateDecl, decl_deleter<clang::TypeAliasTemplateDecl>::type>(m, "TypeAliasTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("getTemplatedDecl", (clang::TypeAliasDecl * (clang::TypeAliasTemplateDecl::*)() const)&clang::TypeAliasTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("getCanonicalDecl", []( clang::TypeAliasTemplateDecl& self) -> clang::TypeAliasTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::TypeAliasTemplateDecl& self) -> const clang::TypeAliasTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::TypeAliasTemplateDecl& self) -> clang::TypeAliasTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::TypeAliasTemplateDecl& self) -> const clang::TypeAliasTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::TypeAliasTemplateDecl * (clang::TypeAliasTemplateDecl::*)() const)&clang::TypeAliasTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::ClassScopeFunctionSpecializationDecl, decl_deleter<clang::ClassScopeFunctionSpecializationDecl>::type>(m, "ClassScopeFunctionSpecializationDecl" , py::base<clang::Decl>())

        .def("getSpecialization", (clang::CXXMethodDecl * (clang::ClassScopeFunctionSpecializationDecl::*)() const)&clang::ClassScopeFunctionSpecializationDecl::getSpecialization , py::return_value_policy::reference_internal )
        .def("hasExplicitTemplateArgs", (bool (clang::ClassScopeFunctionSpecializationDecl::*)() const)&clang::ClassScopeFunctionSpecializationDecl::hasExplicitTemplateArgs  )
        //.def("templateArgs", (const clang::TemplateArgumentListInfo & (clang::ClassScopeFunctionSpecializationDecl::*)() const)&clang::ClassScopeFunctionSpecializationDecl::templateArgs  )
    ;

    py::class_<clang::VarTemplateSpecializationDecl, decl_deleter<clang::VarTemplateSpecializationDecl>::type>(m, "VarTemplateSpecializationDecl" , py::base<clang::VarDecl>())

        //.def("getNameForDiagnostic", (void (clang::VarTemplateSpecializationDecl::*)(llvm::raw_ostream &, const clang::PrintingPolicy &, bool) const)&clang::VarTemplateSpecializationDecl::getNameForDiagnostic  )
        .def("getMostRecentDecl", (clang::VarTemplateSpecializationDecl * (clang::VarTemplateSpecializationDecl::*)())&clang::VarTemplateSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        .def("getSpecializedTemplate", (clang::VarTemplateDecl * (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getSpecializedTemplate , py::return_value_policy::reference_internal )
        //.def("getTemplateArgs", (const clang::TemplateArgumentList & (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateArgs  )
        //.def("setTemplateArgsInfo", (void (clang::VarTemplateSpecializationDecl::*)(const clang::TemplateArgumentListInfo &))&clang::VarTemplateSpecializationDecl::setTemplateArgsInfo  )
        //.def("getTemplateArgsInfo", (const clang::TemplateArgumentListInfo & (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateArgsInfo  )
        .def("getSpecializationKind", (clang::TemplateSpecializationKind (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getSpecializationKind  )
        .def("isExplicitSpecialization", (bool (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::isExplicitSpecialization  )
        .def("isExplicitInstantiationOrSpecialization", (bool (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization  )
        .def("setSpecializationKind", (void (clang::VarTemplateSpecializationDecl::*)(clang::TemplateSpecializationKind))&clang::VarTemplateSpecializationDecl::setSpecializationKind  )
        .def("getPointOfInstantiation", (clang::SourceLocation (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getPointOfInstantiation  )
        .def("setPointOfInstantiation", (void (clang::VarTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::VarTemplateSpecializationDecl::setPointOfInstantiation  )
        //.def("getInstantiatedFrom", (llvm::PointerUnion<clang::VarTemplateDecl *, clang::VarTemplatePartialSpecializationDecl *> (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getInstantiatedFrom  )
        //.def("getSpecializedTemplateOrPartial", (llvm::PointerUnion<clang::VarTemplateDecl *, clang::VarTemplatePartialSpecializationDecl *> (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getSpecializedTemplateOrPartial  )
        //.def("getTemplateInstantiationArgs", (const clang::TemplateArgumentList & (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateInstantiationArgs  )
        //.def("setInstantiationOf", []( clang::VarTemplateSpecializationDecl& self, clang::VarTemplatePartialSpecializationDecl * PartialSpec , const clang::TemplateArgumentList * TemplateArgs)  {
        //  self.setInstantiationOf(PartialSpec, TemplateArgs);
        //} )
        .def("setInstantiationOf", []( clang::VarTemplateSpecializationDecl& self, clang::VarTemplateDecl * TemplDecl)  {
          self.setInstantiationOf(TemplDecl);
        } )
        .def("setTypeAsWritten", (void (clang::VarTemplateSpecializationDecl::*)(clang::TypeSourceInfo *))&clang::VarTemplateSpecializationDecl::setTypeAsWritten  )
        .def("getTypeAsWritten", (clang::TypeSourceInfo * (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTypeAsWritten , py::return_value_policy::reference_internal )
        .def("getExternLoc", (clang::SourceLocation (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getExternLoc  )
        .def("setExternLoc", (void (clang::VarTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::VarTemplateSpecializationDecl::setExternLoc  )
        .def("setTemplateKeywordLoc", (void (clang::VarTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::VarTemplateSpecializationDecl::setTemplateKeywordLoc  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateKeywordLoc  )
        //.def("Profile", [](const clang::VarTemplateSpecializationDecl& self, llvm::FoldingSetNodeID & ID)  {
        //  self.Profile(ID);
        //} )
    ;

    py::class_<clang::VarTemplatePartialSpecializationDecl, decl_deleter<clang::VarTemplatePartialSpecializationDecl>::type>(m, "VarTemplatePartialSpecializationDecl" , py::base<clang::VarTemplateSpecializationDecl>())

        .def("getMostRecentDecl", (clang::VarTemplatePartialSpecializationDecl * (clang::VarTemplatePartialSpecializationDecl::*)())&clang::VarTemplatePartialSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        //.def("getTemplateParameters", (clang::TemplateParameterList * (clang::VarTemplatePartialSpecializationDecl::*)() const)&clang::VarTemplatePartialSpecializationDecl::getTemplateParameters , py::return_value_policy::reference_internal )
        //.def("getTemplateArgsAsWritten", (const clang::ASTTemplateArgumentListInfo * (clang::VarTemplatePartialSpecializationDecl::*)() const)&clang::VarTemplatePartialSpecializationDecl::getTemplateArgsAsWritten , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromMember", (clang::VarTemplatePartialSpecializationDecl * (clang::VarTemplatePartialSpecializationDecl::*)() const)&clang::VarTemplatePartialSpecializationDecl::getInstantiatedFromMember , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromMember", (void (clang::VarTemplatePartialSpecializationDecl::*)(clang::VarTemplatePartialSpecializationDecl *))&clang::VarTemplatePartialSpecializationDecl::setInstantiatedFromMember  )
        .def("isMemberSpecialization", (bool (clang::VarTemplatePartialSpecializationDecl::*)())&clang::VarTemplatePartialSpecializationDecl::isMemberSpecialization  )
        .def("setMemberSpecialization", (void (clang::VarTemplatePartialSpecializationDecl::*)())&clang::VarTemplatePartialSpecializationDecl::setMemberSpecialization  )
    ;

    py::class_<clang::VarTemplateDecl, decl_deleter<clang::VarTemplateDecl>::type>(m, "VarTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("LoadLazySpecializations", (void (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::LoadLazySpecializations  )
        .def("getTemplatedDecl", (clang::VarDecl * (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("isThisDeclarationADefinition", (bool (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::isThisDeclarationADefinition  )
        .def("getDefinition", (clang::VarTemplateDecl * (clang::VarTemplateDecl::*)())&clang::VarTemplateDecl::getDefinition , py::return_value_policy::reference_internal )
        .def("AddSpecialization", (void (clang::VarTemplateDecl::*)(clang::VarTemplateSpecializationDecl *, void *))&clang::VarTemplateDecl::AddSpecialization  )
        .def("getCanonicalDecl", []( clang::VarTemplateDecl& self) -> clang::VarTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::VarTemplateDecl& self) -> const clang::VarTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::VarTemplateDecl& self) -> clang::VarTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::VarTemplateDecl& self) -> const clang::VarTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::VarTemplateDecl& self) -> clang::VarTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::VarTemplateDecl& self) -> const clang::VarTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::VarTemplateDecl * (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        .def("AddPartialSpecialization", (void (clang::VarTemplateDecl::*)(clang::VarTemplatePartialSpecializationDecl *, void *))&clang::VarTemplateDecl::AddPartialSpecialization  )
        //.def("getPartialSpecializations", []( clang::VarTemplateDecl& self, llvm::SmallVectorImpl<clang::VarTemplatePartialSpecializationDecl *> & PS)  {
        //  self.getPartialSpecializations(PS);
        //} )
        .def("findPartialSpecInstantiatedFromMember", (clang::VarTemplatePartialSpecializationDecl * (clang::VarTemplateDecl::*)(clang::VarTemplatePartialSpecializationDecl *))&clang::VarTemplateDecl::findPartialSpecInstantiatedFromMember , py::return_value_policy::reference_internal )
        //.def("specializations", (llvm::iterator_range<clang::RedeclarableTemplateDecl::SpecIterator<clang::VarTemplateSpecializationDecl, clang::RedeclarableTemplateDecl::SpecEntryTraits<clang::VarTemplateSpecializationDecl>, clang::VarTemplateSpecializationDecl> > (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::specializations  )
    ;

    py::class_<clang::CXXOperatorCallExpr, stmt_deleter<clang::CXXOperatorCallExpr>::type>(m, "CXXOperatorCallExpr" , py::base<clang::CallExpr>())

        .def("getOperator", (clang::OverloadedOperatorKind (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getOperator  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getOperatorLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getExprLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getLocEnd  )
        .def("getSourceRange", (clang::SourceRange (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getSourceRange  )
        .def("setFPContractable", (void (clang::CXXOperatorCallExpr::*)(bool))&clang::CXXOperatorCallExpr::setFPContractable  )
        .def("isFPContractable", (bool (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::isFPContractable  )
    ;

    py::class_<clang::CXXMemberCallExpr, stmt_deleter<clang::CXXMemberCallExpr>::type>(m, "CXXMemberCallExpr" , py::base<clang::CallExpr>())

        .def("getImplicitObjectArgument", (clang::Expr * (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getImplicitObjectArgument , py::return_value_policy::reference_internal )
        .def("getMethodDecl", (clang::CXXMethodDecl * (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getMethodDecl , py::return_value_policy::reference_internal )
        .def("getRecordDecl", (clang::CXXRecordDecl * (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getRecordDecl , py::return_value_policy::reference_internal )
        .def("getExprLoc", (clang::SourceLocation (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getExprLoc  )
    ;

    py::class_<clang::CUDAKernelCallExpr, stmt_deleter<clang::CUDAKernelCallExpr>::type>(m, "CUDAKernelCallExpr" , py::base<clang::CallExpr>())

        .def("getConfig", [](const clang::CUDAKernelCallExpr& self) -> const clang::CallExpr * {
         return self.getConfig();
        } , py::return_value_policy::reference_internal)
        .def("getConfig", []( clang::CUDAKernelCallExpr& self) -> clang::CallExpr * {
         return self.getConfig();
        } , py::return_value_policy::reference_internal)
        .def("setConfig", (void (clang::CUDAKernelCallExpr::*)(clang::CallExpr *))&clang::CUDAKernelCallExpr::setConfig  )
    ;
}
