
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 4.0.0-svn276543-1~exp1 (trunk)
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_4(pybind11::module& m)
{

    py::class_<clang::CXXForRangeStmt, stmt_deleter<clang::CXXForRangeStmt>::type>(m, "CXXForRangeStmt" , py::base<clang::Stmt>())

        .def("getLoopVariable", []( clang::CXXForRangeStmt& self) -> clang::VarDecl * {
         return self.getLoopVariable();
        } , py::return_value_policy::reference_internal)
        .def("getRangeInit", []( clang::CXXForRangeStmt& self) -> clang::Expr * {
         return self.getRangeInit();
        } , py::return_value_policy::reference_internal)
        .def("getLoopVariable", [](const clang::CXXForRangeStmt& self) -> const clang::VarDecl * {
         return self.getLoopVariable();
        } , py::return_value_policy::reference_internal)
        .def("getRangeInit", [](const clang::CXXForRangeStmt& self) -> const clang::Expr * {
         return self.getRangeInit();
        } , py::return_value_policy::reference_internal)
        .def("getRangeStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
         return self.getRangeStmt();
        } , py::return_value_policy::reference_internal)
        .def("getBeginStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
         return self.getBeginStmt();
        } , py::return_value_policy::reference_internal)
        .def("getEndStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
         return self.getEndStmt();
        } , py::return_value_policy::reference_internal)
        .def("getCond", []( clang::CXXForRangeStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getInc", []( clang::CXXForRangeStmt& self) -> clang::Expr * {
         return self.getInc();
        } , py::return_value_policy::reference_internal)
        .def("getLoopVarStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
         return self.getLoopVarStmt();
        } , py::return_value_policy::reference_internal)
        .def("getBody", []( clang::CXXForRangeStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getRangeStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
         return self.getRangeStmt();
        } , py::return_value_policy::reference_internal)
        .def("getBeginStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
         return self.getBeginStmt();
        } , py::return_value_policy::reference_internal)
        .def("getEndStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
         return self.getEndStmt();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::CXXForRangeStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getInc", [](const clang::CXXForRangeStmt& self) -> const clang::Expr * {
         return self.getInc();
        } , py::return_value_policy::reference_internal)
        .def("getLoopVarStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
         return self.getLoopVarStmt();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::CXXForRangeStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setRangeInit", (void (clang::CXXForRangeStmt::*)(clang::Expr *))&clang::CXXForRangeStmt::setRangeInit  )
        .def("setRangeStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setRangeStmt  )
        .def("setBeginStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setBeginStmt  )
        .def("setEndStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setEndStmt  )
        .def("setCond", (void (clang::CXXForRangeStmt::*)(clang::Expr *))&clang::CXXForRangeStmt::setCond  )
        .def("setInc", (void (clang::CXXForRangeStmt::*)(clang::Expr *))&clang::CXXForRangeStmt::setInc  )
        .def("setLoopVarStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setLoopVarStmt  )
        .def("setBody", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setBody  )
        .def("getForLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getForLoc  )
        .def("getCoawaitLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getCoawaitLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getColonLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXForRangeStmt::*)())&clang::CXXForRangeStmt::children  )
    ;

    py::class_<clang::MSDependentExistsStmt, stmt_deleter<clang::MSDependentExistsStmt>::type>(m, "MSDependentExistsStmt" , py::base<clang::Stmt>())

        .def("getKeywordLoc", (clang::SourceLocation (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getKeywordLoc  )
        .def("isIfExists", (bool (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::isIfExists  )
        .def("isIfNotExists", (bool (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::isIfNotExists  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getQualifierLoc  )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getNameInfo  )
        .def("getSubStmt", (clang::CompoundStmt * (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getSubStmt , py::return_value_policy::reference_internal )
        .def("getLocStart", (clang::SourceLocation (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSDependentExistsStmt::*)())&clang::MSDependentExistsStmt::children  )
    ;

    py::class_<clang::CoroutineBodyStmt, stmt_deleter<clang::CoroutineBodyStmt>::type>(m, "CoroutineBodyStmt" , py::base<clang::Stmt>())

        .def("getBody", (clang::Stmt * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getBody , py::return_value_policy::reference_internal )
        .def("getPromiseDeclStmt", (clang::Stmt * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getPromiseDeclStmt , py::return_value_policy::reference_internal )
        .def("getPromiseDecl", (clang::VarDecl * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getPromiseDecl , py::return_value_policy::reference_internal )
        .def("getInitSuspendStmt", (clang::Stmt * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getInitSuspendStmt , py::return_value_policy::reference_internal )
        .def("getFinalSuspendStmt", (clang::Stmt * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getFinalSuspendStmt , py::return_value_policy::reference_internal )
        .def("getExceptionHandler", (clang::Stmt * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getExceptionHandler , py::return_value_policy::reference_internal )
        .def("getFallthroughHandler", (clang::Stmt * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getFallthroughHandler , py::return_value_policy::reference_internal )
        .def("getReturnValueInit", (clang::Expr * (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getReturnValueInit , py::return_value_policy::reference_internal )
        .def("getLocStart", (clang::SourceLocation (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CoroutineBodyStmt::*)() const)&clang::CoroutineBodyStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CoroutineBodyStmt::*)())&clang::CoroutineBodyStmt::children  )
    ;

    py::class_<clang::CoreturnStmt, stmt_deleter<clang::CoreturnStmt>::type>(m, "CoreturnStmt" , py::base<clang::Stmt>())

        .def("getKeywordLoc", (clang::SourceLocation (clang::CoreturnStmt::*)() const)&clang::CoreturnStmt::getKeywordLoc  )
        .def("getOperand", (clang::Expr * (clang::CoreturnStmt::*)() const)&clang::CoreturnStmt::getOperand , py::return_value_policy::reference_internal )
        .def("getPromiseCall", (clang::Expr * (clang::CoreturnStmt::*)() const)&clang::CoreturnStmt::getPromiseCall , py::return_value_policy::reference_internal )
        .def("getLocStart", (clang::SourceLocation (clang::CoreturnStmt::*)() const)&clang::CoreturnStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CoreturnStmt::*)() const)&clang::CoreturnStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CoreturnStmt::*)())&clang::CoreturnStmt::children  )
    ;

    py::class_<clang::FriendDecl, decl_deleter<clang::FriendDecl>::type>(m, "FriendDecl" , py::base<clang::Decl>())

        .def("getFriendType", (clang::TypeSourceInfo * (clang::FriendDecl::*)() const)&clang::FriendDecl::getFriendType , py::return_value_policy::reference_internal )
        .def("getFriendTypeNumTemplateParameterLists", (unsigned int (clang::FriendDecl::*)() const)&clang::FriendDecl::getFriendTypeNumTemplateParameterLists  )
        //.def("getFriendTypeTemplateParameterList", (clang::TemplateParameterList * (clang::FriendDecl::*)(unsigned int) const)&clang::FriendDecl::getFriendTypeTemplateParameterList , py::return_value_policy::reference_internal )
        .def("getFriendDecl", (clang::NamedDecl * (clang::FriendDecl::*)() const)&clang::FriendDecl::getFriendDecl , py::return_value_policy::reference_internal )
        .def("getFriendLoc", (clang::SourceLocation (clang::FriendDecl::*)() const)&clang::FriendDecl::getFriendLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::FriendDecl::*)() const)&clang::FriendDecl::getSourceRange  )
    ;
}
