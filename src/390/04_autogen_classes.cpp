
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 3.9.0-svn274595-1~exp1 (trunk)
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_3(pybind11::module& m)
{

    py::class_<clang::CXXDynamicCastExpr, stmt_deleter<clang::CXXDynamicCastExpr>::type>(m, "CXXDynamicCastExpr" , py::base<clang::CXXNamedCastExpr>())

        .def("isAlwaysNull", (bool (clang::CXXDynamicCastExpr::*)() const)&clang::CXXDynamicCastExpr::isAlwaysNull)
    ;

    py::class_<clang::CXXReinterpretCastExpr, stmt_deleter<clang::CXXReinterpretCastExpr>::type>(m, "CXXReinterpretCastExpr" , py::base<clang::CXXNamedCastExpr>())

    ;

    py::class_<clang::CXXConstCastExpr, stmt_deleter<clang::CXXConstCastExpr>::type>(m, "CXXConstCastExpr" , py::base<clang::CXXNamedCastExpr>())

    ;

    py::class_<clang::UserDefinedLiteral, stmt_deleter<clang::UserDefinedLiteral>::type>(m, "UserDefinedLiteral" , py::base<clang::CallExpr>())

        .def("getLiteralOperatorKind", (clang::UserDefinedLiteral::LiteralOperatorKind (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getLiteralOperatorKind)
        .def("getCookedLiteral", []( clang::UserDefinedLiteral& self) -> clang::Expr * {
          return self.getCookedLiteral();
        })
        .def("getCookedLiteral", [](const clang::UserDefinedLiteral& self) -> const clang::Expr * {
          return self.getCookedLiteral();
        })
        .def("getLocStart", (clang::SourceLocation (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getLocEnd)
        .def("getUDSuffixLoc", (clang::SourceLocation (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getUDSuffixLoc)
        //.def("getUDSuffix", (const clang::IdentifierInfo * (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getUDSuffix)
    ;

    py::class_<clang::CXXBoolLiteralExpr, stmt_deleter<clang::CXXBoolLiteralExpr>::type>(m, "CXXBoolLiteralExpr" , py::base<clang::Expr>())

        .def("getValue", (bool (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getValue)
        .def("setValue", (void (clang::CXXBoolLiteralExpr::*)(bool))&clang::CXXBoolLiteralExpr::setValue)
        .def("getLocStart", (clang::SourceLocation (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getLocEnd)
        .def("getLocation", (clang::SourceLocation (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getLocation)
        .def("setLocation", (void (clang::CXXBoolLiteralExpr::*)(clang::SourceLocation))&clang::CXXBoolLiteralExpr::setLocation)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXBoolLiteralExpr::*)())&clang::CXXBoolLiteralExpr::children)
    ;

    py::class_<clang::CXXNullPtrLiteralExpr, stmt_deleter<clang::CXXNullPtrLiteralExpr>::type>(m, "CXXNullPtrLiteralExpr" , py::base<clang::Expr>())

        .def("getLocStart", (clang::SourceLocation (clang::CXXNullPtrLiteralExpr::*)() const)&clang::CXXNullPtrLiteralExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXNullPtrLiteralExpr::*)() const)&clang::CXXNullPtrLiteralExpr::getLocEnd)
        .def("getLocation", (clang::SourceLocation (clang::CXXNullPtrLiteralExpr::*)() const)&clang::CXXNullPtrLiteralExpr::getLocation)
        .def("setLocation", (void (clang::CXXNullPtrLiteralExpr::*)(clang::SourceLocation))&clang::CXXNullPtrLiteralExpr::setLocation)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXNullPtrLiteralExpr::*)())&clang::CXXNullPtrLiteralExpr::children)
    ;

    py::class_<clang::CXXStdInitializerListExpr, stmt_deleter<clang::CXXStdInitializerListExpr>::type>(m, "CXXStdInitializerListExpr" , py::base<clang::Expr>())

        .def("getSubExpr", []( clang::CXXStdInitializerListExpr& self) -> clang::Expr * {
          return self.getSubExpr();
        })
        .def("getSubExpr", [](const clang::CXXStdInitializerListExpr& self) -> const clang::Expr * {
          return self.getSubExpr();
        })
        .def("getLocStart", (clang::SourceLocation (clang::CXXStdInitializerListExpr::*)() const)&clang::CXXStdInitializerListExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXStdInitializerListExpr::*)() const)&clang::CXXStdInitializerListExpr::getLocEnd)
        .def("getSourceRange", (clang::SourceRange (clang::CXXStdInitializerListExpr::*)() const)&clang::CXXStdInitializerListExpr::getSourceRange)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXStdInitializerListExpr::*)())&clang::CXXStdInitializerListExpr::children)
    ;

    py::class_<clang::CXXTypeidExpr, stmt_deleter<clang::CXXTypeidExpr>::type>(m, "CXXTypeidExpr" , py::base<clang::Expr>())

        .def("isPotentiallyEvaluated", (bool (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::isPotentiallyEvaluated)
        .def("isTypeOperand", (bool (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::isTypeOperand)
        .def("getTypeOperand", (clang::QualType (clang::CXXTypeidExpr::*)(clang::ASTContext &) const)&clang::CXXTypeidExpr::getTypeOperand)
        .def("getTypeOperandSourceInfo", (clang::TypeSourceInfo * (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getTypeOperandSourceInfo)
        .def("setTypeOperandSourceInfo", (void (clang::CXXTypeidExpr::*)(clang::TypeSourceInfo *))&clang::CXXTypeidExpr::setTypeOperandSourceInfo)
        .def("getExprOperand", (clang::Expr * (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getExprOperand)
        .def("setExprOperand", (void (clang::CXXTypeidExpr::*)(clang::Expr *))&clang::CXXTypeidExpr::setExprOperand)
        .def("getLocStart", (clang::SourceLocation (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getLocEnd)
        .def("getSourceRange", (clang::SourceRange (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getSourceRange)
        .def("setSourceRange", (void (clang::CXXTypeidExpr::*)(clang::SourceRange))&clang::CXXTypeidExpr::setSourceRange)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXTypeidExpr::*)())&clang::CXXTypeidExpr::children)
    ;

    py::class_<clang::MSPropertyRefExpr, stmt_deleter<clang::MSPropertyRefExpr>::type>(m, "MSPropertyRefExpr" , py::base<clang::Expr>())

        .def("getSourceRange", (clang::SourceRange (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getSourceRange)
        .def("isImplicitAccess", (bool (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::isImplicitAccess)
        .def("getLocStart", (clang::SourceLocation (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSPropertyRefExpr::*)())&clang::MSPropertyRefExpr::children)
        .def("getBaseExpr", (clang::Expr * (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getBaseExpr)
        .def("getPropertyDecl", (clang::MSPropertyDecl * (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getPropertyDecl)
        .def("isArrow", (bool (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::isArrow)
        .def("getMemberLoc", (clang::SourceLocation (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getMemberLoc)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getQualifierLoc)
    ;

    py::class_<clang::MSPropertySubscriptExpr, stmt_deleter<clang::MSPropertySubscriptExpr>::type>(m, "MSPropertySubscriptExpr" , py::base<clang::Expr>())

        .def("getBase", []( clang::MSPropertySubscriptExpr& self) -> clang::Expr * {
          return self.getBase();
        })
        .def("getBase", [](const clang::MSPropertySubscriptExpr& self) -> const clang::Expr * {
          return self.getBase();
        })
        .def("getIdx", []( clang::MSPropertySubscriptExpr& self) -> clang::Expr * {
          return self.getIdx();
        })
        .def("getIdx", [](const clang::MSPropertySubscriptExpr& self) -> const clang::Expr * {
          return self.getIdx();
        })
        .def("getLocStart", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getLocEnd)
        .def("getRBracketLoc", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getRBracketLoc)
        .def("setRBracketLoc", (void (clang::MSPropertySubscriptExpr::*)(clang::SourceLocation))&clang::MSPropertySubscriptExpr::setRBracketLoc)
        .def("getExprLoc", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getExprLoc)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSPropertySubscriptExpr::*)())&clang::MSPropertySubscriptExpr::children)
    ;

    py::class_<clang::CXXUuidofExpr, stmt_deleter<clang::CXXUuidofExpr>::type>(m, "CXXUuidofExpr" , py::base<clang::Expr>())

        .def("isTypeOperand", (bool (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::isTypeOperand)
        .def("getTypeOperand", (clang::QualType (clang::CXXUuidofExpr::*)(clang::ASTContext &) const)&clang::CXXUuidofExpr::getTypeOperand)
        .def("getTypeOperandSourceInfo", (clang::TypeSourceInfo * (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getTypeOperandSourceInfo)
        .def("setTypeOperandSourceInfo", (void (clang::CXXUuidofExpr::*)(clang::TypeSourceInfo *))&clang::CXXUuidofExpr::setTypeOperandSourceInfo)
        .def("getExprOperand", (clang::Expr * (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getExprOperand)
        .def("setExprOperand", (void (clang::CXXUuidofExpr::*)(clang::Expr *))&clang::CXXUuidofExpr::setExprOperand)
        .def("setUuidStr", (void (clang::CXXUuidofExpr::*)(llvm::StringRef))&clang::CXXUuidofExpr::setUuidStr)
        .def("getUuidStr", (llvm::StringRef (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getUuidStr)
        .def("getLocStart", (clang::SourceLocation (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getLocEnd)
        .def("getSourceRange", (clang::SourceRange (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getSourceRange)
        .def("setSourceRange", (void (clang::CXXUuidofExpr::*)(clang::SourceRange))&clang::CXXUuidofExpr::setSourceRange)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXUuidofExpr::*)())&clang::CXXUuidofExpr::children)
    ;

    py::class_<clang::CXXThisExpr, stmt_deleter<clang::CXXThisExpr>::type>(m, "CXXThisExpr" , py::base<clang::Expr>())

        .def("getLocation", (clang::SourceLocation (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::getLocation)
        .def("setLocation", (void (clang::CXXThisExpr::*)(clang::SourceLocation))&clang::CXXThisExpr::setLocation)
        .def("getLocStart", (clang::SourceLocation (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::getLocEnd)
        .def("isImplicit", (bool (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::isImplicit)
        .def("setImplicit", (void (clang::CXXThisExpr::*)(bool))&clang::CXXThisExpr::setImplicit)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXThisExpr::*)())&clang::CXXThisExpr::children)
    ;

    py::class_<clang::CXXThrowExpr, stmt_deleter<clang::CXXThrowExpr>::type>(m, "CXXThrowExpr" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::CXXThrowExpr& self) -> const clang::Expr * {
          return self.getSubExpr();
        })
        .def("getSubExpr", []( clang::CXXThrowExpr& self) -> clang::Expr * {
          return self.getSubExpr();
        })
        .def("getThrowLoc", (clang::SourceLocation (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::getThrowLoc)
        .def("isThrownVariableInScope", (bool (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::isThrownVariableInScope)
        .def("getLocStart", (clang::SourceLocation (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXThrowExpr::*)())&clang::CXXThrowExpr::children)
    ;

    py::class_<clang::CXXDefaultArgExpr, stmt_deleter<clang::CXXDefaultArgExpr>::type>(m, "CXXDefaultArgExpr" , py::base<clang::Expr>())

        .def("getParam", [](const clang::CXXDefaultArgExpr& self) -> const clang::ParmVarDecl * {
          return self.getParam();
        })
        .def("getParam", []( clang::CXXDefaultArgExpr& self) -> clang::ParmVarDecl * {
          return self.getParam();
        })
        .def("getExpr", [](const clang::CXXDefaultArgExpr& self) -> const clang::Expr * {
          return self.getExpr();
        })
        .def("getExpr", []( clang::CXXDefaultArgExpr& self) -> clang::Expr * {
          return self.getExpr();
        })
        .def("getUsedLocation", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getUsedLocation)
        .def("getLocStart", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getLocEnd)
        .def("getExprLoc", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getExprLoc)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDefaultArgExpr::*)())&clang::CXXDefaultArgExpr::children)
    ;

    py::class_<clang::CXXDefaultInitExpr, stmt_deleter<clang::CXXDefaultInitExpr>::type>(m, "CXXDefaultInitExpr" , py::base<clang::Expr>())

        .def("getField", []( clang::CXXDefaultInitExpr& self) -> clang::FieldDecl * {
          return self.getField();
        })
        .def("getField", [](const clang::CXXDefaultInitExpr& self) -> const clang::FieldDecl * {
          return self.getField();
        })
        .def("getExpr", [](const clang::CXXDefaultInitExpr& self) -> const clang::Expr * {
          return self.getExpr();
        })
        .def("getExpr", []( clang::CXXDefaultInitExpr& self) -> clang::Expr * {
          return self.getExpr();
        })
        .def("getLocStart", (clang::SourceLocation (clang::CXXDefaultInitExpr::*)() const)&clang::CXXDefaultInitExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXDefaultInitExpr::*)() const)&clang::CXXDefaultInitExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDefaultInitExpr::*)())&clang::CXXDefaultInitExpr::children)
    ;

    py::class_<clang::CXXBindTemporaryExpr, stmt_deleter<clang::CXXBindTemporaryExpr>::type>(m, "CXXBindTemporaryExpr" , py::base<clang::Expr>())

        //.def("getTemporary", []( clang::CXXBindTemporaryExpr& self) -> clang::CXXTemporary * {
        //  return self.getTemporary();
        //})
        //.def("getTemporary", [](const clang::CXXBindTemporaryExpr& self) -> const clang::CXXTemporary * {
        //  return self.getTemporary();
        //})
        //.def("setTemporary", (void (clang::CXXBindTemporaryExpr::*)(clang::CXXTemporary *))&clang::CXXBindTemporaryExpr::setTemporary)
        .def("getSubExpr", [](const clang::CXXBindTemporaryExpr& self) -> const clang::Expr * {
          return self.getSubExpr();
        })
        .def("getSubExpr", []( clang::CXXBindTemporaryExpr& self) -> clang::Expr * {
          return self.getSubExpr();
        })
        .def("setSubExpr", (void (clang::CXXBindTemporaryExpr::*)(clang::Expr *))&clang::CXXBindTemporaryExpr::setSubExpr)
        .def("getLocStart", (clang::SourceLocation (clang::CXXBindTemporaryExpr::*)() const)&clang::CXXBindTemporaryExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXBindTemporaryExpr::*)() const)&clang::CXXBindTemporaryExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXBindTemporaryExpr::*)())&clang::CXXBindTemporaryExpr::children)
    ;

    py::class_<clang::CXXConstructExpr, stmt_deleter<clang::CXXConstructExpr>::type>(m, "CXXConstructExpr" , py::base<clang::Expr>())

        .def("getConstructor", (clang::CXXConstructorDecl * (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getConstructor)
        .def("getLocation", (clang::SourceLocation (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getLocation)
        .def("setLocation", (void (clang::CXXConstructExpr::*)(clang::SourceLocation))&clang::CXXConstructExpr::setLocation)
        .def("isElidable", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::isElidable)
        .def("setElidable", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setElidable)
        .def("hadMultipleCandidates", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::hadMultipleCandidates)
        .def("setHadMultipleCandidates", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setHadMultipleCandidates)
        .def("isListInitialization", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::isListInitialization)
        .def("setListInitialization", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setListInitialization)
        .def("isStdInitListInitialization", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::isStdInitListInitialization)
        .def("setStdInitListInitialization", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setStdInitListInitialization)
        .def("requiresZeroInitialization", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::requiresZeroInitialization)
        .def("setRequiresZeroInitialization", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setRequiresZeroInitialization)
        .def("getConstructionKind", (clang::CXXConstructExpr::ConstructionKind (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getConstructionKind)
        .def("setConstructionKind", (void (clang::CXXConstructExpr::*)(clang::CXXConstructExpr::ConstructionKind))&clang::CXXConstructExpr::setConstructionKind)
        //.def("arguments", []( clang::CXXConstructExpr& self) -> llvm::iterator_range<clang::Stmt::ExprIterator> {
        //  return self.arguments();
        //})
        //.def("arguments", [](const clang::CXXConstructExpr& self) -> llvm::iterator_range<clang::Stmt::ConstExprIterator> {
        //  return self.arguments();
        //})
        .def("getNumArgs", (unsigned int (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getNumArgs)
        .def("getArg", []( clang::CXXConstructExpr& self, unsigned int Arg) -> clang::Expr * {
          return self.getArg(Arg);
        })
        .def("getArg", [](const clang::CXXConstructExpr& self, unsigned int Arg) -> const clang::Expr * {
          return self.getArg(Arg);
        })
        .def("setArg", (void (clang::CXXConstructExpr::*)(unsigned int, clang::Expr *))&clang::CXXConstructExpr::setArg)
        .def("getLocStart", (clang::SourceLocation (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getLocEnd)
        .def("getParenOrBraceRange", (clang::SourceRange (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getParenOrBraceRange)
        .def("setParenOrBraceRange", (void (clang::CXXConstructExpr::*)(clang::SourceRange))&clang::CXXConstructExpr::setParenOrBraceRange)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXConstructExpr::*)())&clang::CXXConstructExpr::children)
    ;

    py::class_<clang::CXXInheritedCtorInitExpr, stmt_deleter<clang::CXXInheritedCtorInitExpr>::type>(m, "CXXInheritedCtorInitExpr" , py::base<clang::Expr>())

        .def("getConstructor", (clang::CXXConstructorDecl * (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getConstructor)
        .def("constructsVBase", (bool (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::constructsVBase)
        .def("getConstructionKind", (clang::CXXConstructExpr::ConstructionKind (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getConstructionKind)
        .def("inheritedFromVBase", (bool (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::inheritedFromVBase)
        .def("getLocation", (clang::SourceLocation (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getLocation)
        .def("getLocStart", (clang::SourceLocation (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXInheritedCtorInitExpr::*)())&clang::CXXInheritedCtorInitExpr::children)
    ;

    py::class_<clang::CXXFunctionalCastExpr, stmt_deleter<clang::CXXFunctionalCastExpr>::type>(m, "CXXFunctionalCastExpr" , py::base<clang::ExplicitCastExpr>())

        .def("getLParenLoc", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getLParenLoc)
        .def("setLParenLoc", (void (clang::CXXFunctionalCastExpr::*)(clang::SourceLocation))&clang::CXXFunctionalCastExpr::setLParenLoc)
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getRParenLoc)
        .def("setRParenLoc", (void (clang::CXXFunctionalCastExpr::*)(clang::SourceLocation))&clang::CXXFunctionalCastExpr::setRParenLoc)
        .def("getLocStart", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getLocEnd)
    ;

    py::class_<clang::CXXTemporaryObjectExpr, stmt_deleter<clang::CXXTemporaryObjectExpr>::type>(m, "CXXTemporaryObjectExpr" , py::base<clang::CXXConstructExpr>())

        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXTemporaryObjectExpr::*)() const)&clang::CXXTemporaryObjectExpr::getTypeSourceInfo)
        .def("getLocStart", (clang::SourceLocation (clang::CXXTemporaryObjectExpr::*)() const)&clang::CXXTemporaryObjectExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXTemporaryObjectExpr::*)() const)&clang::CXXTemporaryObjectExpr::getLocEnd)
    ;

    py::class_<clang::LambdaExpr, stmt_deleter<clang::LambdaExpr>::type>(m, "LambdaExpr" , py::base<clang::Expr>())

        .def("getCaptureDefault", (clang::LambdaCaptureDefault (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getCaptureDefault)
        .def("getCaptureDefaultLoc", (clang::SourceLocation (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getCaptureDefaultLoc)
        //.def("isInitCapture", (bool (clang::LambdaExpr::*)(const clang::LambdaCapture *) const)&clang::LambdaExpr::isInitCapture)
        //.def("captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::LambdaExpr::*)() const)&clang::LambdaExpr::captures)
        .def("capture_size", (unsigned int (clang::LambdaExpr::*)() const)&clang::LambdaExpr::capture_size)
        //.def("explicit_captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::LambdaExpr::*)() const)&clang::LambdaExpr::explicit_captures)
        //.def("implicit_captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::LambdaExpr::*)() const)&clang::LambdaExpr::implicit_captures)
        //.def("capture_inits", []( clang::LambdaExpr& self) -> llvm::iterator_range<clang::Expr **> {
        //  return self.capture_inits();
        //})
        //.def("capture_inits", [](const clang::LambdaExpr& self) -> llvm::iterator_range<clang::Expr *const *> {
        //  return self.capture_inits();
        //})
        //.def("getCaptureInitIndexVars", (llvm::ArrayRef<clang::VarDecl *> (clang::LambdaExpr::*)(clang::Expr *const *) const)&clang::LambdaExpr::getCaptureInitIndexVars)
        .def("getIntroducerRange", (clang::SourceRange (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getIntroducerRange)
        .def("getLambdaClass", (clang::CXXRecordDecl * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getLambdaClass)
        .def("getCallOperator", (clang::CXXMethodDecl * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getCallOperator)
        //.def("getTemplateParameterList", (clang::TemplateParameterList * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getTemplateParameterList)
        .def("isGenericLambda", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::isGenericLambda)
        .def("getBody", (clang::CompoundStmt * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getBody)
        .def("isMutable", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::isMutable)
        .def("hasExplicitParameters", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::hasExplicitParameters)
        .def("hasExplicitResultType", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::hasExplicitResultType)
        .def("getLocStart", (clang::SourceLocation (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::LambdaExpr::*)())&clang::LambdaExpr::children)
    ;

    py::class_<clang::CXXScalarValueInitExpr, stmt_deleter<clang::CXXScalarValueInitExpr>::type>(m, "CXXScalarValueInitExpr" , py::base<clang::Expr>())

        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getTypeSourceInfo)
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getRParenLoc)
        .def("getLocStart", (clang::SourceLocation (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXScalarValueInitExpr::*)())&clang::CXXScalarValueInitExpr::children)
    ;

    py::class_<clang::CXXNewExpr, stmt_deleter<clang::CXXNewExpr>::type>(m, "CXXNewExpr" , py::base<clang::Expr>())

        .def("AllocateArgsArray", (void (clang::CXXNewExpr::*)(const clang::ASTContext &, bool, unsigned int, bool))&clang::CXXNewExpr::AllocateArgsArray)
        .def("getAllocatedType", (clang::QualType (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getAllocatedType)
        .def("getAllocatedTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getAllocatedTypeSourceInfo)
        .def("shouldNullCheckAllocation", (bool (clang::CXXNewExpr::*)(const clang::ASTContext &) const)&clang::CXXNewExpr::shouldNullCheckAllocation)
        .def("getOperatorNew", (clang::FunctionDecl * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getOperatorNew)
        .def("setOperatorNew", (void (clang::CXXNewExpr::*)(clang::FunctionDecl *))&clang::CXXNewExpr::setOperatorNew)
        .def("getOperatorDelete", (clang::FunctionDecl * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getOperatorDelete)
        .def("setOperatorDelete", (void (clang::CXXNewExpr::*)(clang::FunctionDecl *))&clang::CXXNewExpr::setOperatorDelete)
        .def("isArray", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::isArray)
        .def("getArraySize", []( clang::CXXNewExpr& self) -> clang::Expr * {
          return self.getArraySize();
        })
        .def("getArraySize", [](const clang::CXXNewExpr& self) -> const clang::Expr * {
          return self.getArraySize();
        })
        .def("getNumPlacementArgs", (unsigned int (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getNumPlacementArgs)
        .def("getPlacementArg", []( clang::CXXNewExpr& self, unsigned int i) -> clang::Expr * {
          return self.getPlacementArg(i);
        })
        .def("getPlacementArg", [](const clang::CXXNewExpr& self, unsigned int i) -> const clang::Expr * {
          return self.getPlacementArg(i);
        })
        .def("isParenTypeId", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::isParenTypeId)
        .def("getTypeIdParens", (clang::SourceRange (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getTypeIdParens)
        .def("isGlobalNew", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::isGlobalNew)
        .def("hasInitializer", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::hasInitializer)
        .def("getInitializationStyle", (clang::CXXNewExpr::InitializationStyle (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getInitializationStyle)
        .def("getInitializer", []( clang::CXXNewExpr& self) -> clang::Expr * {
          return self.getInitializer();
        })
        .def("getInitializer", [](const clang::CXXNewExpr& self) -> const clang::Expr * {
          return self.getInitializer();
        })
        .def("getConstructExpr", (const clang::CXXConstructExpr * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getConstructExpr)
        .def("doesUsualArrayDeleteWantSize", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::doesUsualArrayDeleteWantSize)
        //.def("placement_arguments", []( clang::CXXNewExpr& self) -> llvm::iterator_range<clang::Stmt::ExprIterator> {
        //  return self.placement_arguments();
        //})
        //.def("placement_arguments", [](const clang::CXXNewExpr& self) -> llvm::iterator_range<clang::Stmt::ConstExprIterator> {
        //  return self.placement_arguments();
        //})
        .def("getStartLoc", (clang::SourceLocation (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getStartLoc)
        .def("getEndLoc", (clang::SourceLocation (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getEndLoc)
        .def("getDirectInitRange", (clang::SourceRange (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getDirectInitRange)
        .def("getSourceRange", (clang::SourceRange (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getSourceRange)
        .def("getLocStart", (clang::SourceLocation (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXNewExpr::*)())&clang::CXXNewExpr::children)
    ;

    py::class_<clang::CXXDeleteExpr, stmt_deleter<clang::CXXDeleteExpr>::type>(m, "CXXDeleteExpr" , py::base<clang::Expr>())

        .def("isGlobalDelete", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::isGlobalDelete)
        .def("isArrayForm", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::isArrayForm)
        .def("isArrayFormAsWritten", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::isArrayFormAsWritten)
        .def("doesUsualArrayDeleteWantSize", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::doesUsualArrayDeleteWantSize)
        .def("getOperatorDelete", (clang::FunctionDecl * (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getOperatorDelete)
        .def("getArgument", []( clang::CXXDeleteExpr& self) -> clang::Expr * {
          return self.getArgument();
        })
        .def("getArgument", [](const clang::CXXDeleteExpr& self) -> const clang::Expr * {
          return self.getArgument();
        })
        .def("getDestroyedType", (clang::QualType (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getDestroyedType)
        .def("getLocStart", (clang::SourceLocation (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDeleteExpr::*)())&clang::CXXDeleteExpr::children)
    ;

    py::class_<clang::CXXPseudoDestructorExpr, stmt_deleter<clang::CXXPseudoDestructorExpr>::type>(m, "CXXPseudoDestructorExpr" , py::base<clang::Expr>())

        .def("getBase", (clang::Expr * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getBase)
        .def("hasQualifier", (bool (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::hasQualifier)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getQualifierLoc)
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getQualifier)
        .def("isArrow", (bool (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::isArrow)
        .def("getOperatorLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getOperatorLoc)
        .def("getScopeTypeInfo", (clang::TypeSourceInfo * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getScopeTypeInfo)
        .def("getColonColonLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getColonColonLoc)
        .def("getTildeLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getTildeLoc)
        .def("getDestroyedTypeInfo", (clang::TypeSourceInfo * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedTypeInfo)
        //.def("getDestroyedTypeIdentifier", (clang::IdentifierInfo * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedTypeIdentifier)
        .def("getDestroyedType", (clang::QualType (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedType)
        .def("getDestroyedTypeLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedTypeLoc)
        //.def("setDestroyedType", []( clang::CXXPseudoDestructorExpr& self, clang::IdentifierInfo * II , clang::SourceLocation Loc)  {
        //   self.setDestroyedType(II, Loc);
        //})
        .def("setDestroyedType", []( clang::CXXPseudoDestructorExpr& self, clang::TypeSourceInfo * Info)  {
           self.setDestroyedType(Info);
        })
        .def("getLocStart", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXPseudoDestructorExpr::*)())&clang::CXXPseudoDestructorExpr::children)
    ;

    py::class_<clang::TypeTraitExpr, stmt_deleter<clang::TypeTraitExpr>::type>(m, "TypeTraitExpr" , py::base<clang::Expr>())

        .def("getTrait", (clang::TypeTrait (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getTrait)
        .def("getValue", (bool (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getValue)
        .def("getNumArgs", (unsigned int (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getNumArgs)
        .def("getArg", (clang::TypeSourceInfo * (clang::TypeTraitExpr::*)(unsigned int) const)&clang::TypeTraitExpr::getArg)
        //.def("getArgs", (llvm::ArrayRef<clang::TypeSourceInfo *> (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getArgs)
        .def("getLocStart", (clang::SourceLocation (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::TypeTraitExpr::*)())&clang::TypeTraitExpr::children)
    ;

    py::class_<clang::ArrayTypeTraitExpr, stmt_deleter<clang::ArrayTypeTraitExpr>::type>(m, "ArrayTypeTraitExpr" , py::base<clang::Expr>())

        .def("getLocStart", (clang::SourceLocation (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getLocEnd)
        .def("getTrait", (clang::ArrayTypeTrait (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getTrait)
        .def("getQueriedType", (clang::QualType (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getQueriedType)
        .def("getQueriedTypeSourceInfo", (clang::TypeSourceInfo * (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getQueriedTypeSourceInfo)
        .def("getValue", (unsigned long (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getValue)
        .def("getDimensionExpression", (clang::Expr * (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getDimensionExpression)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ArrayTypeTraitExpr::*)())&clang::ArrayTypeTraitExpr::children)
    ;

    py::class_<clang::ExpressionTraitExpr, stmt_deleter<clang::ExpressionTraitExpr>::type>(m, "ExpressionTraitExpr" , py::base<clang::Expr>())

        .def("getLocStart", (clang::SourceLocation (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getLocEnd)
        .def("getTrait", (clang::ExpressionTrait (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getTrait)
        .def("getQueriedExpression", (clang::Expr * (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getQueriedExpression)
        .def("getValue", (bool (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getValue)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ExpressionTraitExpr::*)())&clang::ExpressionTraitExpr::children)
    ;

    py::class_<clang::OverloadExpr, stmt_deleter<clang::OverloadExpr>::type>(m, "OverloadExpr" , py::base<clang::Expr>())

        .def("getNamingClass", (clang::CXXRecordDecl * (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNamingClass)
        //.def("decls", (llvm::iterator_range<clang::UnresolvedSetIterator> (clang::OverloadExpr::*)() const)&clang::OverloadExpr::decls)
        .def("getNumDecls", (unsigned int (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNumDecls)
        .def("getNameInfo", (const clang::DeclarationNameInfo & (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNameInfo)
        .def("getName", (clang::DeclarationName (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getName)
        .def("getNameLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNameLoc)
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getQualifier)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getQualifierLoc)
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getTemplateKeywordLoc)
        .def("getLAngleLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getLAngleLoc)
        .def("getRAngleLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getRAngleLoc)
        .def("hasTemplateKeyword", (bool (clang::OverloadExpr::*)() const)&clang::OverloadExpr::hasTemplateKeyword)
        .def("hasExplicitTemplateArgs", (bool (clang::OverloadExpr::*)() const)&clang::OverloadExpr::hasExplicitTemplateArgs)
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getTemplateArgs)
        .def("getNumTemplateArgs", (unsigned int (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNumTemplateArgs)
        //.def("copyTemplateArgumentsInto", (void (clang::OverloadExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::OverloadExpr::copyTemplateArgumentsInto)
    ;

    py::class_<clang::UnresolvedLookupExpr, stmt_deleter<clang::UnresolvedLookupExpr>::type>(m, "UnresolvedLookupExpr" , py::base<clang::OverloadExpr>())

        .def("requiresADL", (bool (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::requiresADL)
        .def("isOverloaded", (bool (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::isOverloaded)
        .def("getNamingClass", (clang::CXXRecordDecl * (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::getNamingClass)
        .def("getLocStart", (clang::SourceLocation (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnresolvedLookupExpr::*)())&clang::UnresolvedLookupExpr::children)
    ;

    py::class_<clang::DependentScopeDeclRefExpr, stmt_deleter<clang::DependentScopeDeclRefExpr>::type>(m, "DependentScopeDeclRefExpr" , py::base<clang::Expr>())

        .def("getNameInfo", (const clang::DeclarationNameInfo & (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getNameInfo)
        .def("getDeclName", (clang::DeclarationName (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getDeclName)
        .def("getLocation", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getLocation)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getQualifierLoc)
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getQualifier)
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getTemplateKeywordLoc)
        .def("getLAngleLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getLAngleLoc)
        .def("getRAngleLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getRAngleLoc)
        .def("hasTemplateKeyword", (bool (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::hasTemplateKeyword)
        .def("hasExplicitTemplateArgs", (bool (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::hasExplicitTemplateArgs)
        //.def("copyTemplateArgumentsInto", (void (clang::DependentScopeDeclRefExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::DependentScopeDeclRefExpr::copyTemplateArgumentsInto)
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getTemplateArgs)
        .def("getNumTemplateArgs", (unsigned int (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getNumTemplateArgs)
        .def("getLocStart", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DependentScopeDeclRefExpr::*)())&clang::DependentScopeDeclRefExpr::children)
    ;

    py::class_<clang::ExprWithCleanups, stmt_deleter<clang::ExprWithCleanups>::type>(m, "ExprWithCleanups" , py::base<clang::Expr>())

        //.def("getObjects", (llvm::ArrayRef<clang::BlockDecl *> (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getObjects)
        .def("getNumObjects", (unsigned int (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getNumObjects)
        .def("getObject", (clang::BlockDecl * (clang::ExprWithCleanups::*)(unsigned int) const)&clang::ExprWithCleanups::getObject)
        .def("getSubExpr", []( clang::ExprWithCleanups& self) -> clang::Expr * {
          return self.getSubExpr();
        })
        .def("getSubExpr", [](const clang::ExprWithCleanups& self) -> const clang::Expr * {
          return self.getSubExpr();
        })
        .def("cleanupsHaveSideEffects", (bool (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::cleanupsHaveSideEffects)
        .def("setSubExpr", (void (clang::ExprWithCleanups::*)(clang::Expr *))&clang::ExprWithCleanups::setSubExpr)
        .def("getLocStart", (clang::SourceLocation (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ExprWithCleanups::*)())&clang::ExprWithCleanups::children)
    ;

    py::class_<clang::CXXUnresolvedConstructExpr, stmt_deleter<clang::CXXUnresolvedConstructExpr>::type>(m, "CXXUnresolvedConstructExpr" , py::base<clang::Expr>())

        .def("getTypeAsWritten", (clang::QualType (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getTypeAsWritten)
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getTypeSourceInfo)
        .def("getLParenLoc", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getLParenLoc)
        .def("setLParenLoc", (void (clang::CXXUnresolvedConstructExpr::*)(clang::SourceLocation))&clang::CXXUnresolvedConstructExpr::setLParenLoc)
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getRParenLoc)
        .def("setRParenLoc", (void (clang::CXXUnresolvedConstructExpr::*)(clang::SourceLocation))&clang::CXXUnresolvedConstructExpr::setRParenLoc)
        .def("arg_size", (unsigned int (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::arg_size)
        .def("getArg", []( clang::CXXUnresolvedConstructExpr& self, unsigned int I) -> clang::Expr * {
          return self.getArg(I);
        })
        .def("getArg", [](const clang::CXXUnresolvedConstructExpr& self, unsigned int I) -> const clang::Expr * {
          return self.getArg(I);
        })
        .def("setArg", (void (clang::CXXUnresolvedConstructExpr::*)(unsigned int, clang::Expr *))&clang::CXXUnresolvedConstructExpr::setArg)
        .def("getLocStart", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXUnresolvedConstructExpr::*)())&clang::CXXUnresolvedConstructExpr::children)
    ;

    py::class_<clang::CXXDependentScopeMemberExpr, stmt_deleter<clang::CXXDependentScopeMemberExpr>::type>(m, "CXXDependentScopeMemberExpr" , py::base<clang::Expr>())

        .def("isImplicitAccess", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::isImplicitAccess)
        .def("getBase", (clang::Expr * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getBase)
        .def("getBaseType", (clang::QualType (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getBaseType)
        .def("isArrow", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::isArrow)
        .def("getOperatorLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getOperatorLoc)
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getQualifier)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getQualifierLoc)
        .def("getFirstQualifierFoundInScope", (clang::NamedDecl * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getFirstQualifierFoundInScope)
        .def("getMemberNameInfo", (const clang::DeclarationNameInfo & (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getMemberNameInfo)
        .def("getMember", (clang::DeclarationName (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getMember)
        .def("getMemberLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getMemberLoc)
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getTemplateKeywordLoc)
        .def("getLAngleLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getLAngleLoc)
        .def("getRAngleLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getRAngleLoc)
        .def("hasTemplateKeyword", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::hasTemplateKeyword)
        .def("hasExplicitTemplateArgs", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::hasExplicitTemplateArgs)
        //.def("copyTemplateArgumentsInto", (void (clang::CXXDependentScopeMemberExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::CXXDependentScopeMemberExpr::copyTemplateArgumentsInto)
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getTemplateArgs)
        .def("getNumTemplateArgs", (unsigned int (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getNumTemplateArgs)
        .def("getLocStart", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDependentScopeMemberExpr::*)())&clang::CXXDependentScopeMemberExpr::children)
    ;

    py::class_<clang::UnresolvedMemberExpr, stmt_deleter<clang::UnresolvedMemberExpr>::type>(m, "UnresolvedMemberExpr" , py::base<clang::OverloadExpr>())

        .def("isImplicitAccess", (bool (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::isImplicitAccess)
        .def("getBase", []( clang::UnresolvedMemberExpr& self) -> clang::Expr * {
          return self.getBase();
        })
        .def("getBase", [](const clang::UnresolvedMemberExpr& self) -> const clang::Expr * {
          return self.getBase();
        })
        .def("getBaseType", (clang::QualType (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getBaseType)
        .def("hasUnresolvedUsing", (bool (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::hasUnresolvedUsing)
        .def("isArrow", (bool (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::isArrow)
        .def("getOperatorLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getOperatorLoc)
        .def("getNamingClass", (clang::CXXRecordDecl * (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getNamingClass)
        .def("getMemberNameInfo", (const clang::DeclarationNameInfo & (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getMemberNameInfo)
        .def("getMemberName", (clang::DeclarationName (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getMemberName)
        .def("getMemberLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getMemberLoc)
        .def("getExprLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getExprLoc)
        .def("getLocStart", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnresolvedMemberExpr::*)())&clang::UnresolvedMemberExpr::children)
    ;

    py::class_<clang::CXXNoexceptExpr, stmt_deleter<clang::CXXNoexceptExpr>::type>(m, "CXXNoexceptExpr" , py::base<clang::Expr>())

        .def("getOperand", (clang::Expr * (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getOperand)
        .def("getLocStart", (clang::SourceLocation (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getLocEnd)
        .def("getSourceRange", (clang::SourceRange (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getSourceRange)
        .def("getValue", (bool (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getValue)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXNoexceptExpr::*)())&clang::CXXNoexceptExpr::children)
    ;

    py::class_<clang::PackExpansionExpr, stmt_deleter<clang::PackExpansionExpr>::type>(m, "PackExpansionExpr" , py::base<clang::Expr>())

        .def("getPattern", []( clang::PackExpansionExpr& self) -> clang::Expr * {
          return self.getPattern();
        })
        .def("getPattern", [](const clang::PackExpansionExpr& self) -> const clang::Expr * {
          return self.getPattern();
        })
        .def("getEllipsisLoc", (clang::SourceLocation (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getEllipsisLoc)
        //.def("getNumExpansions", (llvm::Optional<unsigned int> (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getNumExpansions)
        .def("getLocStart", (clang::SourceLocation (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::PackExpansionExpr::*)())&clang::PackExpansionExpr::children)
    ;

    py::class_<clang::SizeOfPackExpr, stmt_deleter<clang::SizeOfPackExpr>::type>(m, "SizeOfPackExpr" , py::base<clang::Expr>())

        .def("getOperatorLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getOperatorLoc)
        .def("getPackLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPackLoc)
        .def("getRParenLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getRParenLoc)
        .def("getPack", (clang::NamedDecl * (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPack)
        .def("getPackLength", (unsigned int (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPackLength)
        .def("isPartiallySubstituted", (bool (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::isPartiallySubstituted)
        //.def("getPartialArguments", (llvm::ArrayRef<clang::TemplateArgument> (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPartialArguments)
        .def("getLocStart", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SizeOfPackExpr::*)())&clang::SizeOfPackExpr::children)
    ;

    py::class_<clang::SubstNonTypeTemplateParmExpr, stmt_deleter<clang::SubstNonTypeTemplateParmExpr>::type>(m, "SubstNonTypeTemplateParmExpr" , py::base<clang::Expr>())

        .def("getNameLoc", (clang::SourceLocation (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getNameLoc)
        .def("getLocStart", (clang::SourceLocation (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getLocEnd)
        .def("getReplacement", (clang::Expr * (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getReplacement)
        .def("getParameter", (clang::NonTypeTemplateParmDecl * (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getParameter)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SubstNonTypeTemplateParmExpr::*)())&clang::SubstNonTypeTemplateParmExpr::children)
    ;

    py::class_<clang::SubstNonTypeTemplateParmPackExpr, stmt_deleter<clang::SubstNonTypeTemplateParmPackExpr>::type>(m, "SubstNonTypeTemplateParmPackExpr" , py::base<clang::Expr>())

        .def("getParameterPack", (clang::NonTypeTemplateParmDecl * (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getParameterPack)
        .def("getParameterPackLocation", (clang::SourceLocation (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getParameterPackLocation)
        //.def("getArgumentPack", (clang::TemplateArgument (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getArgumentPack)
        .def("getLocStart", (clang::SourceLocation (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SubstNonTypeTemplateParmPackExpr::*)())&clang::SubstNonTypeTemplateParmPackExpr::children)
    ;

    py::class_<clang::FunctionParmPackExpr, stmt_deleter<clang::FunctionParmPackExpr>::type>(m, "FunctionParmPackExpr" , py::base<clang::Expr>())

        .def("getParameterPack", (clang::ParmVarDecl * (clang::FunctionParmPackExpr::*)() const)&clang::FunctionParmPackExpr::getParameterPack)
        .def("getParameterPackLocation", (clang::SourceLocation (clang::FunctionParmPackExpr::*)() const)&clang::FunctionParmPackExpr::getParameterPackLocation)
        .def("getNumExpansions", (unsigned int (clang::FunctionParmPackExpr::*)() const)&clang::FunctionParmPackExpr::getNumExpansions)
        .def("getExpansion", (clang::ParmVarDecl * (clang::FunctionParmPackExpr::*)(unsigned int) const)&clang::FunctionParmPackExpr::getExpansion)
        .def("getLocStart", (clang::SourceLocation (clang::FunctionParmPackExpr::*)() const)&clang::FunctionParmPackExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::FunctionParmPackExpr::*)() const)&clang::FunctionParmPackExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::FunctionParmPackExpr::*)())&clang::FunctionParmPackExpr::children)
    ;

    py::class_<clang::MaterializeTemporaryExpr, stmt_deleter<clang::MaterializeTemporaryExpr>::type>(m, "MaterializeTemporaryExpr" , py::base<clang::Expr>())

        .def("getTemporary", (clang::Stmt * (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::getTemporary)
        .def("GetTemporaryExpr", (clang::Expr * (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::GetTemporaryExpr)
        .def("getStorageDuration", (clang::StorageDuration (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::getStorageDuration)
        .def("getExtendingDecl", (const clang::ValueDecl * (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::getExtendingDecl)
        .def("setExtendingDecl", (void (clang::MaterializeTemporaryExpr::*)(const clang::ValueDecl *, unsigned int))&clang::MaterializeTemporaryExpr::setExtendingDecl)
        .def("getManglingNumber", (unsigned int (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::getManglingNumber)
        .def("isBoundToLvalueReference", (bool (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::isBoundToLvalueReference)
        .def("getLocStart", (clang::SourceLocation (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::MaterializeTemporaryExpr::*)() const)&clang::MaterializeTemporaryExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MaterializeTemporaryExpr::*)())&clang::MaterializeTemporaryExpr::children)
    ;

    py::class_<clang::CXXFoldExpr, stmt_deleter<clang::CXXFoldExpr>::type>(m, "CXXFoldExpr" , py::base<clang::Expr>())

        .def("getLHS", (clang::Expr * (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getLHS)
        .def("getRHS", (clang::Expr * (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getRHS)
        .def("isRightFold", (bool (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::isRightFold)
        .def("isLeftFold", (bool (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::isLeftFold)
        .def("getPattern", (clang::Expr * (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getPattern)
        .def("getInit", (clang::Expr * (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getInit)
        .def("getEllipsisLoc", (clang::SourceLocation (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getEllipsisLoc)
        .def("getOperator", (clang::BinaryOperatorKind (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getOperator)
        .def("getLocStart", (clang::SourceLocation (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXFoldExpr::*)() const)&clang::CXXFoldExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXFoldExpr::*)())&clang::CXXFoldExpr::children)
    ;

    py::class_<clang::CoroutineSuspendExpr, stmt_deleter<clang::CoroutineSuspendExpr>::type>(m, "CoroutineSuspendExpr" , py::base<clang::Expr>())

        .def("getKeywordLoc", (clang::SourceLocation (clang::CoroutineSuspendExpr::*)() const)&clang::CoroutineSuspendExpr::getKeywordLoc)
        .def("getCommonExpr", (clang::Expr * (clang::CoroutineSuspendExpr::*)() const)&clang::CoroutineSuspendExpr::getCommonExpr)
        .def("getReadyExpr", (clang::Expr * (clang::CoroutineSuspendExpr::*)() const)&clang::CoroutineSuspendExpr::getReadyExpr)
        .def("getSuspendExpr", (clang::Expr * (clang::CoroutineSuspendExpr::*)() const)&clang::CoroutineSuspendExpr::getSuspendExpr)
        .def("getResumeExpr", (clang::Expr * (clang::CoroutineSuspendExpr::*)() const)&clang::CoroutineSuspendExpr::getResumeExpr)
        .def("getLocStart", (clang::SourceLocation (clang::CoroutineSuspendExpr::*)() const)&clang::CoroutineSuspendExpr::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CoroutineSuspendExpr::*)() const)&clang::CoroutineSuspendExpr::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CoroutineSuspendExpr::*)())&clang::CoroutineSuspendExpr::children)
    ;

    py::class_<clang::CoawaitExpr, stmt_deleter<clang::CoawaitExpr>::type>(m, "CoawaitExpr" , py::base<clang::CoroutineSuspendExpr>())

        .def("getOperand", (clang::Expr * (clang::CoawaitExpr::*)() const)&clang::CoawaitExpr::getOperand)
    ;

    py::class_<clang::CoyieldExpr, stmt_deleter<clang::CoyieldExpr>::type>(m, "CoyieldExpr" , py::base<clang::CoroutineSuspendExpr>())

        .def("getOperand", (clang::Expr * (clang::CoyieldExpr::*)() const)&clang::CoyieldExpr::getOperand)
    ;

    py::class_<clang::CXXCatchStmt, stmt_deleter<clang::CXXCatchStmt>::type>(m, "CXXCatchStmt" , py::base<clang::Stmt>())

        .def("getLocStart", (clang::SourceLocation (clang::CXXCatchStmt::*)() const)&clang::CXXCatchStmt::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXCatchStmt::*)() const)&clang::CXXCatchStmt::getLocEnd)
        .def("getCatchLoc", (clang::SourceLocation (clang::CXXCatchStmt::*)() const)&clang::CXXCatchStmt::getCatchLoc)
        .def("getExceptionDecl", (clang::VarDecl * (clang::CXXCatchStmt::*)() const)&clang::CXXCatchStmt::getExceptionDecl)
        .def("getCaughtType", (clang::QualType (clang::CXXCatchStmt::*)() const)&clang::CXXCatchStmt::getCaughtType)
        .def("getHandlerBlock", (clang::Stmt * (clang::CXXCatchStmt::*)() const)&clang::CXXCatchStmt::getHandlerBlock)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXCatchStmt::*)())&clang::CXXCatchStmt::children)
    ;

    py::class_<clang::CXXTryStmt, stmt_deleter<clang::CXXTryStmt>::type>(m, "CXXTryStmt" , py::base<clang::Stmt>())

        .def("getLocStart", (clang::SourceLocation (clang::CXXTryStmt::*)() const)&clang::CXXTryStmt::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXTryStmt::*)() const)&clang::CXXTryStmt::getLocEnd)
        .def("getTryLoc", (clang::SourceLocation (clang::CXXTryStmt::*)() const)&clang::CXXTryStmt::getTryLoc)
        .def("getEndLoc", (clang::SourceLocation (clang::CXXTryStmt::*)() const)&clang::CXXTryStmt::getEndLoc)
        .def("getTryBlock", []( clang::CXXTryStmt& self) -> clang::CompoundStmt * {
          return self.getTryBlock();
        })
        .def("getTryBlock", [](const clang::CXXTryStmt& self) -> const clang::CompoundStmt * {
          return self.getTryBlock();
        })
        .def("getNumHandlers", (unsigned int (clang::CXXTryStmt::*)() const)&clang::CXXTryStmt::getNumHandlers)
        .def("getHandler", []( clang::CXXTryStmt& self, unsigned int i) -> clang::CXXCatchStmt * {
          return self.getHandler(i);
        })
        .def("getHandler", [](const clang::CXXTryStmt& self, unsigned int i) -> const clang::CXXCatchStmt * {
          return self.getHandler(i);
        })
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXTryStmt::*)())&clang::CXXTryStmt::children)
    ;

    py::class_<clang::CXXForRangeStmt, stmt_deleter<clang::CXXForRangeStmt>::type>(m, "CXXForRangeStmt" , py::base<clang::Stmt>())

        .def("getLoopVariable", []( clang::CXXForRangeStmt& self) -> clang::VarDecl * {
          return self.getLoopVariable();
        })
        .def("getRangeInit", []( clang::CXXForRangeStmt& self) -> clang::Expr * {
          return self.getRangeInit();
        })
        .def("getLoopVariable", [](const clang::CXXForRangeStmt& self) -> const clang::VarDecl * {
          return self.getLoopVariable();
        })
        .def("getRangeInit", [](const clang::CXXForRangeStmt& self) -> const clang::Expr * {
          return self.getRangeInit();
        })
        .def("getRangeStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
          return self.getRangeStmt();
        })
        .def("getBeginStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
          return self.getBeginStmt();
        })
        .def("getEndStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
          return self.getEndStmt();
        })
        .def("getCond", []( clang::CXXForRangeStmt& self) -> clang::Expr * {
          return self.getCond();
        })
        .def("getInc", []( clang::CXXForRangeStmt& self) -> clang::Expr * {
          return self.getInc();
        })
        .def("getLoopVarStmt", []( clang::CXXForRangeStmt& self) -> clang::DeclStmt * {
          return self.getLoopVarStmt();
        })
        .def("getBody", []( clang::CXXForRangeStmt& self) -> clang::Stmt * {
          return self.getBody();
        })
        .def("getRangeStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
          return self.getRangeStmt();
        })
        .def("getBeginStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
          return self.getBeginStmt();
        })
        .def("getEndStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
          return self.getEndStmt();
        })
        .def("getCond", [](const clang::CXXForRangeStmt& self) -> const clang::Expr * {
          return self.getCond();
        })
        .def("getInc", [](const clang::CXXForRangeStmt& self) -> const clang::Expr * {
          return self.getInc();
        })
        .def("getLoopVarStmt", [](const clang::CXXForRangeStmt& self) -> const clang::DeclStmt * {
          return self.getLoopVarStmt();
        })
        .def("getBody", [](const clang::CXXForRangeStmt& self) -> const clang::Stmt * {
          return self.getBody();
        })
        .def("setRangeInit", (void (clang::CXXForRangeStmt::*)(clang::Expr *))&clang::CXXForRangeStmt::setRangeInit)
        .def("setRangeStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setRangeStmt)
        .def("setBeginStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setBeginStmt)
        .def("setEndStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setEndStmt)
        .def("setCond", (void (clang::CXXForRangeStmt::*)(clang::Expr *))&clang::CXXForRangeStmt::setCond)
        .def("setInc", (void (clang::CXXForRangeStmt::*)(clang::Expr *))&clang::CXXForRangeStmt::setInc)
        .def("setLoopVarStmt", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setLoopVarStmt)
        .def("setBody", (void (clang::CXXForRangeStmt::*)(clang::Stmt *))&clang::CXXForRangeStmt::setBody)
        .def("getForLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getForLoc)
        .def("getCoawaitLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getCoawaitLoc)
        .def("getColonLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getColonLoc)
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getRParenLoc)
        .def("getLocStart", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::CXXForRangeStmt::*)() const)&clang::CXXForRangeStmt::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXForRangeStmt::*)())&clang::CXXForRangeStmt::children)
    ;

    py::class_<clang::MSDependentExistsStmt, stmt_deleter<clang::MSDependentExistsStmt>::type>(m, "MSDependentExistsStmt" , py::base<clang::Stmt>())

        .def("getKeywordLoc", (clang::SourceLocation (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getKeywordLoc)
        .def("isIfExists", (bool (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::isIfExists)
        .def("isIfNotExists", (bool (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::isIfNotExists)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getQualifierLoc)
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getNameInfo)
        .def("getSubStmt", (clang::CompoundStmt * (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getSubStmt)
        .def("getLocStart", (clang::SourceLocation (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getLocStart)
        .def("getLocEnd", (clang::SourceLocation (clang::MSDependentExistsStmt::*)() const)&clang::MSDependentExistsStmt::getLocEnd)
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSDependentExistsStmt::*)())&clang::MSDependentExistsStmt::children)
    ;
}
