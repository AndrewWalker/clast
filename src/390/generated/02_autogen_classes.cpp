
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 3.9.0-svn276421-1~exp1 (branches/release_39)
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_1(pybind11::module& m)
{

    py::class_<clang::WhileStmt, stmt_deleter<clang::WhileStmt>::type>(m, "WhileStmt" , py::base<clang::Stmt>())

        .def("getConditionVariable", (clang::VarDecl * (clang::WhileStmt::*)() const)&clang::WhileStmt::getConditionVariable , py::return_value_policy::reference_internal )
        .def("setConditionVariable", (void (clang::WhileStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::WhileStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", (const clang::DeclStmt * (clang::WhileStmt::*)() const)&clang::WhileStmt::getConditionVariableDeclStmt , py::return_value_policy::reference_internal )
        .def("getCond", []( clang::WhileStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::WhileStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::WhileStmt::*)(clang::Expr *))&clang::WhileStmt::setCond  )
        .def("getBody", []( clang::WhileStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::WhileStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", (void (clang::WhileStmt::*)(clang::Stmt *))&clang::WhileStmt::setBody  )
        .def("getWhileLoc", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getWhileLoc  )
        .def("setWhileLoc", (void (clang::WhileStmt::*)(clang::SourceLocation))&clang::WhileStmt::setWhileLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::WhileStmt::*)())&clang::WhileStmt::children  )
    ;

    py::class_<clang::DoStmt, stmt_deleter<clang::DoStmt>::type>(m, "DoStmt" , py::base<clang::Stmt>())

        .def("getCond", []( clang::DoStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::DoStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::DoStmt::*)(clang::Expr *))&clang::DoStmt::setCond  )
        .def("getBody", []( clang::DoStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::DoStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", (void (clang::DoStmt::*)(clang::Stmt *))&clang::DoStmt::setBody  )
        .def("getDoLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getDoLoc  )
        .def("setDoLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setDoLoc  )
        .def("getWhileLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getWhileLoc  )
        .def("setWhileLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setWhileLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getRParenLoc  )
        .def("setRParenLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DoStmt::*)())&clang::DoStmt::children  )
    ;

    py::class_<clang::ForStmt, stmt_deleter<clang::ForStmt>::type>(m, "ForStmt" , py::base<clang::Stmt>())

        .def("getInit", []( clang::ForStmt& self) -> clang::Stmt * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("getConditionVariable", (clang::VarDecl * (clang::ForStmt::*)() const)&clang::ForStmt::getConditionVariable , py::return_value_policy::reference_internal )
        .def("setConditionVariable", (void (clang::ForStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::ForStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", (const clang::DeclStmt * (clang::ForStmt::*)() const)&clang::ForStmt::getConditionVariableDeclStmt , py::return_value_policy::reference_internal )
        .def("getCond", []( clang::ForStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getInc", []( clang::ForStmt& self) -> clang::Expr * {
         return self.getInc();
        } , py::return_value_policy::reference_internal)
        .def("getBody", []( clang::ForStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getInit", [](const clang::ForStmt& self) -> const clang::Stmt * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::ForStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getInc", [](const clang::ForStmt& self) -> const clang::Expr * {
         return self.getInc();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::ForStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setInit", (void (clang::ForStmt::*)(clang::Stmt *))&clang::ForStmt::setInit  )
        .def("setCond", (void (clang::ForStmt::*)(clang::Expr *))&clang::ForStmt::setCond  )
        .def("setInc", (void (clang::ForStmt::*)(clang::Expr *))&clang::ForStmt::setInc  )
        .def("setBody", (void (clang::ForStmt::*)(clang::Stmt *))&clang::ForStmt::setBody  )
        .def("getForLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getForLoc  )
        .def("setForLoc", (void (clang::ForStmt::*)(clang::SourceLocation))&clang::ForStmt::setForLoc  )
        .def("getLParenLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getLParenLoc  )
        .def("setLParenLoc", (void (clang::ForStmt::*)(clang::SourceLocation))&clang::ForStmt::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getRParenLoc  )
        .def("setRParenLoc", (void (clang::ForStmt::*)(clang::SourceLocation))&clang::ForStmt::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ForStmt::*)())&clang::ForStmt::children  )
    ;

    py::class_<clang::GotoStmt, stmt_deleter<clang::GotoStmt>::type>(m, "GotoStmt" , py::base<clang::Stmt>())

        .def("getLabel", (clang::LabelDecl * (clang::GotoStmt::*)() const)&clang::GotoStmt::getLabel , py::return_value_policy::reference_internal )
        .def("setLabel", (void (clang::GotoStmt::*)(clang::LabelDecl *))&clang::GotoStmt::setLabel  )
        .def("getGotoLoc", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getGotoLoc  )
        .def("setGotoLoc", (void (clang::GotoStmt::*)(clang::SourceLocation))&clang::GotoStmt::setGotoLoc  )
        .def("getLabelLoc", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getLabelLoc  )
        .def("setLabelLoc", (void (clang::GotoStmt::*)(clang::SourceLocation))&clang::GotoStmt::setLabelLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::GotoStmt::*)())&clang::GotoStmt::children  )
    ;

    py::class_<clang::IndirectGotoStmt, stmt_deleter<clang::IndirectGotoStmt>::type>(m, "IndirectGotoStmt" , py::base<clang::Stmt>())

        .def("setGotoLoc", (void (clang::IndirectGotoStmt::*)(clang::SourceLocation))&clang::IndirectGotoStmt::setGotoLoc  )
        .def("getGotoLoc", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getGotoLoc  )
        .def("setStarLoc", (void (clang::IndirectGotoStmt::*)(clang::SourceLocation))&clang::IndirectGotoStmt::setStarLoc  )
        .def("getStarLoc", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getStarLoc  )
        .def("getTarget", []( clang::IndirectGotoStmt& self) -> clang::Expr * {
         return self.getTarget();
        } , py::return_value_policy::reference_internal)
        .def("getTarget", [](const clang::IndirectGotoStmt& self) -> const clang::Expr * {
         return self.getTarget();
        } , py::return_value_policy::reference_internal)
        .def("setTarget", (void (clang::IndirectGotoStmt::*)(clang::Expr *))&clang::IndirectGotoStmt::setTarget  )
        .def("getConstantTarget", []( clang::IndirectGotoStmt& self) -> clang::LabelDecl * {
         return self.getConstantTarget();
        } , py::return_value_policy::reference_internal)
        .def("getConstantTarget", [](const clang::IndirectGotoStmt& self) -> const clang::LabelDecl * {
         return self.getConstantTarget();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::IndirectGotoStmt::*)())&clang::IndirectGotoStmt::children  )
    ;

    py::class_<clang::ContinueStmt, stmt_deleter<clang::ContinueStmt>::type>(m, "ContinueStmt" , py::base<clang::Stmt>())

        .def("getContinueLoc", (clang::SourceLocation (clang::ContinueStmt::*)() const)&clang::ContinueStmt::getContinueLoc  )
        .def("setContinueLoc", (void (clang::ContinueStmt::*)(clang::SourceLocation))&clang::ContinueStmt::setContinueLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::ContinueStmt::*)() const)&clang::ContinueStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ContinueStmt::*)() const)&clang::ContinueStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ContinueStmt::*)())&clang::ContinueStmt::children  )
    ;

    py::class_<clang::BreakStmt, stmt_deleter<clang::BreakStmt>::type>(m, "BreakStmt" , py::base<clang::Stmt>())

        .def("getBreakLoc", (clang::SourceLocation (clang::BreakStmt::*)() const)&clang::BreakStmt::getBreakLoc  )
        .def("setBreakLoc", (void (clang::BreakStmt::*)(clang::SourceLocation))&clang::BreakStmt::setBreakLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::BreakStmt::*)() const)&clang::BreakStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::BreakStmt::*)() const)&clang::BreakStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BreakStmt::*)())&clang::BreakStmt::children  )
    ;

    py::class_<clang::ReturnStmt, stmt_deleter<clang::ReturnStmt>::type>(m, "ReturnStmt" , py::base<clang::Stmt>())

        .def("getRetValue", [](const clang::ReturnStmt& self) -> const clang::Expr * {
         return self.getRetValue();
        } , py::return_value_policy::reference_internal)
        .def("getRetValue", []( clang::ReturnStmt& self) -> clang::Expr * {
         return self.getRetValue();
        } , py::return_value_policy::reference_internal)
        .def("setRetValue", (void (clang::ReturnStmt::*)(clang::Expr *))&clang::ReturnStmt::setRetValue  )
        .def("getReturnLoc", (clang::SourceLocation (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getReturnLoc  )
        .def("setReturnLoc", (void (clang::ReturnStmt::*)(clang::SourceLocation))&clang::ReturnStmt::setReturnLoc  )
        .def("getNRVOCandidate", (const clang::VarDecl * (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getNRVOCandidate , py::return_value_policy::reference_internal )
        .def("setNRVOCandidate", (void (clang::ReturnStmt::*)(const clang::VarDecl *))&clang::ReturnStmt::setNRVOCandidate  )
        .def("getLocStart", (clang::SourceLocation (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ReturnStmt::*)())&clang::ReturnStmt::children  )
    ;

    py::class_<clang::AsmStmt, stmt_deleter<clang::AsmStmt>::type>(m, "AsmStmt" , py::base<clang::Stmt>())

        .def("getAsmLoc", (clang::SourceLocation (clang::AsmStmt::*)() const)&clang::AsmStmt::getAsmLoc  )
        .def("setAsmLoc", (void (clang::AsmStmt::*)(clang::SourceLocation))&clang::AsmStmt::setAsmLoc  )
        .def("isSimple", (bool (clang::AsmStmt::*)() const)&clang::AsmStmt::isSimple  )
        .def("setSimple", (void (clang::AsmStmt::*)(bool))&clang::AsmStmt::setSimple  )
        .def("isVolatile", (bool (clang::AsmStmt::*)() const)&clang::AsmStmt::isVolatile  )
        .def("setVolatile", (void (clang::AsmStmt::*)(bool))&clang::AsmStmt::setVolatile  )
        .def("getLocStart", (clang::SourceLocation (clang::AsmStmt::*)() const)&clang::AsmStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::AsmStmt::*)() const)&clang::AsmStmt::getLocEnd  )
        //.def("generateAsmString", (std::basic_string<char> (clang::AsmStmt::*)(const clang::ASTContext &) const)&clang::AsmStmt::generateAsmString  )
        .def("getNumOutputs", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumOutputs  )
        .def("getOutputConstraint", (llvm::StringRef (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getOutputConstraint  )
        .def("isOutputPlusConstraint", (bool (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::isOutputPlusConstraint  )
        .def("getOutputExpr", (const clang::Expr * (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getOutputExpr , py::return_value_policy::reference_internal )
        .def("getNumPlusOperands", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumPlusOperands  )
        .def("getNumInputs", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumInputs  )
        .def("getInputConstraint", (llvm::StringRef (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getInputConstraint  )
        .def("getInputExpr", (const clang::Expr * (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getInputExpr , py::return_value_policy::reference_internal )
        .def("getNumClobbers", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumClobbers  )
        .def("getClobber", (llvm::StringRef (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getClobber  )
        //.def("inputs", []( clang::AsmStmt& self) -> llvm::iterator_range<clang::Stmt::ExprIterator> {
        // return self.inputs();
        //} )
        //.def("inputs", [](const clang::AsmStmt& self) -> llvm::iterator_range<clang::Stmt::ConstExprIterator> {
        // return self.inputs();
        //} )
        //.def("outputs", []( clang::AsmStmt& self) -> llvm::iterator_range<clang::Stmt::ExprIterator> {
        // return self.outputs();
        //} )
        //.def("outputs", [](const clang::AsmStmt& self) -> llvm::iterator_range<clang::Stmt::ConstExprIterator> {
        // return self.outputs();
        //} )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AsmStmt::*)())&clang::AsmStmt::children  )
    ;

    py::class_<clang::GCCAsmStmt, stmt_deleter<clang::GCCAsmStmt>::type>(m, "GCCAsmStmt" , py::base<clang::AsmStmt>())

        .def("getRParenLoc", (clang::SourceLocation (clang::GCCAsmStmt::*)() const)&clang::GCCAsmStmt::getRParenLoc  )
        .def("setRParenLoc", (void (clang::GCCAsmStmt::*)(clang::SourceLocation))&clang::GCCAsmStmt::setRParenLoc  )
        .def("getAsmString", [](const clang::GCCAsmStmt& self) -> const clang::StringLiteral * {
         return self.getAsmString();
        } , py::return_value_policy::reference_internal)
        .def("getAsmString", []( clang::GCCAsmStmt& self) -> clang::StringLiteral * {
         return self.getAsmString();
        } , py::return_value_policy::reference_internal)
        .def("setAsmString", (void (clang::GCCAsmStmt::*)(clang::StringLiteral *))&clang::GCCAsmStmt::setAsmString  )
        //.def("AnalyzeAsmString", (unsigned int (clang::GCCAsmStmt::*)(llvm::SmallVectorImpl<clang::GCCAsmStmt::AsmStringPiece> &, const clang::ASTContext &, unsigned int &) const)&clang::GCCAsmStmt::AnalyzeAsmString  )
        //.def("generateAsmString", (std::basic_string<char> (clang::GCCAsmStmt::*)(const clang::ASTContext &) const)&clang::GCCAsmStmt::generateAsmString  )
        //.def("getOutputIdentifier", (clang::IdentifierInfo * (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getOutputIdentifier , py::return_value_policy::reference_internal )
        .def("getOutputName", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getOutputName  )
        .def("getOutputConstraint", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getOutputConstraint  )
        .def("getOutputConstraintLiteral", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::StringLiteral * {
         return self.getOutputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputConstraintLiteral", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::StringLiteral * {
         return self.getOutputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputExpr", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputExpr", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        //.def("getInputIdentifier", (clang::IdentifierInfo * (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getInputIdentifier , py::return_value_policy::reference_internal )
        .def("getInputName", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getInputName  )
        .def("getInputConstraint", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getInputConstraint  )
        .def("getInputConstraintLiteral", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::StringLiteral * {
         return self.getInputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getInputConstraintLiteral", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::StringLiteral * {
         return self.getInputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getInputExpr", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("setInputExpr", (void (clang::GCCAsmStmt::*)(unsigned int, clang::Expr *))&clang::GCCAsmStmt::setInputExpr  )
        .def("getInputExpr", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getNamedOperand", (int (clang::GCCAsmStmt::*)(llvm::StringRef) const)&clang::GCCAsmStmt::getNamedOperand  )
        .def("getClobber", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getClobber  )
        .def("getClobberStringLiteral", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::StringLiteral * {
         return self.getClobberStringLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getClobberStringLiteral", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::StringLiteral * {
         return self.getClobberStringLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::GCCAsmStmt::*)() const)&clang::GCCAsmStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::GCCAsmStmt::*)() const)&clang::GCCAsmStmt::getLocEnd  )
    ;

    py::class_<clang::MSAsmStmt, stmt_deleter<clang::MSAsmStmt>::type>(m, "MSAsmStmt" , py::base<clang::AsmStmt>())

        .def("getLBraceLoc", (clang::SourceLocation (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getLBraceLoc  )
        .def("setLBraceLoc", (void (clang::MSAsmStmt::*)(clang::SourceLocation))&clang::MSAsmStmt::setLBraceLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getEndLoc  )
        .def("setEndLoc", (void (clang::MSAsmStmt::*)(clang::SourceLocation))&clang::MSAsmStmt::setEndLoc  )
        .def("hasBraces", (bool (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::hasBraces  )
        .def("getNumAsmToks", (unsigned int (clang::MSAsmStmt::*)())&clang::MSAsmStmt::getNumAsmToks  )
        //.def("getAsmToks", (clang::Token * (clang::MSAsmStmt::*)())&clang::MSAsmStmt::getAsmToks , py::return_value_policy::reference_internal )
        .def("getAsmString", (llvm::StringRef (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getAsmString  )
        //.def("generateAsmString", (std::basic_string<char> (clang::MSAsmStmt::*)(const clang::ASTContext &) const)&clang::MSAsmStmt::generateAsmString  )
        .def("getOutputConstraint", (llvm::StringRef (clang::MSAsmStmt::*)(unsigned int) const)&clang::MSAsmStmt::getOutputConstraint  )
        .def("getOutputExpr", []( clang::MSAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputExpr", [](const clang::MSAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getInputConstraint", (llvm::StringRef (clang::MSAsmStmt::*)(unsigned int) const)&clang::MSAsmStmt::getInputConstraint  )
        .def("getInputExpr", []( clang::MSAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("setInputExpr", (void (clang::MSAsmStmt::*)(unsigned int, clang::Expr *))&clang::MSAsmStmt::setInputExpr  )
        .def("getInputExpr", [](const clang::MSAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        //.def("getAllConstraints", (llvm::ArrayRef<llvm::StringRef> (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getAllConstraints  )
        //.def("getClobbers", (llvm::ArrayRef<llvm::StringRef> (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getClobbers  )
        //.def("getAllExprs", (llvm::ArrayRef<clang::Expr *> (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getAllExprs  )
        .def("getClobber", (llvm::StringRef (clang::MSAsmStmt::*)(unsigned int) const)&clang::MSAsmStmt::getClobber  )
        .def("getLocStart", (clang::SourceLocation (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSAsmStmt::*)())&clang::MSAsmStmt::children  )
    ;

    py::class_<clang::SEHExceptStmt, stmt_deleter<clang::SEHExceptStmt>::type>(m, "SEHExceptStmt" , py::base<clang::Stmt>())

        .def("getLocStart", (clang::SourceLocation (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getLocEnd  )
        .def("getExceptLoc", (clang::SourceLocation (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getExceptLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getEndLoc  )
        .def("getFilterExpr", (clang::Expr * (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getFilterExpr , py::return_value_policy::reference_internal )
        .def("getBlock", (clang::CompoundStmt * (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getBlock , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHExceptStmt::*)())&clang::SEHExceptStmt::children  )
    ;

    py::class_<clang::SEHFinallyStmt, stmt_deleter<clang::SEHFinallyStmt>::type>(m, "SEHFinallyStmt" , py::base<clang::Stmt>())

        .def("getLocStart", (clang::SourceLocation (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getLocEnd  )
        .def("getFinallyLoc", (clang::SourceLocation (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getFinallyLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getEndLoc  )
        .def("getBlock", (clang::CompoundStmt * (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getBlock , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHFinallyStmt::*)())&clang::SEHFinallyStmt::children  )
    ;

    py::class_<clang::SEHTryStmt, stmt_deleter<clang::SEHTryStmt>::type>(m, "SEHTryStmt" , py::base<clang::Stmt>())

        .def("getLocStart", (clang::SourceLocation (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getLocEnd  )
        .def("getTryLoc", (clang::SourceLocation (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getTryLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getEndLoc  )
        .def("getIsCXXTry", (bool (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getIsCXXTry  )
        .def("getTryBlock", (clang::CompoundStmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getTryBlock , py::return_value_policy::reference_internal )
        .def("getHandler", (clang::Stmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getHandler , py::return_value_policy::reference_internal )
        .def("getExceptHandler", (clang::SEHExceptStmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getExceptHandler , py::return_value_policy::reference_internal )
        .def("getFinallyHandler", (clang::SEHFinallyStmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getFinallyHandler , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHTryStmt::*)())&clang::SEHTryStmt::children  )
    ;

    py::class_<clang::SEHLeaveStmt, stmt_deleter<clang::SEHLeaveStmt>::type>(m, "SEHLeaveStmt" , py::base<clang::Stmt>())

        .def("getLeaveLoc", (clang::SourceLocation (clang::SEHLeaveStmt::*)() const)&clang::SEHLeaveStmt::getLeaveLoc  )
        .def("setLeaveLoc", (void (clang::SEHLeaveStmt::*)(clang::SourceLocation))&clang::SEHLeaveStmt::setLeaveLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::SEHLeaveStmt::*)() const)&clang::SEHLeaveStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::SEHLeaveStmt::*)() const)&clang::SEHLeaveStmt::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHLeaveStmt::*)())&clang::SEHLeaveStmt::children  )
    ;

    py::class_<clang::CapturedStmt, stmt_deleter<clang::CapturedStmt>::type>(m, "CapturedStmt" , py::base<clang::Stmt>())

        .def("getCapturedStmt", []( clang::CapturedStmt& self) -> clang::Stmt * {
         return self.getCapturedStmt();
        } , py::return_value_policy::reference_internal)
        .def("getCapturedStmt", [](const clang::CapturedStmt& self) -> const clang::Stmt * {
         return self.getCapturedStmt();
        } , py::return_value_policy::reference_internal)
        .def("getCapturedDecl", []( clang::CapturedStmt& self) -> clang::CapturedDecl * {
         return self.getCapturedDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCapturedDecl", [](const clang::CapturedStmt& self) -> const clang::CapturedDecl * {
         return self.getCapturedDecl();
        } , py::return_value_policy::reference_internal)
        .def("setCapturedDecl", (void (clang::CapturedStmt::*)(clang::CapturedDecl *))&clang::CapturedStmt::setCapturedDecl  )
        .def("getCapturedRegionKind", (clang::CapturedRegionKind (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getCapturedRegionKind  )
        .def("setCapturedRegionKind", (void (clang::CapturedStmt::*)(clang::CapturedRegionKind))&clang::CapturedStmt::setCapturedRegionKind  )
        .def("getCapturedRecordDecl", (const clang::RecordDecl * (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getCapturedRecordDecl , py::return_value_policy::reference_internal )
        .def("setCapturedRecordDecl", (void (clang::CapturedStmt::*)(clang::RecordDecl *))&clang::CapturedStmt::setCapturedRecordDecl  )
        .def("capturesVariable", (bool (clang::CapturedStmt::*)(const clang::VarDecl *) const)&clang::CapturedStmt::capturesVariable  )
        //.def("captures", []( clang::CapturedStmt& self) -> llvm::iterator_range<clang::CapturedStmt::Capture *> {
        // return self.captures();
        //} )
        //.def("captures", [](const clang::CapturedStmt& self) -> llvm::iterator_range<const clang::CapturedStmt::Capture *> {
        // return self.captures();
        //} )
        .def("capture_size", (unsigned int (clang::CapturedStmt::*)() const)&clang::CapturedStmt::capture_size  )
        //.def("capture_inits", []( clang::CapturedStmt& self) -> llvm::iterator_range<clang::Expr **> {
        // return self.capture_inits();
        //} )
        //.def("capture_inits", [](const clang::CapturedStmt& self) -> llvm::iterator_range<clang::Expr *const *> {
        // return self.capture_inits();
        //} )
        .def("getLocStart", (clang::SourceLocation (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getLocEnd  )
        .def("getSourceRange", (clang::SourceRange (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getSourceRange  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CapturedStmt::*)())&clang::CapturedStmt::children  )
    ;

    py::class_<clang::SourceManager>(m, "SourceManager" )

        .def("clearIDTables", (void (clang::SourceManager::*)())&clang::SourceManager::clearIDTables  )
        //.def("getDiagnostics", (clang::DiagnosticsEngine & (clang::SourceManager::*)() const)&clang::SourceManager::getDiagnostics  )
        //.def("getFileManager", (clang::FileManager & (clang::SourceManager::*)() const)&clang::SourceManager::getFileManager  )
        .def("setOverridenFilesKeepOriginalName", (void (clang::SourceManager::*)(bool))&clang::SourceManager::setOverridenFilesKeepOriginalName  )
        .def("userFilesAreVolatile", (bool (clang::SourceManager::*)() const)&clang::SourceManager::userFilesAreVolatile  )
        //.def("getModuleBuildStack", (llvm::ArrayRef<std::pair<std::basic_string<char>, clang::FullSourceLoc> > (clang::SourceManager::*)() const)&clang::SourceManager::getModuleBuildStack  )
        //.def("setModuleBuildStack", (void (clang::SourceManager::*)(llvm::ArrayRef<std::pair<std::basic_string<char>, clang::FullSourceLoc> >))&clang::SourceManager::setModuleBuildStack  )
        //.def("pushModuleBuildStack", (void (clang::SourceManager::*)(llvm::StringRef, clang::FullSourceLoc))&clang::SourceManager::pushModuleBuildStack  )
        //.def("getMainFileID", (clang::FileID (clang::SourceManager::*)() const)&clang::SourceManager::getMainFileID  )
        //.def("setMainFileID", (void (clang::SourceManager::*)(clang::FileID))&clang::SourceManager::setMainFileID  )
        //.def("setPreambleFileID", (void (clang::SourceManager::*)(clang::FileID))&clang::SourceManager::setPreambleFileID  )
        //.def("getPreambleFileID", (clang::FileID (clang::SourceManager::*)() const)&clang::SourceManager::getPreambleFileID  )
        //.def("createFileID", []( clang::SourceManager& self, const clang::FileEntry * SourceFile , clang::SourceLocation IncludePos , clang::SrcMgr::CharacteristicKind FileCharacter , int LoadedID , unsigned int LoadedOffset) -> clang::FileID {
        // return self.createFileID(SourceFile, IncludePos, FileCharacter, LoadedID, LoadedOffset);
        //} )
        //.def("createFileID", []( clang::SourceManager& self, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> > Buffer , clang::SrcMgr::CharacteristicKind FileCharacter , int LoadedID , unsigned int LoadedOffset , clang::SourceLocation IncludeLoc) -> clang::FileID {
        // return self.createFileID(Buffer, FileCharacter, LoadedID, LoadedOffset, IncludeLoc);
        //} )
        //.def("getOrCreateFileID", (clang::FileID (clang::SourceManager::*)(const clang::FileEntry *, clang::SrcMgr::CharacteristicKind))&clang::SourceManager::getOrCreateFileID  )
        .def("createMacroArgExpansionLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, unsigned int))&clang::SourceManager::createMacroArgExpansionLoc  )
        .def("createExpansionLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, clang::SourceLocation, unsigned int, int, unsigned int))&clang::SourceManager::createExpansionLoc  )
        //.def("getMemoryBufferForFile", (llvm::MemoryBuffer * (clang::SourceManager::*)(const clang::FileEntry *, bool *))&clang::SourceManager::getMemoryBufferForFile  )
        //.def("overrideFileContents", []( clang::SourceManager& self, const clang::FileEntry * SourceFile , llvm::MemoryBuffer * Buffer , bool DoNotFree)  {
        //  self.overrideFileContents(SourceFile, Buffer, DoNotFree);
        //} )
        //.def("overrideFileContents", []( clang::SourceManager& self, const clang::FileEntry * SourceFile , std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> > Buffer)  {
        //  self.overrideFileContents(SourceFile, Buffer);
        //} )
        //.def("overrideFileContents", []( clang::SourceManager& self, const clang::FileEntry * SourceFile , const clang::FileEntry * NewFile)  {
        //  self.overrideFileContents(SourceFile, NewFile);
        //} )
        //.def("isFileOverridden", (bool (clang::SourceManager::*)(const clang::FileEntry *))&clang::SourceManager::isFileOverridden  )
        //.def("disableFileContentsOverride", (void (clang::SourceManager::*)(const clang::FileEntry *))&clang::SourceManager::disableFileContentsOverride  )
        //.def("setFileIsTransient", (void (clang::SourceManager::*)(const clang::FileEntry *))&clang::SourceManager::setFileIsTransient  )
        .def("setAllFilesAreTransient", (void (clang::SourceManager::*)(bool))&clang::SourceManager::setAllFilesAreTransient  )
        //.def("getBuffer", [](const clang::SourceManager& self, clang::FileID FID , clang::SourceLocation Loc , bool * Invalid) -> llvm::MemoryBuffer * {
        // return self.getBuffer(FID, Loc, Invalid);
        //} )
        //.def("getBuffer", [](const clang::SourceManager& self, clang::FileID FID , bool * Invalid) -> llvm::MemoryBuffer * {
        // return self.getBuffer(FID, Invalid);
        //} )
        //.def("getFileEntryForID", (const clang::FileEntry * (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getFileEntryForID , py::return_value_policy::reference_internal )
        //.def("getFileEntryForSLocEntry", (const clang::FileEntry * (clang::SourceManager::*)(const clang::SrcMgr::SLocEntry &) const)&clang::SourceManager::getFileEntryForSLocEntry , py::return_value_policy::reference_internal )
        //.def("getBufferData", (llvm::StringRef (clang::SourceManager::*)(clang::FileID, bool *) const)&clang::SourceManager::getBufferData  )
        //.def("getNumCreatedFIDsForFileID", (unsigned int (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getNumCreatedFIDsForFileID  )
        //.def("setNumCreatedFIDsForFileID", (void (clang::SourceManager::*)(clang::FileID, unsigned int) const)&clang::SourceManager::setNumCreatedFIDsForFileID  )
        //.def("getFileID", (clang::FileID (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileID  )
        .def("getFilename", (llvm::StringRef (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFilename  )
        //.def("getLocForStartOfFile", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getLocForStartOfFile  )
        //.def("getLocForEndOfFile", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getLocForEndOfFile  )
        //.def("getIncludeLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getIncludeLoc  )
        //.def("getModuleImportLoc", (std::pair<clang::SourceLocation, llvm::StringRef> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getModuleImportLoc  )
        .def("getExpansionLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getExpansionLoc  )
        .def("getFileLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileLoc  )
        //.def("getImmediateExpansionRange", (std::pair<clang::SourceLocation, clang::SourceLocation> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getImmediateExpansionRange  )
        //.def("getExpansionRange", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> std::pair<clang::SourceLocation, clang::SourceLocation> {
        // return self.getExpansionRange(Loc);
        //} )
        .def("getExpansionRange", [](const clang::SourceManager& self, clang::SourceRange Range) -> clang::SourceRange {
         return self.getExpansionRange(Range);
        } )
        .def("getSpellingLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getSpellingLoc  )
        .def("getImmediateSpellingLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getImmediateSpellingLoc  )
        //.def("getDecomposedLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getDecomposedLoc  )
        //.def("getDecomposedExpansionLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getDecomposedExpansionLoc  )
        //.def("getDecomposedSpellingLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getDecomposedSpellingLoc  )
        //.def("getDecomposedIncludedLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getDecomposedIncludedLoc  )
        .def("getFileOffset", (unsigned int (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileOffset  )
        .def("isMacroArgExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation *) const)&clang::SourceManager::isMacroArgExpansion  )
        .def("isMacroBodyExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isMacroBodyExpansion  )
        .def("isAtStartOfImmediateMacroExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation *) const)&clang::SourceManager::isAtStartOfImmediateMacroExpansion  )
        .def("isAtEndOfImmediateMacroExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation *) const)&clang::SourceManager::isAtEndOfImmediateMacroExpansion  )
        .def("isInSLocAddrSpace", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, unsigned int, unsigned int *) const)&clang::SourceManager::isInSLocAddrSpace  )
        .def("isInSameSLocAddrSpace", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, int *) const)&clang::SourceManager::isInSameSLocAddrSpace  )
        .def("getCharacterData", [](const clang::SourceManager& self, clang::SourceLocation SL) -> const char * {
          bool Invalid = false;
          const char * res = self.getCharacterData(SL, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        //.def("getColumnNumber", (unsigned int (clang::SourceManager::*)(clang::FileID, unsigned int, bool *) const)&clang::SourceManager::getColumnNumber  )
        .def("getSpellingColumnNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getSpellingColumnNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getExpansionColumnNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getExpansionColumnNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getPresumedColumnNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getPresumedColumnNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        //.def("getLineNumber", (unsigned int (clang::SourceManager::*)(clang::FileID, unsigned int, bool *) const)&clang::SourceManager::getLineNumber  )
        .def("getSpellingLineNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getSpellingLineNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getExpansionLineNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getExpansionLineNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getPresumedLineNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getPresumedLineNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getBufferName", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> const char * {
          bool Invalid = false;
          const char * res = self.getBufferName(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        //.def("getFileCharacteristic", (clang::SrcMgr::CharacteristicKind (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileCharacteristic  )
        //.def("getPresumedLoc", (clang::PresumedLoc (clang::SourceManager::*)(clang::SourceLocation, bool) const)&clang::SourceManager::getPresumedLoc  )
        .def("isInMainFile", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isInMainFile  )
        .def("isWrittenInSameFile", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation) const)&clang::SourceManager::isWrittenInSameFile  )
        .def("isWrittenInMainFile", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isWrittenInMainFile  )
        .def("isInSystemHeader", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isInSystemHeader  )
        .def("isInExternCSystemHeader", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isInExternCSystemHeader  )
        .def("isInSystemMacro", (bool (clang::SourceManager::*)(clang::SourceLocation))&clang::SourceManager::isInSystemMacro  )
        //.def("getFileIDSize", (unsigned int (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getFileIDSize  )
        //.def("isInFileID", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::FileID, unsigned int *) const)&clang::SourceManager::isInFileID  )
        .def("getLineTableFilenameID", (unsigned int (clang::SourceManager::*)(llvm::StringRef))&clang::SourceManager::getLineTableFilenameID  )
        .def("AddLineNote", []( clang::SourceManager& self, clang::SourceLocation Loc , unsigned int LineNo , int FilenameID)  {
          self.AddLineNote(Loc, LineNo, FilenameID);
        } )
        .def("AddLineNote", []( clang::SourceManager& self, clang::SourceLocation Loc , unsigned int LineNo , int FilenameID , bool IsFileEntry , bool IsFileExit , bool IsSystemHeader , bool IsExternCHeader)  {
          self.AddLineNote(Loc, LineNo, FilenameID, IsFileEntry, IsFileExit, IsSystemHeader, IsExternCHeader);
        } )
        .def("hasLineTable", (bool (clang::SourceManager::*)() const)&clang::SourceManager::hasLineTable  )
        //.def("getLineTable", (clang::LineTableInfo & (clang::SourceManager::*)())&clang::SourceManager::getLineTable  )
        .def("getContentCacheSize", (unsigned long (clang::SourceManager::*)() const)&clang::SourceManager::getContentCacheSize  )
        //.def("getMemoryBufferSizes", (clang::SourceManager::MemoryBufferSizes (clang::SourceManager::*)() const)&clang::SourceManager::getMemoryBufferSizes  )
        .def("getDataStructureSizes", (unsigned long (clang::SourceManager::*)() const)&clang::SourceManager::getDataStructureSizes  )
        //.def("translateFileLineCol", (clang::SourceLocation (clang::SourceManager::*)(const clang::FileEntry *, unsigned int, unsigned int) const)&clang::SourceManager::translateFileLineCol  )
        //.def("translateFile", (clang::FileID (clang::SourceManager::*)(const clang::FileEntry *) const)&clang::SourceManager::translateFile  )
        //.def("translateLineCol", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID, unsigned int, unsigned int) const)&clang::SourceManager::translateLineCol  )
        .def("getMacroArgExpandedLocation", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getMacroArgExpandedLocation  )
        .def("isBeforeInTranslationUnit", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation) const)&clang::SourceManager::isBeforeInTranslationUnit  )
        .def("isBeforeInSLocAddrSpace", [](const clang::SourceManager& self, clang::SourceLocation LHS , clang::SourceLocation RHS) -> bool {
         return self.isBeforeInSLocAddrSpace(LHS, RHS);
        } )
        .def("isBeforeInSLocAddrSpace", [](const clang::SourceManager& self, clang::SourceLocation LHS , unsigned int RHS) -> bool {
         return self.isBeforeInSLocAddrSpace(LHS, RHS);
        } )
        //.def("hasFileInfo", (bool (clang::SourceManager::*)(const clang::FileEntry *) const)&clang::SourceManager::hasFileInfo  )
        .def("PrintStats", (void (clang::SourceManager::*)() const)&clang::SourceManager::PrintStats  )
        .def("dump", (void (clang::SourceManager::*)() const)&clang::SourceManager::dump  )
        .def("local_sloc_entry_size", (unsigned int (clang::SourceManager::*)() const)&clang::SourceManager::local_sloc_entry_size  )
        //.def("getLocalSLocEntry", (const clang::SrcMgr::SLocEntry & (clang::SourceManager::*)(unsigned int, bool *) const)&clang::SourceManager::getLocalSLocEntry  )
        .def("loaded_sloc_entry_size", (unsigned int (clang::SourceManager::*)() const)&clang::SourceManager::loaded_sloc_entry_size  )
        //.def("getLoadedSLocEntry", (const clang::SrcMgr::SLocEntry & (clang::SourceManager::*)(unsigned int, bool *) const)&clang::SourceManager::getLoadedSLocEntry  )
        //.def("getSLocEntry", (const clang::SrcMgr::SLocEntry & (clang::SourceManager::*)(clang::FileID, bool *) const)&clang::SourceManager::getSLocEntry  )
        .def("getNextLocalOffset", (unsigned int (clang::SourceManager::*)() const)&clang::SourceManager::getNextLocalOffset  )
        //.def("setExternalSLocEntrySource", (void (clang::SourceManager::*)(clang::ExternalSLocEntrySource *))&clang::SourceManager::setExternalSLocEntrySource  )
        //.def("AllocateLoadedSLocEntries", (std::pair<int, unsigned int> (clang::SourceManager::*)(unsigned int, unsigned int))&clang::SourceManager::AllocateLoadedSLocEntries  )
        .def("isLoadedSourceLocation", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isLoadedSourceLocation  )
        .def("isLocalSourceLocation", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isLocalSourceLocation  )
        //.def("isLoadedFileID", (bool (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::isLoadedFileID  )
        //.def("isLocalFileID", (bool (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::isLocalFileID  )
        .def("getImmediateMacroCallerLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getImmediateMacroCallerLoc  )
    ;

    py::class_<clang::ASTContext>(m, "ASTContext" )

        //.def("getParents", (clang::ASTContext::DynTypedNodeList (clang::ASTContext::*)(const clang::ast_type_traits::DynTypedNode &))&clang::ASTContext::getParents  )
        //.def("getPrintingPolicy", (const clang::PrintingPolicy & (clang::ASTContext::*)() const)&clang::ASTContext::getPrintingPolicy  )
        //.def("setPrintingPolicy", (void (clang::ASTContext::*)(const clang::PrintingPolicy &))&clang::ASTContext::setPrintingPolicy  )
        .def("getSourceManager", []( clang::ASTContext& self) -> clang::SourceManager & {
         return self.getSourceManager();
        } )
        .def("getSourceManager", [](const clang::ASTContext& self) -> const clang::SourceManager & {
         return self.getSourceManager();
        } )
        //.def("getAllocator", (llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096, 4096> & (clang::ASTContext::*)() const)&clang::ASTContext::getAllocator  )
        .def("Deallocate", (void (clang::ASTContext::*)(void *) const)&clang::ASTContext::Deallocate  )
        .def("getASTAllocatedMemory", (unsigned long (clang::ASTContext::*)() const)&clang::ASTContext::getASTAllocatedMemory  )
        .def("getSideTableAllocatedMemory", (unsigned long (clang::ASTContext::*)() const)&clang::ASTContext::getSideTableAllocatedMemory  )
        //.def("getDiagAllocator", (clang::PartialDiagnostic::StorageAllocator & (clang::ASTContext::*)())&clang::ASTContext::getDiagAllocator  )
        //.def("getTargetInfo", (const clang::TargetInfo & (clang::ASTContext::*)() const)&clang::ASTContext::getTargetInfo  )
        //.def("getAuxTargetInfo", (const clang::TargetInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getAuxTargetInfo , py::return_value_policy::reference_internal )
        .def("getIntTypeForBitwidth", (clang::QualType (clang::ASTContext::*)(unsigned int, unsigned int) const)&clang::ASTContext::getIntTypeForBitwidth  )
        .def("getRealTypeForBitwidth", (clang::QualType (clang::ASTContext::*)(unsigned int) const)&clang::ASTContext::getRealTypeForBitwidth  )
        .def("AtomicUsesUnsupportedLibcall", (bool (clang::ASTContext::*)(const clang::AtomicExpr *) const)&clang::ASTContext::AtomicUsesUnsupportedLibcall  )
        //.def("getLangOpts", (const clang::LangOptions & (clang::ASTContext::*)() const)&clang::ASTContext::getLangOpts  )
        //.def("getSanitizerBlacklist", (const clang::SanitizerBlacklist & (clang::ASTContext::*)() const)&clang::ASTContext::getSanitizerBlacklist  )
        //.def("getDiagnostics", (clang::DiagnosticsEngine & (clang::ASTContext::*)() const)&clang::ASTContext::getDiagnostics  )
        //.def("getFullLoc", (clang::FullSourceLoc (clang::ASTContext::*)(clang::SourceLocation) const)&clang::ASTContext::getFullLoc  )
        //.def("getRawCommentForDeclNoCache", (clang::RawComment * (clang::ASTContext::*)(const clang::Decl *) const)&clang::ASTContext::getRawCommentForDeclNoCache , py::return_value_policy::reference_internal )
        //.def("getRawCommentList", (clang::RawCommentList & (clang::ASTContext::*)())&clang::ASTContext::getRawCommentList  )
        //.def("addComment", (void (clang::ASTContext::*)(const clang::RawComment &))&clang::ASTContext::addComment  )
        //.def("getCommentForDecl", (clang::comments::FullComment * (clang::ASTContext::*)(const clang::Decl *, const clang::Preprocessor *) const)&clang::ASTContext::getCommentForDecl  )
        //.def("getLocalCommentForDeclUncached", (clang::comments::FullComment * (clang::ASTContext::*)(const clang::Decl *) const)&clang::ASTContext::getLocalCommentForDeclUncached  )
        //.def("cloneFullComment", (clang::comments::FullComment * (clang::ASTContext::*)(clang::comments::FullComment *, const clang::Decl *) const)&clang::ASTContext::cloneFullComment  )
        //.def("getCommentCommandTraits", (clang::comments::CommandTraits & (clang::ASTContext::*)() const)&clang::ASTContext::getCommentCommandTraits  )
        //.def("getDeclAttrs", (llvm::SmallVector<clang::Attr *, 2> & (clang::ASTContext::*)(const clang::Decl *))&clang::ASTContext::getDeclAttrs  )
        .def("eraseDeclAttrs", (void (clang::ASTContext::*)(const clang::Decl *))&clang::ASTContext::eraseDeclAttrs  )
        //.def("getInstantiatedFromStaticDataMember", (clang::MemberSpecializationInfo * (clang::ASTContext::*)(const clang::VarDecl *))&clang::ASTContext::getInstantiatedFromStaticDataMember , py::return_value_policy::reference_internal )
        //.def("getTemplateOrSpecializationInfo", (llvm::PointerUnion<clang::VarTemplateDecl *, clang::MemberSpecializationInfo *> (clang::ASTContext::*)(const clang::VarDecl *))&clang::ASTContext::getTemplateOrSpecializationInfo  )
        .def("getClassScopeSpecializationPattern", (clang::FunctionDecl * (clang::ASTContext::*)(const clang::FunctionDecl *))&clang::ASTContext::getClassScopeSpecializationPattern , py::return_value_policy::reference_internal )
        .def("setClassScopeSpecializationPattern", (void (clang::ASTContext::*)(clang::FunctionDecl *, clang::FunctionDecl *))&clang::ASTContext::setClassScopeSpecializationPattern  )
        .def("setInstantiatedFromStaticDataMember", (void (clang::ASTContext::*)(clang::VarDecl *, clang::VarDecl *, clang::TemplateSpecializationKind, clang::SourceLocation))&clang::ASTContext::setInstantiatedFromStaticDataMember  )
        //.def("setTemplateOrSpecializationInfo", (void (clang::ASTContext::*)(clang::VarDecl *, llvm::PointerUnion<clang::VarTemplateDecl *, clang::MemberSpecializationInfo *>))&clang::ASTContext::setTemplateOrSpecializationInfo  )
        .def("getInstantiatedFromUsingDecl", (clang::NamedDecl * (clang::ASTContext::*)(clang::UsingDecl *))&clang::ASTContext::getInstantiatedFromUsingDecl , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromUsingDecl", (void (clang::ASTContext::*)(clang::UsingDecl *, clang::NamedDecl *))&clang::ASTContext::setInstantiatedFromUsingDecl  )
        .def("setInstantiatedFromUsingShadowDecl", (void (clang::ASTContext::*)(clang::UsingShadowDecl *, clang::UsingShadowDecl *))&clang::ASTContext::setInstantiatedFromUsingShadowDecl  )
        .def("getInstantiatedFromUsingShadowDecl", (clang::UsingShadowDecl * (clang::ASTContext::*)(clang::UsingShadowDecl *))&clang::ASTContext::getInstantiatedFromUsingShadowDecl , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromUnnamedFieldDecl", (clang::FieldDecl * (clang::ASTContext::*)(clang::FieldDecl *))&clang::ASTContext::getInstantiatedFromUnnamedFieldDecl , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromUnnamedFieldDecl", (void (clang::ASTContext::*)(clang::FieldDecl *, clang::FieldDecl *))&clang::ASTContext::setInstantiatedFromUnnamedFieldDecl  )
        .def("overridden_methods_size", (unsigned int (clang::ASTContext::*)(const clang::CXXMethodDecl *) const)&clang::ASTContext::overridden_methods_size  )
        //.def("overridden_methods", (llvm::iterator_range<const clang::CXXMethodDecl *const *> (clang::ASTContext::*)(const clang::CXXMethodDecl *) const)&clang::ASTContext::overridden_methods  )
        .def("addOverriddenMethod", (void (clang::ASTContext::*)(const clang::CXXMethodDecl *, const clang::CXXMethodDecl *))&clang::ASTContext::addOverriddenMethod  )
        //.def("getOverriddenMethods", (void (clang::ASTContext::*)(const clang::NamedDecl *, llvm::SmallVectorImpl<const clang::NamedDecl *> &) const)&clang::ASTContext::getOverriddenMethods  )
        .def("addedLocalImportDecl", (void (clang::ASTContext::*)(clang::ImportDecl *))&clang::ASTContext::addedLocalImportDecl  )
        //.def("local_imports", (llvm::iterator_range<clang::ASTContext::import_iterator> (clang::ASTContext::*)() const)&clang::ASTContext::local_imports  )
        .def("getPrimaryMergedDecl", (clang::Decl * (clang::ASTContext::*)(clang::Decl *))&clang::ASTContext::getPrimaryMergedDecl , py::return_value_policy::reference_internal )
        .def("setPrimaryMergedDecl", (void (clang::ASTContext::*)(clang::Decl *, clang::Decl *))&clang::ASTContext::setPrimaryMergedDecl  )
        //.def("mergeDefinitionIntoModule", (void (clang::ASTContext::*)(clang::NamedDecl *, clang::Module *, bool))&clang::ASTContext::mergeDefinitionIntoModule  )
        .def("deduplicateMergedDefinitonsFor", (void (clang::ASTContext::*)(clang::NamedDecl *))&clang::ASTContext::deduplicateMergedDefinitonsFor  )
        //.def("getModulesWithMergedDefinition", (llvm::ArrayRef<clang::Module *> (clang::ASTContext::*)(clang::NamedDecl *))&clang::ASTContext::getModulesWithMergedDefinition  )
        .def("getTranslationUnitDecl", (clang::TranslationUnitDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getTranslationUnitDecl , py::return_value_policy::reference_internal )
        .def("getExternCContextDecl", (clang::ExternCContextDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getExternCContextDecl , py::return_value_policy::reference_internal )
        .def("getMakeIntegerSeqDecl", (clang::BuiltinTemplateDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getMakeIntegerSeqDecl , py::return_value_policy::reference_internal )
        .def("getTypePackElementDecl", (clang::BuiltinTemplateDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getTypePackElementDecl , py::return_value_policy::reference_internal )
        //.def("setExternalSource", (void (clang::ASTContext::*)(llvm::IntrusiveRefCntPtr<clang::ExternalASTSource>))&clang::ASTContext::setExternalSource  )
        //.def("getExternalSource", (clang::ExternalASTSource * (clang::ASTContext::*)() const)&clang::ASTContext::getExternalSource , py::return_value_policy::reference_internal )
        //.def("setASTMutationListener", (void (clang::ASTContext::*)(clang::ASTMutationListener *))&clang::ASTContext::setASTMutationListener  )
        //.def("getASTMutationListener", (clang::ASTMutationListener * (clang::ASTContext::*)() const)&clang::ASTContext::getASTMutationListener , py::return_value_policy::reference_internal )
        .def("PrintStats", (void (clang::ASTContext::*)() const)&clang::ASTContext::PrintStats  )
        //.def("getTypes", (const llvm::SmallVectorImpl<clang::Type *> & (clang::ASTContext::*)() const)&clang::ASTContext::getTypes  )
        //.def("buildBuiltinTemplateDecl", (clang::BuiltinTemplateDecl * (clang::ASTContext::*)(clang::BuiltinTemplateKind, const clang::IdentifierInfo *) const)&clang::ASTContext::buildBuiltinTemplateDecl , py::return_value_policy::reference_internal )
        //.def("buildImplicitRecord", (clang::RecordDecl * (clang::ASTContext::*)(llvm::StringRef, clang::TagTypeKind) const)&clang::ASTContext::buildImplicitRecord , py::return_value_policy::reference_internal )
        .def("buildImplicitTypedef", (clang::TypedefDecl * (clang::ASTContext::*)(clang::QualType, llvm::StringRef) const)&clang::ASTContext::buildImplicitTypedef , py::return_value_policy::reference_internal )
        .def("getInt128Decl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getInt128Decl , py::return_value_policy::reference_internal )
        .def("getUInt128Decl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getUInt128Decl , py::return_value_policy::reference_internal )
        .def("getAddrSpaceQualType", (clang::QualType (clang::ASTContext::*)(clang::QualType, unsigned int) const)&clang::ASTContext::getAddrSpaceQualType  )
        .def("getObjCGCQualType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Qualifiers::GC) const)&clang::ASTContext::getObjCGCQualType  )
        .def("getRestrictType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getRestrictType  )
        .def("getVolatileType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getVolatileType  )
        .def("getConstType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getConstType  )
        //.def("adjustFunctionType", (const clang::FunctionType * (clang::ASTContext::*)(const clang::FunctionType *, clang::FunctionType::ExtInfo))&clang::ASTContext::adjustFunctionType , py::return_value_policy::reference_internal )
        //.def("getCanonicalFunctionResultType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCanonicalFunctionResultType  )
        .def("adjustDeducedFunctionResultType", (void (clang::ASTContext::*)(clang::FunctionDecl *, clang::QualType))&clang::ASTContext::adjustDeducedFunctionResultType  )
        //.def("adjustExceptionSpec", (void (clang::ASTContext::*)(clang::FunctionDecl *, const clang::FunctionProtoType::ExceptionSpecInfo &, bool))&clang::ASTContext::adjustExceptionSpec  )
        .def("getComplexType", [](const clang::ASTContext& self, clang::QualType T) -> clang::QualType {
         return self.getComplexType(T);
        } )
        //.def("getComplexType", [](const clang::ASTContext& self, clang::CanQual<clang::Type> T) -> clang::CanQual<clang::Type> {
        // return self.getComplexType(T);
        //} )
        .def("getPointerType", [](const clang::ASTContext& self, clang::QualType T) -> clang::QualType {
         return self.getPointerType(T);
        } )
        //.def("getPointerType", [](const clang::ASTContext& self, clang::CanQual<clang::Type> T) -> clang::CanQual<clang::Type> {
        // return self.getPointerType(T);
        //} )
        .def("getAdjustedType", [](const clang::ASTContext& self, clang::QualType Orig , clang::QualType New) -> clang::QualType {
         return self.getAdjustedType(Orig, New);
        } )
        //.def("getAdjustedType", [](const clang::ASTContext& self, clang::CanQual<clang::Type> Orig , clang::CanQual<clang::Type> New) -> clang::CanQual<clang::Type> {
        // return self.getAdjustedType(Orig, New);
        //} )
        .def("getDecayedType", [](const clang::ASTContext& self, clang::QualType T) -> clang::QualType {
         return self.getDecayedType(T);
        } )
        //.def("getDecayedType", [](const clang::ASTContext& self, clang::CanQual<clang::Type> T) -> clang::CanQual<clang::Type> {
        // return self.getDecayedType(T);
        //} )
        .def("getAtomicType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAtomicType  )
        .def("getBlockPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getBlockPointerType  )
        .def("getBlockDescriptorType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBlockDescriptorType  )
        .def("getPipeType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getPipeType  )
        .def("getBlockDescriptorExtendedType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBlockDescriptorExtendedType  )
        .def("setcudaConfigureCallDecl", (void (clang::ASTContext::*)(clang::FunctionDecl *))&clang::ASTContext::setcudaConfigureCallDecl  )
        .def("getcudaConfigureCallDecl", (clang::FunctionDecl * (clang::ASTContext::*)())&clang::ASTContext::getcudaConfigureCallDecl , py::return_value_policy::reference_internal )
        .def("BlockRequiresCopying", (bool (clang::ASTContext::*)(clang::QualType, const clang::VarDecl *))&clang::ASTContext::BlockRequiresCopying  )
        .def("getByrefLifetime", (bool (clang::ASTContext::*)(clang::QualType, clang::Qualifiers::ObjCLifetime &, bool &) const)&clang::ASTContext::getByrefLifetime  )
        .def("getLValueReferenceType", (clang::QualType (clang::ASTContext::*)(clang::QualType, bool) const)&clang::ASTContext::getLValueReferenceType  )
        .def("getRValueReferenceType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getRValueReferenceType  )
        .def("getMemberPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType, const clang::Type *) const)&clang::ASTContext::getMemberPointerType  )
        //.def("getVariableArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::ArrayType::ArraySizeModifier, unsigned int, clang::SourceRange) const)&clang::ASTContext::getVariableArrayType  )
        //.def("getDependentSizedArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::ArrayType::ArraySizeModifier, unsigned int, clang::SourceRange) const)&clang::ASTContext::getDependentSizedArrayType  )
        //.def("getIncompleteArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::ArrayType::ArraySizeModifier, unsigned int) const)&clang::ASTContext::getIncompleteArrayType  )
        //.def("getConstantArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, const llvm::APInt &, clang::ArrayType::ArraySizeModifier, unsigned int) const)&clang::ASTContext::getConstantArrayType  )
        .def("getVariableArrayDecayedType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getVariableArrayDecayedType  )
        //.def("getVectorType", (clang::QualType (clang::ASTContext::*)(clang::QualType, unsigned int, clang::VectorType::VectorKind) const)&clang::ASTContext::getVectorType  )
        .def("getExtVectorType", (clang::QualType (clang::ASTContext::*)(clang::QualType, unsigned int) const)&clang::ASTContext::getExtVectorType  )
        .def("getDependentSizedExtVectorType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::SourceLocation) const)&clang::ASTContext::getDependentSizedExtVectorType  )
        //.def("getFunctionNoProtoType", [](const clang::ASTContext& self, clang::QualType ResultTy , const clang::FunctionType::ExtInfo & Info) -> clang::QualType {
        // return self.getFunctionNoProtoType(ResultTy, Info);
        //} )
        .def("getFunctionNoProtoType", [](const clang::ASTContext& self, clang::QualType ResultTy) -> clang::QualType {
         return self.getFunctionNoProtoType(ResultTy);
        } )
        //.def("getFunctionType", (clang::QualType (clang::ASTContext::*)(clang::QualType, llvm::ArrayRef<clang::QualType>, const clang::FunctionProtoType::ExtProtoInfo &) const)&clang::ASTContext::getFunctionType  )
        .def("getTypeDeclType", (clang::QualType (clang::ASTContext::*)(const clang::TypeDecl *, const clang::TypeDecl *) const)&clang::ASTContext::getTypeDeclType  )
        .def("getTypedefType", (clang::QualType (clang::ASTContext::*)(const clang::TypedefNameDecl *, clang::QualType) const)&clang::ASTContext::getTypedefType  )
        .def("getRecordType", (clang::QualType (clang::ASTContext::*)(const clang::RecordDecl *) const)&clang::ASTContext::getRecordType  )
        .def("getEnumType", (clang::QualType (clang::ASTContext::*)(const clang::EnumDecl *) const)&clang::ASTContext::getEnumType  )
        .def("getInjectedClassNameType", (clang::QualType (clang::ASTContext::*)(clang::CXXRecordDecl *, clang::QualType) const)&clang::ASTContext::getInjectedClassNameType  )
        //.def("getAttributedType", (clang::QualType (clang::ASTContext::*)(clang::AttributedType::Kind, clang::QualType, clang::QualType))&clang::ASTContext::getAttributedType  )
        //.def("getSubstTemplateTypeParmType", (clang::QualType (clang::ASTContext::*)(const clang::TemplateTypeParmType *, clang::QualType) const)&clang::ASTContext::getSubstTemplateTypeParmType  )
        //.def("getSubstTemplateTypeParmPackType", (clang::QualType (clang::ASTContext::*)(const clang::TemplateTypeParmType *, const clang::TemplateArgument &))&clang::ASTContext::getSubstTemplateTypeParmPackType  )
        .def("getTemplateTypeParmType", (clang::QualType (clang::ASTContext::*)(unsigned int, unsigned int, bool, clang::TemplateTypeParmDecl *) const)&clang::ASTContext::getTemplateTypeParmType  )
        //.def("getTemplateSpecializationType", [](const clang::ASTContext& self, clang::TemplateName T , llvm::ArrayRef<clang::TemplateArgument> Args , clang::QualType Canon) -> clang::QualType {
        // return self.getTemplateSpecializationType(T, Args, Canon);
        //} )
        //.def("getCanonicalTemplateSpecializationType", (clang::QualType (clang::ASTContext::*)(clang::TemplateName, llvm::ArrayRef<clang::TemplateArgument>) const)&clang::ASTContext::getCanonicalTemplateSpecializationType  )
        //.def("getTemplateSpecializationType", [](const clang::ASTContext& self, clang::TemplateName T , const clang::TemplateArgumentListInfo & Args , clang::QualType Canon) -> clang::QualType {
        // return self.getTemplateSpecializationType(T, Args, Canon);
        //} )
        //.def("getTemplateSpecializationTypeInfo", (clang::TypeSourceInfo * (clang::ASTContext::*)(clang::TemplateName, clang::SourceLocation, const clang::TemplateArgumentListInfo &, clang::QualType) const)&clang::ASTContext::getTemplateSpecializationTypeInfo , py::return_value_policy::reference_internal )
        .def("getParenType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getParenType  )
        //.def("getElaboratedType", (clang::QualType (clang::ASTContext::*)(clang::ElaboratedTypeKeyword, clang::NestedNameSpecifier *, clang::QualType) const)&clang::ASTContext::getElaboratedType  )
        //.def("getDependentNameType", (clang::QualType (clang::ASTContext::*)(clang::ElaboratedTypeKeyword, clang::NestedNameSpecifier *, const clang::IdentifierInfo *, clang::QualType) const)&clang::ASTContext::getDependentNameType  )
        //.def("getDependentTemplateSpecializationType", [](const clang::ASTContext& self, clang::ElaboratedTypeKeyword Keyword , clang::NestedNameSpecifier * NNS , const clang::IdentifierInfo * Name , const clang::TemplateArgumentListInfo & Args) -> clang::QualType {
        // return self.getDependentTemplateSpecializationType(Keyword, NNS, Name, Args);
        //} )
        //.def("getDependentTemplateSpecializationType", [](const clang::ASTContext& self, clang::ElaboratedTypeKeyword Keyword , clang::NestedNameSpecifier * NNS , const clang::IdentifierInfo * Name , llvm::ArrayRef<clang::TemplateArgument> Args) -> clang::QualType {
        // return self.getDependentTemplateSpecializationType(Keyword, NNS, Name, Args);
        //} )
        //.def("getPackExpansionType", (clang::QualType (clang::ASTContext::*)(clang::QualType, llvm::Optional<unsigned int>))&clang::ASTContext::getPackExpansionType  )
        //.def("getObjCInterfaceType", (clang::QualType (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *, clang::ObjCInterfaceDecl *) const)&clang::ASTContext::getObjCInterfaceType  )
        //.def("getObjCObjectType", [](const clang::ASTContext& self, clang::QualType Base , llvm::ArrayRef<clang::QualType> typeArgs , llvm::ArrayRef<clang::ObjCProtocolDecl *> protocols , bool isKindOf) -> clang::QualType {
        // return self.getObjCObjectType(Base, typeArgs, protocols, isKindOf);
        //} )
        //.def("ObjCObjectAdoptsQTypeProtocols", (bool (clang::ASTContext::*)(clang::QualType, clang::ObjCInterfaceDecl *))&clang::ASTContext::ObjCObjectAdoptsQTypeProtocols  )
        //.def("QIdProtocolsAdoptObjCObjectProtocols", (bool (clang::ASTContext::*)(clang::QualType, clang::ObjCInterfaceDecl *))&clang::ASTContext::QIdProtocolsAdoptObjCObjectProtocols  )
        .def("getObjCObjectPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getObjCObjectPointerType  )
        .def("getTypeOfExprType", (clang::QualType (clang::ASTContext::*)(clang::Expr *) const)&clang::ASTContext::getTypeOfExprType  )
        .def("getTypeOfType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeOfType  )
        .def("getDecltypeType", (clang::QualType (clang::ASTContext::*)(clang::Expr *, clang::QualType) const)&clang::ASTContext::getDecltypeType  )
        //.def("getUnaryTransformType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, clang::UnaryTransformType::UTTKind) const)&clang::ASTContext::getUnaryTransformType  )
        .def("getAutoType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::AutoTypeKeyword, bool) const)&clang::ASTContext::getAutoType  )
        .def("getAutoDeductType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getAutoDeductType  )
        .def("getAutoRRefDeductType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getAutoRRefDeductType  )
        .def("getTagDeclType", (clang::QualType (clang::ASTContext::*)(const clang::TagDecl *) const)&clang::ASTContext::getTagDeclType  )
        //.def("getSizeType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getSizeType  )
        //.def("getIntMaxType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getIntMaxType  )
        //.def("getUIntMaxType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getUIntMaxType  )
        .def("getWCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getWCharType  )
        .def("getWideCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getWideCharType  )
        .def("getSignedWCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getSignedWCharType  )
        .def("getUnsignedWCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getUnsignedWCharType  )
        .def("getWIntType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getWIntType  )
        .def("getIntPtrType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getIntPtrType  )
        .def("getUIntPtrType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getUIntPtrType  )
        .def("getPointerDiffType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getPointerDiffType  )
        .def("getProcessIDType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getProcessIDType  )
        .def("getCFConstantStringType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getCFConstantStringType  )
        .def("getObjCSuperType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSuperType  )
        .def("setObjCSuperType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCSuperType  )
        .def("getRawCFConstantStringType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getRawCFConstantStringType  )
        .def("setCFConstantStringType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setCFConstantStringType  )
        .def("getCFConstantStringDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getCFConstantStringDecl , py::return_value_policy::reference_internal )
        .def("getCFConstantStringTagDecl", (clang::RecordDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getCFConstantStringTagDecl , py::return_value_policy::reference_internal )
        //.def("setObjCConstantStringInterface", (void (clang::ASTContext::*)(clang::ObjCInterfaceDecl *))&clang::ASTContext::setObjCConstantStringInterface  )
        .def("getObjCConstantStringInterface", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCConstantStringInterface  )
        .def("getObjCNSStringType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCNSStringType  )
        .def("setObjCNSStringType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCNSStringType  )
        .def("getObjCIdRedefinitionType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCIdRedefinitionType  )
        .def("setObjCIdRedefinitionType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCIdRedefinitionType  )
        .def("getObjCClassRedefinitionType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCClassRedefinitionType  )
        .def("setObjCClassRedefinitionType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCClassRedefinitionType  )
        .def("getObjCSelRedefinitionType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSelRedefinitionType  )
        .def("setObjCSelRedefinitionType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCSelRedefinitionType  )
        //.def("getNSObjectName", (clang::IdentifierInfo * (clang::ASTContext::*)())&clang::ASTContext::getNSObjectName , py::return_value_policy::reference_internal )
        //.def("getNSCopyingName", (clang::IdentifierInfo * (clang::ASTContext::*)())&clang::ASTContext::getNSCopyingName , py::return_value_policy::reference_internal )
        //.def("getBoolName", (clang::IdentifierInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getBoolName , py::return_value_policy::reference_internal )
        //.def("getMakeIntegerSeqName", (clang::IdentifierInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getMakeIntegerSeqName , py::return_value_policy::reference_internal )
        //.def("getTypePackElementName", (clang::IdentifierInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getTypePackElementName , py::return_value_policy::reference_internal )
        .def("getObjCInstanceType", (clang::QualType (clang::ASTContext::*)())&clang::ASTContext::getObjCInstanceType  )
        .def("getObjCInstanceTypeDecl", (clang::TypedefDecl * (clang::ASTContext::*)())&clang::ASTContext::getObjCInstanceTypeDecl , py::return_value_policy::reference_internal )
        .def("setFILEDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setFILEDecl  )
        .def("getFILEType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getFILEType  )
        .def("setjmp_bufDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setjmp_bufDecl  )
        .def("getjmp_bufType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getjmp_bufType  )
        .def("setsigjmp_bufDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setsigjmp_bufDecl  )
        .def("getsigjmp_bufType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getsigjmp_bufType  )
        .def("setucontext_tDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setucontext_tDecl  )
        .def("getucontext_tType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getucontext_tType  )
        .def("getLogicalOperationType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getLogicalOperationType  )
        //.def("getObjCEncodingForType", (void (clang::ASTContext::*)(clang::QualType, std::basic_string<char> &, const clang::FieldDecl *, clang::QualType *) const)&clang::ASTContext::getObjCEncodingForType  )
        //.def("getObjCEncodingForPropertyType", (void (clang::ASTContext::*)(clang::QualType, std::basic_string<char> &) const)&clang::ASTContext::getObjCEncodingForPropertyType  )
        .def("getLegacyIntegralTypeEncoding", (void (clang::ASTContext::*)(clang::QualType &) const)&clang::ASTContext::getLegacyIntegralTypeEncoding  )
        //.def("getObjCEncodingForTypeQualifier", (void (clang::ASTContext::*)(clang::Decl::ObjCDeclQualifier, std::basic_string<char> &) const)&clang::ASTContext::getObjCEncodingForTypeQualifier  )
        //.def("getObjCEncodingForFunctionDecl", (bool (clang::ASTContext::*)(const clang::FunctionDecl *, std::basic_string<char> &))&clang::ASTContext::getObjCEncodingForFunctionDecl  )
        //.def("getObjCEncodingForMethodDecl", (bool (clang::ASTContext::*)(const clang::ObjCMethodDecl *, std::basic_string<char> &, bool) const)&clang::ASTContext::getObjCEncodingForMethodDecl  )
        //.def("getObjCEncodingForBlock", (std::basic_string<char> (clang::ASTContext::*)(const clang::BlockExpr *) const)&clang::ASTContext::getObjCEncodingForBlock  )
        //.def("getObjCEncodingForPropertyDecl", (void (clang::ASTContext::*)(const clang::ObjCPropertyDecl *, const clang::Decl *, std::basic_string<char> &) const)&clang::ASTContext::getObjCEncodingForPropertyDecl  )
        //.def("ProtocolCompatibleWithProtocol", (bool (clang::ASTContext::*)(clang::ObjCProtocolDecl *, clang::ObjCProtocolDecl *) const)&clang::ASTContext::ProtocolCompatibleWithProtocol  )
        //.def("getObjCPropertyImplDeclForPropertyDecl", (clang::ObjCPropertyImplDecl * (clang::ASTContext::*)(const clang::ObjCPropertyDecl *, const clang::Decl *) const)&clang::ASTContext::getObjCPropertyImplDeclForPropertyDecl , py::return_value_policy::reference_internal )
        //.def("getObjCEncodingTypeSize", (clang::CharUnits (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getObjCEncodingTypeSize  )
        .def("getObjCIdDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCIdDecl , py::return_value_policy::reference_internal )
        .def("getObjCIdType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCIdType  )
        .def("getObjCSelDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSelDecl , py::return_value_policy::reference_internal )
        .def("getObjCSelType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSelType  )
        .def("getObjCClassDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCClassDecl , py::return_value_policy::reference_internal )
        .def("getObjCClassType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCClassType  )
        //.def("getObjCProtocolDecl", (clang::ObjCInterfaceDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCProtocolDecl , py::return_value_policy::reference_internal )
        .def("getBOOLDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getBOOLDecl , py::return_value_policy::reference_internal )
        .def("setBOOLDecl", (void (clang::ASTContext::*)(clang::TypedefDecl *))&clang::ASTContext::setBOOLDecl  )
        .def("getBOOLType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBOOLType  )
        .def("getObjCProtoType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCProtoType  )
        .def("getBuiltinVaListDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinVaListDecl , py::return_value_policy::reference_internal )
        .def("getBuiltinVaListType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinVaListType  )
        .def("getVaListTagDecl", (clang::Decl * (clang::ASTContext::*)() const)&clang::ASTContext::getVaListTagDecl , py::return_value_policy::reference_internal )
        .def("getBuiltinMSVaListDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinMSVaListDecl , py::return_value_policy::reference_internal )
        .def("getBuiltinMSVaListType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinMSVaListType  )
        .def("getCVRQualifiedType", (clang::QualType (clang::ASTContext::*)(clang::QualType, unsigned int) const)&clang::ASTContext::getCVRQualifiedType  )
        //.def("getQualifiedType", [](const clang::ASTContext& self, clang::SplitQualType split) -> clang::QualType {
        // return self.getQualifiedType(split);
        //} )
        .def("getQualifiedType", [](const clang::ASTContext& self, clang::QualType T , clang::Qualifiers Qs) -> clang::QualType {
         return self.getQualifiedType(T, Qs);
        } )
        .def("getQualifiedType", [](const clang::ASTContext& self, const clang::Type * T , clang::Qualifiers Qs) -> clang::QualType {
         return self.getQualifiedType(T, Qs);
        } )
        .def("getLifetimeQualifiedType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Qualifiers::ObjCLifetime))&clang::ASTContext::getLifetimeQualifiedType  )
        .def("getUnqualifiedObjCPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getUnqualifiedObjCPointerType  )
        //.def("getNameForTemplate", (clang::DeclarationNameInfo (clang::ASTContext::*)(clang::TemplateName, clang::SourceLocation) const)&clang::ASTContext::getNameForTemplate  )
        //.def("getOverloadedTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::UnresolvedSetIterator, clang::UnresolvedSetIterator) const)&clang::ASTContext::getOverloadedTemplateName  )
        //.def("getQualifiedTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::NestedNameSpecifier *, bool, clang::TemplateDecl *) const)&clang::ASTContext::getQualifiedTemplateName  )
        //.def("getDependentTemplateName", [](const clang::ASTContext& self, clang::NestedNameSpecifier * NNS , const clang::IdentifierInfo * Name) -> clang::TemplateName {
        // return self.getDependentTemplateName(NNS, Name);
        //} )
        //.def("getDependentTemplateName", [](const clang::ASTContext& self, clang::NestedNameSpecifier * NNS , clang::OverloadedOperatorKind Operator) -> clang::TemplateName {
        // return self.getDependentTemplateName(NNS, Operator);
        //} )
        //.def("getSubstTemplateTemplateParm", (clang::TemplateName (clang::ASTContext::*)(clang::TemplateTemplateParmDecl *, clang::TemplateName) const)&clang::ASTContext::getSubstTemplateTemplateParm  )
        //.def("getSubstTemplateTemplateParmPack", (clang::TemplateName (clang::ASTContext::*)(clang::TemplateTemplateParmDecl *, const clang::TemplateArgument &) const)&clang::ASTContext::getSubstTemplateTemplateParmPack  )
        .def("GetBuiltinType", (clang::QualType (clang::ASTContext::*)(unsigned int, clang::ASTContext::GetBuiltinTypeError &, unsigned int *) const)&clang::ASTContext::GetBuiltinType  )
        .def("getObjCGCAttrKind", (clang::Qualifiers::GC (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getObjCGCAttrKind  )
        .def("areCompatibleVectorTypes", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::areCompatibleVectorTypes  )
        //.def("getFloatTypeSemantics", (const llvm::fltSemantics & (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getFloatTypeSemantics  )
        //.def("getTypeInfo", [](const clang::ASTContext& self, const clang::Type * T) -> clang::TypeInfo {
        // return self.getTypeInfo(T);
        //} )
        //.def("getTypeInfo", [](const clang::ASTContext& self, clang::QualType T) -> clang::TypeInfo {
        // return self.getTypeInfo(T);
        //} )
        .def("getOpenMPDefaultSimdAlign", (unsigned int (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getOpenMPDefaultSimdAlign  )
        .def("getTypeSize", [](const clang::ASTContext& self, clang::QualType T) -> unsigned long {
         return self.getTypeSize(T);
        } )
        .def("getTypeSize", [](const clang::ASTContext& self, const clang::Type * T) -> unsigned long {
         return self.getTypeSize(T);
        } )
        .def("getCharWidth", (unsigned long (clang::ASTContext::*)() const)&clang::ASTContext::getCharWidth  )
        //.def("toCharUnitsFromBits", (clang::CharUnits (clang::ASTContext::*)(long) const)&clang::ASTContext::toCharUnitsFromBits  )
        //.def("toBits", (long (clang::ASTContext::*)(clang::CharUnits) const)&clang::ASTContext::toBits  )
        //.def("getTypeSizeInChars", [](const clang::ASTContext& self, clang::QualType T) -> clang::CharUnits {
        // return self.getTypeSizeInChars(T);
        //} )
        //.def("getTypeSizeInChars", [](const clang::ASTContext& self, const clang::Type * T) -> clang::CharUnits {
        // return self.getTypeSizeInChars(T);
        //} )
        .def("getTypeAlign", [](const clang::ASTContext& self, clang::QualType T) -> unsigned int {
         return self.getTypeAlign(T);
        } )
        .def("getTypeAlign", [](const clang::ASTContext& self, const clang::Type * T) -> unsigned int {
         return self.getTypeAlign(T);
        } )
        //.def("getTypeAlignInChars", [](const clang::ASTContext& self, clang::QualType T) -> clang::CharUnits {
        // return self.getTypeAlignInChars(T);
        //} )
        //.def("getTypeAlignInChars", [](const clang::ASTContext& self, const clang::Type * T) -> clang::CharUnits {
        // return self.getTypeAlignInChars(T);
        //} )
        //.def("getTypeInfoDataSizeInChars", (std::pair<clang::CharUnits, clang::CharUnits> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeInfoDataSizeInChars  )
        //.def("getTypeInfoInChars", [](const clang::ASTContext& self, const clang::Type * T) -> std::pair<clang::CharUnits, clang::CharUnits> {
        // return self.getTypeInfoInChars(T);
        //} )
        //.def("getTypeInfoInChars", [](const clang::ASTContext& self, clang::QualType T) -> std::pair<clang::CharUnits, clang::CharUnits> {
        // return self.getTypeInfoInChars(T);
        //} )
        .def("isAlignmentRequired", [](const clang::ASTContext& self, const clang::Type * T) -> bool {
         return self.isAlignmentRequired(T);
        } )
        .def("isAlignmentRequired", [](const clang::ASTContext& self, clang::QualType T) -> bool {
         return self.isAlignmentRequired(T);
        } )
        .def("getPreferredTypeAlign", (unsigned int (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getPreferredTypeAlign  )
        .def("getTargetDefaultAlignForAttributeAligned", (unsigned int (clang::ASTContext::*)() const)&clang::ASTContext::getTargetDefaultAlignForAttributeAligned  )
        .def("getAlignOfGlobalVar", (unsigned int (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAlignOfGlobalVar  )
        //.def("getAlignOfGlobalVarInChars", (clang::CharUnits (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAlignOfGlobalVarInChars  )
        //.def("getDeclAlign", (clang::CharUnits (clang::ASTContext::*)(const clang::Decl *, bool) const)&clang::ASTContext::getDeclAlign  )
        //.def("getASTRecordLayout", (const clang::ASTRecordLayout & (clang::ASTContext::*)(const clang::RecordDecl *) const)&clang::ASTContext::getASTRecordLayout  )
        //.def("getASTObjCInterfaceLayout", (const clang::ASTRecordLayout & (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *) const)&clang::ASTContext::getASTObjCInterfaceLayout  )
        //.def("DumpRecordLayout", (void (clang::ASTContext::*)(const clang::RecordDecl *, llvm::raw_ostream &, bool) const)&clang::ASTContext::DumpRecordLayout  )
        //.def("getASTObjCImplementationLayout", (const clang::ASTRecordLayout & (clang::ASTContext::*)(const clang::ObjCImplementationDecl *) const)&clang::ASTContext::getASTObjCImplementationLayout  )
        .def("getCurrentKeyFunction", (const clang::CXXMethodDecl * (clang::ASTContext::*)(const clang::CXXRecordDecl *))&clang::ASTContext::getCurrentKeyFunction , py::return_value_policy::reference_internal )
        .def("setNonKeyFunction", (void (clang::ASTContext::*)(const clang::CXXMethodDecl *))&clang::ASTContext::setNonKeyFunction  )
        //.def("getOffsetOfBaseWithVBPtr", (clang::CharUnits (clang::ASTContext::*)(const clang::CXXRecordDecl *) const)&clang::ASTContext::getOffsetOfBaseWithVBPtr  )
        .def("getFieldOffset", (unsigned long (clang::ASTContext::*)(const clang::ValueDecl *) const)&clang::ASTContext::getFieldOffset  )
        .def("isNearlyEmpty", (bool (clang::ASTContext::*)(const clang::CXXRecordDecl *) const)&clang::ASTContext::isNearlyEmpty  )
        //.def("getVTableContext", (clang::VTableContextBase * (clang::ASTContext::*)())&clang::ASTContext::getVTableContext , py::return_value_policy::reference_internal )
        //.def("createMangleContext", (clang::MangleContext * (clang::ASTContext::*)())&clang::ASTContext::createMangleContext , py::return_value_policy::reference_internal )
        //.def("DeepCollectObjCIvars", (void (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *, bool, llvm::SmallVectorImpl<const clang::ObjCIvarDecl *> &) const)&clang::ASTContext::DeepCollectObjCIvars  )
        //.def("CountNonClassIvars", (unsigned int (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *) const)&clang::ASTContext::CountNonClassIvars  )
        //.def("CollectInheritedProtocols", (void (clang::ASTContext::*)(const clang::Decl *, llvm::SmallPtrSet<clang::ObjCProtocolDecl *, 8> &))&clang::ASTContext::CollectInheritedProtocols  )
        //.def("getCanonicalType", [](const clang::ASTContext& self, clang::QualType T) -> clang::CanQual<clang::Type> {
        // return self.getCanonicalType(T);
        //} )
        .def("getCanonicalType", [](const clang::ASTContext& self, const clang::Type * T) -> const clang::Type * {
         return self.getCanonicalType(T);
        } , py::return_value_policy::reference_internal)
        //.def("getCanonicalParamType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCanonicalParamType  )
        .def("hasSameType", [](const clang::ASTContext& self, clang::QualType T1 , clang::QualType T2) -> bool {
         return self.hasSameType(T1, T2);
        } )
        .def("hasSameType", [](const clang::ASTContext& self, const clang::Type * T1 , const clang::Type * T2) -> bool {
         return self.hasSameType(T1, T2);
        } )
        .def("getUnqualifiedArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Qualifiers &))&clang::ASTContext::getUnqualifiedArrayType  )
        .def("hasSameUnqualifiedType", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::hasSameUnqualifiedType  )
        .def("hasSameNullabilityTypeQualifier", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType, bool) const)&clang::ASTContext::hasSameNullabilityTypeQualifier  )
        //.def("ObjCMethodsAreEqual", (bool (clang::ASTContext::*)(const clang::ObjCMethodDecl *, const clang::ObjCMethodDecl *))&clang::ASTContext::ObjCMethodsAreEqual  )
        .def("UnwrapSimilarPointerTypes", (bool (clang::ASTContext::*)(clang::QualType &, clang::QualType &))&clang::ASTContext::UnwrapSimilarPointerTypes  )
        //.def("getCanonicalNestedNameSpecifier", (clang::NestedNameSpecifier * (clang::ASTContext::*)(clang::NestedNameSpecifier *) const)&clang::ASTContext::getCanonicalNestedNameSpecifier , py::return_value_policy::reference_internal )
        .def("getDefaultCallingConvention", (clang::CallingConv (clang::ASTContext::*)(bool, bool) const)&clang::ASTContext::getDefaultCallingConvention  )
        //.def("getCanonicalTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::TemplateName) const)&clang::ASTContext::getCanonicalTemplateName  )
        //.def("hasSameTemplateName", (bool (clang::ASTContext::*)(clang::TemplateName, clang::TemplateName))&clang::ASTContext::hasSameTemplateName  )
        //.def("getCanonicalTemplateArgument", (clang::TemplateArgument (clang::ASTContext::*)(const clang::TemplateArgument &) const)&clang::ASTContext::getCanonicalTemplateArgument  )
        //.def("getAsArrayType", (const clang::ArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsArrayType , py::return_value_policy::reference_internal )
        //.def("getAsConstantArrayType", (const clang::ConstantArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsConstantArrayType , py::return_value_policy::reference_internal )
        //.def("getAsVariableArrayType", (const clang::VariableArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsVariableArrayType , py::return_value_policy::reference_internal )
        //.def("getAsIncompleteArrayType", (const clang::IncompleteArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsIncompleteArrayType , py::return_value_policy::reference_internal )
        //.def("getAsDependentSizedArrayType", (const clang::DependentSizedArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsDependentSizedArrayType , py::return_value_policy::reference_internal )
        //.def("getBaseElementType", [](const clang::ASTContext& self, const clang::ArrayType * VAT) -> clang::QualType {
        // return self.getBaseElementType(VAT);
        //} )
        .def("getBaseElementType", [](const clang::ASTContext& self, clang::QualType QT) -> clang::QualType {
         return self.getBaseElementType(QT);
        } )
        //.def("getConstantArrayElementCount", (unsigned long (clang::ASTContext::*)(const clang::ConstantArrayType *) const)&clang::ASTContext::getConstantArrayElementCount  )
        .def("getAdjustedParameterType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAdjustedParameterType  )
        .def("getSignatureParameterType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getSignatureParameterType  )
        .def("getExceptionObjectType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getExceptionObjectType  )
        .def("getArrayDecayedType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getArrayDecayedType  )
        .def("getPromotedIntegerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getPromotedIntegerType  )
        .def("getInnerObjCOwnership", (clang::Qualifiers::ObjCLifetime (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getInnerObjCOwnership  )
        .def("isPromotableBitField", (clang::QualType (clang::ASTContext::*)(clang::Expr *) const)&clang::ASTContext::isPromotableBitField  )
        .def("getIntegerTypeOrder", (int (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::getIntegerTypeOrder  )
        .def("getFloatingTypeOrder", (int (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::getFloatingTypeOrder  )
        .def("getFloatingTypeOfSizeWithinDomain", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::getFloatingTypeOfSizeWithinDomain  )
        .def("getTargetAddressSpace", [](const clang::ASTContext& self, clang::QualType T) -> unsigned int {
         return self.getTargetAddressSpace(T);
        } )
        .def("getTargetAddressSpace", [](const clang::ASTContext& self, clang::Qualifiers Q) -> unsigned int {
         return self.getTargetAddressSpace(Q);
        } )
        .def("getTargetAddressSpace", [](const clang::ASTContext& self, unsigned int AS) -> unsigned int {
         return self.getTargetAddressSpace(AS);
        } )
        .def("addressSpaceMapManglingFor", (bool (clang::ASTContext::*)(unsigned int) const)&clang::ASTContext::addressSpaceMapManglingFor  )
        .def("typesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType, bool))&clang::ASTContext::typesAreCompatible  )
        .def("propertyTypesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::propertyTypesAreCompatible  )
        .def("typesAreBlockPointerCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::typesAreBlockPointerCompatible  )
        .def("isObjCIdType", (bool (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::isObjCIdType  )
        .def("isObjCClassType", (bool (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::isObjCClassType  )
        .def("isObjCSelType", (bool (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::isObjCSelType  )
        .def("ObjCQualifiedIdTypesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType, bool))&clang::ASTContext::ObjCQualifiedIdTypesAreCompatible  )
        .def("ObjCQualifiedClassTypesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::ObjCQualifiedClassTypesAreCompatible  )
        //.def("canAssignObjCInterfaces", []( clang::ASTContext& self, const clang::ObjCObjectPointerType * LHSOPT , const clang::ObjCObjectPointerType * RHSOPT) -> bool {
        // return self.canAssignObjCInterfaces(LHSOPT, RHSOPT);
        //} )
        //.def("canAssignObjCInterfaces", []( clang::ASTContext& self, const clang::ObjCObjectType * LHS , const clang::ObjCObjectType * RHS) -> bool {
        // return self.canAssignObjCInterfaces(LHS, RHS);
        //} )
        //.def("canAssignObjCInterfacesInBlockPointer", (bool (clang::ASTContext::*)(const clang::ObjCObjectPointerType *, const clang::ObjCObjectPointerType *, bool))&clang::ASTContext::canAssignObjCInterfacesInBlockPointer  )
        .def("areComparableObjCPointerTypes", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::areComparableObjCPointerTypes  )
        //.def("areCommonBaseCompatible", (clang::QualType (clang::ASTContext::*)(const clang::ObjCObjectPointerType *, const clang::ObjCObjectPointerType *))&clang::ASTContext::areCommonBaseCompatible  )
        .def("canBindObjCObjectType", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::canBindObjCObjectType  )
        .def("mergeTypes", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool, bool))&clang::ASTContext::mergeTypes  )
        .def("mergeFunctionTypes", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool))&clang::ASTContext::mergeFunctionTypes  )
        .def("mergeFunctionParameterTypes", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool))&clang::ASTContext::mergeFunctionParameterTypes  )
        .def("mergeTransparentUnionType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool))&clang::ASTContext::mergeTransparentUnionType  )
        .def("mergeObjCGCQualifiers", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::mergeObjCGCQualifiers  )
        //.def("doFunctionTypesMatchOnExtParameterInfos", (bool (clang::ASTContext::*)(const clang::FunctionProtoType *, const clang::FunctionProtoType *))&clang::ASTContext::doFunctionTypesMatchOnExtParameterInfos  )
        //.def("ResetObjCLayout", (void (clang::ASTContext::*)(const clang::ObjCContainerDecl *))&clang::ASTContext::ResetObjCLayout  )
        .def("getIntWidth", (unsigned int (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getIntWidth  )
        .def("getCorrespondingUnsignedType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCorrespondingUnsignedType  )
        //.def("MakeIntValue", (llvm::APSInt (clang::ASTContext::*)(unsigned long, clang::QualType) const)&clang::ASTContext::MakeIntValue  )
        .def("isSentinelNullExpr", (bool (clang::ASTContext::*)(const clang::Expr *))&clang::ASTContext::isSentinelNullExpr  )
        //.def("getObjCImplementation", []( clang::ASTContext& self, clang::ObjCInterfaceDecl * D) -> clang::ObjCImplementationDecl * {
        // return self.getObjCImplementation(D);
        //} , py::return_value_policy::reference_internal)
        //.def("getObjCImplementation", []( clang::ASTContext& self, clang::ObjCCategoryDecl * D) -> clang::ObjCCategoryImplDecl * {
        // return self.getObjCImplementation(D);
        //} , py::return_value_policy::reference_internal)
        .def("AnyObjCImplementation", (bool (clang::ASTContext::*)())&clang::ASTContext::AnyObjCImplementation  )
        //.def("setObjCImplementation", []( clang::ASTContext& self, clang::ObjCInterfaceDecl * IFaceD , clang::ObjCImplementationDecl * ImplD)  {
        //  self.setObjCImplementation(IFaceD, ImplD);
        //} )
        //.def("setObjCImplementation", []( clang::ASTContext& self, clang::ObjCCategoryDecl * CatD , clang::ObjCCategoryImplDecl * ImplD)  {
        //  self.setObjCImplementation(CatD, ImplD);
        //} )
        //.def("getObjCMethodRedeclaration", (const clang::ObjCMethodDecl * (clang::ASTContext::*)(const clang::ObjCMethodDecl *) const)&clang::ASTContext::getObjCMethodRedeclaration , py::return_value_policy::reference_internal )
        //.def("setObjCMethodRedeclaration", (void (clang::ASTContext::*)(const clang::ObjCMethodDecl *, const clang::ObjCMethodDecl *))&clang::ASTContext::setObjCMethodRedeclaration  )
        //.def("getObjContainingInterface", (const clang::ObjCInterfaceDecl * (clang::ASTContext::*)(const clang::NamedDecl *) const)&clang::ASTContext::getObjContainingInterface , py::return_value_policy::reference_internal )
        .def("setBlockVarCopyInits", (void (clang::ASTContext::*)(clang::VarDecl *, clang::Expr *))&clang::ASTContext::setBlockVarCopyInits  )
        .def("getBlockVarCopyInits", (clang::Expr * (clang::ASTContext::*)(const clang::VarDecl *))&clang::ASTContext::getBlockVarCopyInits , py::return_value_policy::reference_internal )
        .def("CreateTypeSourceInfo", (clang::TypeSourceInfo * (clang::ASTContext::*)(clang::QualType, unsigned int) const)&clang::ASTContext::CreateTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getTrivialTypeSourceInfo", (clang::TypeSourceInfo * (clang::ASTContext::*)(clang::QualType, clang::SourceLocation) const)&clang::ASTContext::getTrivialTypeSourceInfo , py::return_value_policy::reference_internal )
        //.def("AddDeallocation", (void (clang::ASTContext::*)(void (*)(void *), void *))&clang::ASTContext::AddDeallocation  )
        .def("GetGVALinkageForFunction", (clang::GVALinkage (clang::ASTContext::*)(const clang::FunctionDecl *) const)&clang::ASTContext::GetGVALinkageForFunction  )
        .def("GetGVALinkageForVariable", (clang::GVALinkage (clang::ASTContext::*)(const clang::VarDecl *))&clang::ASTContext::GetGVALinkageForVariable  )
        .def("DeclMustBeEmitted", (bool (clang::ASTContext::*)(const clang::Decl *))&clang::ASTContext::DeclMustBeEmitted  )
        .def("getCopyConstructorForExceptionObject", (const clang::CXXConstructorDecl * (clang::ASTContext::*)(clang::CXXRecordDecl *))&clang::ASTContext::getCopyConstructorForExceptionObject , py::return_value_policy::reference_internal )
        .def("addCopyConstructorForExceptionObject", (void (clang::ASTContext::*)(clang::CXXRecordDecl *, clang::CXXConstructorDecl *))&clang::ASTContext::addCopyConstructorForExceptionObject  )
        .def("addDefaultArgExprForConstructor", (void (clang::ASTContext::*)(const clang::CXXConstructorDecl *, unsigned int, clang::Expr *))&clang::ASTContext::addDefaultArgExprForConstructor  )
        .def("getDefaultArgExprForConstructor", (clang::Expr * (clang::ASTContext::*)(const clang::CXXConstructorDecl *, unsigned int))&clang::ASTContext::getDefaultArgExprForConstructor , py::return_value_policy::reference_internal )
        .def("addTypedefNameForUnnamedTagDecl", (void (clang::ASTContext::*)(clang::TagDecl *, clang::TypedefNameDecl *))&clang::ASTContext::addTypedefNameForUnnamedTagDecl  )
        .def("getTypedefNameForUnnamedTagDecl", (clang::TypedefNameDecl * (clang::ASTContext::*)(const clang::TagDecl *))&clang::ASTContext::getTypedefNameForUnnamedTagDecl , py::return_value_policy::reference_internal )
        .def("addDeclaratorForUnnamedTagDecl", (void (clang::ASTContext::*)(clang::TagDecl *, clang::DeclaratorDecl *))&clang::ASTContext::addDeclaratorForUnnamedTagDecl  )
        .def("getDeclaratorForUnnamedTagDecl", (clang::DeclaratorDecl * (clang::ASTContext::*)(const clang::TagDecl *))&clang::ASTContext::getDeclaratorForUnnamedTagDecl , py::return_value_policy::reference_internal )
        .def("setManglingNumber", (void (clang::ASTContext::*)(const clang::NamedDecl *, unsigned int))&clang::ASTContext::setManglingNumber  )
        .def("getManglingNumber", (unsigned int (clang::ASTContext::*)(const clang::NamedDecl *) const)&clang::ASTContext::getManglingNumber  )
        .def("setStaticLocalNumber", (void (clang::ASTContext::*)(const clang::VarDecl *, unsigned int))&clang::ASTContext::setStaticLocalNumber  )
        .def("getStaticLocalNumber", (unsigned int (clang::ASTContext::*)(const clang::VarDecl *) const)&clang::ASTContext::getStaticLocalNumber  )
        //.def("getManglingNumberContext", (clang::MangleNumberingContext & (clang::ASTContext::*)(const clang::DeclContext *))&clang::ASTContext::getManglingNumberContext  )
        //.def("createMangleNumberingContext", (clang::MangleNumberingContext * (clang::ASTContext::*)() const)&clang::ASTContext::createMangleNumberingContext , py::return_value_policy::reference_internal )
        .def("setParameterIndex", (void (clang::ASTContext::*)(const clang::ParmVarDecl *, unsigned int))&clang::ASTContext::setParameterIndex  )
        .def("getParameterIndex", (unsigned int (clang::ASTContext::*)(const clang::ParmVarDecl *) const)&clang::ASTContext::getParameterIndex  )
        //.def("getMaterializedTemporaryValue", (clang::APValue * (clang::ASTContext::*)(const clang::MaterializeTemporaryExpr *, bool))&clang::ASTContext::getMaterializedTemporaryValue , py::return_value_policy::reference_internal )
        //.def("InitBuiltinTypes", (void (clang::ASTContext::*)(const clang::TargetInfo &, const clang::TargetInfo *))&clang::ASTContext::InitBuiltinTypes  )
        //.def("getObjCEncodingForMethodParameter", (void (clang::ASTContext::*)(clang::Decl::ObjCDeclQualifier, clang::QualType, std::basic_string<char> &, bool) const)&clang::ASTContext::getObjCEncodingForMethodParameter  )
        .def("isMSStaticDataMemberInlineDefinition", (bool (clang::ASTContext::*)(const clang::VarDecl *) const)&clang::ASTContext::isMSStaticDataMemberInlineDefinition  )
        .def("getInlineVariableDefinitionKind", (clang::ASTContext::InlineVariableDefinitionKind (clang::ASTContext::*)(const clang::VarDecl *) const)&clang::ASTContext::getInlineVariableDefinitionKind  )
    ;

    py::class_<clang::Expr, stmt_deleter<clang::Expr>::type>(m, "Expr" , py::base<clang::Stmt>())

        .def("getType", (clang::QualType (clang::Expr::*)() const)&clang::Expr::getType  )
        .def("setType", (void (clang::Expr::*)(clang::QualType))&clang::Expr::setType  )
        .def("isValueDependent", (bool (clang::Expr::*)() const)&clang::Expr::isValueDependent  )
        .def("setValueDependent", (void (clang::Expr::*)(bool))&clang::Expr::setValueDependent  )
        .def("isTypeDependent", (bool (clang::Expr::*)() const)&clang::Expr::isTypeDependent  )
        .def("setTypeDependent", (void (clang::Expr::*)(bool))&clang::Expr::setTypeDependent  )
        .def("isInstantiationDependent", (bool (clang::Expr::*)() const)&clang::Expr::isInstantiationDependent  )
        .def("setInstantiationDependent", (void (clang::Expr::*)(bool))&clang::Expr::setInstantiationDependent  )
        .def("containsUnexpandedParameterPack", (bool (clang::Expr::*)() const)&clang::Expr::containsUnexpandedParameterPack  )
        .def("setContainsUnexpandedParameterPack", (void (clang::Expr::*)(bool))&clang::Expr::setContainsUnexpandedParameterPack  )
        .def("getExprLoc", (clang::SourceLocation (clang::Expr::*)() const)&clang::Expr::getExprLoc  )
        .def("isLValue", (bool (clang::Expr::*)() const)&clang::Expr::isLValue  )
        .def("isRValue", (bool (clang::Expr::*)() const)&clang::Expr::isRValue  )
        .def("isXValue", (bool (clang::Expr::*)() const)&clang::Expr::isXValue  )
        .def("isGLValue", (bool (clang::Expr::*)() const)&clang::Expr::isGLValue  )
        .def("ClassifyLValue", (clang::Expr::LValueClassification (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::ClassifyLValue  )
        .def("isModifiableLvalue", (clang::Expr::isModifiableLvalueResult (clang::Expr::*)(clang::ASTContext &, clang::SourceLocation *) const)&clang::Expr::isModifiableLvalue  )
        //.def("Classify", (clang::Expr::Classification (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::Classify  )
        //.def("ClassifyModifiable", (clang::Expr::Classification (clang::Expr::*)(clang::ASTContext &, clang::SourceLocation &) const)&clang::Expr::ClassifyModifiable  )
        .def("getValueKind", (clang::ExprValueKind (clang::Expr::*)() const)&clang::Expr::getValueKind  )
        .def("getObjectKind", (clang::ExprObjectKind (clang::Expr::*)() const)&clang::Expr::getObjectKind  )
        .def("isOrdinaryOrBitFieldObject", (bool (clang::Expr::*)() const)&clang::Expr::isOrdinaryOrBitFieldObject  )
        .def("setValueKind", (void (clang::Expr::*)(clang::ExprValueKind))&clang::Expr::setValueKind  )
        .def("setObjectKind", (void (clang::Expr::*)(clang::ExprObjectKind))&clang::Expr::setObjectKind  )
        .def("refersToBitField", (bool (clang::Expr::*)() const)&clang::Expr::refersToBitField  )
        .def("getSourceBitField", []( clang::Expr& self) -> clang::FieldDecl * {
         return self.getSourceBitField();
        } , py::return_value_policy::reference_internal)
        .def("getSourceBitField", [](const clang::Expr& self) -> const clang::FieldDecl * {
         return self.getSourceBitField();
        } , py::return_value_policy::reference_internal)
        //.def("getObjCProperty", (const clang::ObjCPropertyRefExpr * (clang::Expr::*)() const)&clang::Expr::getObjCProperty , py::return_value_policy::reference_internal )
        .def("isObjCSelfExpr", (bool (clang::Expr::*)() const)&clang::Expr::isObjCSelfExpr  )
        .def("refersToVectorElement", (bool (clang::Expr::*)() const)&clang::Expr::refersToVectorElement  )
        .def("refersToGlobalRegisterVar", (bool (clang::Expr::*)() const)&clang::Expr::refersToGlobalRegisterVar  )
        .def("hasPlaceholderType", [](const clang::Expr& self) -> bool {
         return self.hasPlaceholderType();
        } )
        //.def("hasPlaceholderType", [](const clang::Expr& self, clang::BuiltinType::Kind K) -> bool {
        // return self.hasPlaceholderType(K);
        //} )
        .def("isKnownToHaveBooleanValue", (bool (clang::Expr::*)() const)&clang::Expr::isKnownToHaveBooleanValue  )
        //.def("isIntegerConstantExpr", [](const clang::Expr& self, llvm::APSInt & Result , const clang::ASTContext & Ctx , clang::SourceLocation * Loc , bool isEvaluated) -> bool {
        // return self.isIntegerConstantExpr(Result, Ctx, Loc, isEvaluated);
        //} )
        .def("isIntegerConstantExpr", [](const clang::Expr& self, const clang::ASTContext & Ctx , clang::SourceLocation * Loc) -> bool {
         return self.isIntegerConstantExpr(Ctx, Loc);
        } )
        .def("isCXX98IntegralConstantExpr", (bool (clang::Expr::*)(const clang::ASTContext &) const)&clang::Expr::isCXX98IntegralConstantExpr  )
        //.def("isCXX11ConstantExpr", (bool (clang::Expr::*)(const clang::ASTContext &, clang::APValue *, clang::SourceLocation *) const)&clang::Expr::isCXX11ConstantExpr  )
        //.def("EvaluateAsRValue", (bool (clang::Expr::*)(clang::Expr::EvalResult &, const clang::ASTContext &) const)&clang::Expr::EvaluateAsRValue  )
        .def("EvaluateAsBooleanCondition", (bool (clang::Expr::*)(bool &, const clang::ASTContext &) const)&clang::Expr::EvaluateAsBooleanCondition  )
        //.def("EvaluateAsInt", (bool (clang::Expr::*)(llvm::APSInt &, const clang::ASTContext &, clang::Expr::SideEffectsKind) const)&clang::Expr::EvaluateAsInt  )
        //.def("EvaluateAsFloat", (bool (clang::Expr::*)(llvm::APFloat &, const clang::ASTContext &, clang::Expr::SideEffectsKind) const)&clang::Expr::EvaluateAsFloat  )
        .def("isEvaluatable", (bool (clang::Expr::*)(const clang::ASTContext &, clang::Expr::SideEffectsKind) const)&clang::Expr::isEvaluatable  )
        .def("HasSideEffects", (bool (clang::Expr::*)(const clang::ASTContext &, bool) const)&clang::Expr::HasSideEffects  )
        .def("hasNonTrivialCall", (bool (clang::Expr::*)(const clang::ASTContext &) const)&clang::Expr::hasNonTrivialCall  )
        //.def("EvaluateKnownConstInt", (llvm::APSInt (clang::Expr::*)(const clang::ASTContext &, llvm::SmallVectorImpl<std::pair<clang::SourceLocation, clang::PartialDiagnostic> > *) const)&clang::Expr::EvaluateKnownConstInt  )
        .def("EvaluateForOverflow", (void (clang::Expr::*)(const clang::ASTContext &) const)&clang::Expr::EvaluateForOverflow  )
        //.def("EvaluateAsLValue", (bool (clang::Expr::*)(clang::Expr::EvalResult &, const clang::ASTContext &) const)&clang::Expr::EvaluateAsLValue  )
        //.def("EvaluateAsInitializer", (bool (clang::Expr::*)(clang::APValue &, const clang::ASTContext &, const clang::VarDecl *, llvm::SmallVectorImpl<std::pair<clang::SourceLocation, clang::PartialDiagnostic> > &) const)&clang::Expr::EvaluateAsInitializer  )
        //.def("EvaluateWithSubstitution", (bool (clang::Expr::*)(clang::APValue &, clang::ASTContext &, const clang::FunctionDecl *, llvm::ArrayRef<const clang::Expr *>) const)&clang::Expr::EvaluateWithSubstitution  )
        .def("tryEvaluateObjectSize", (bool (clang::Expr::*)(unsigned long &, clang::ASTContext &, unsigned int) const)&clang::Expr::tryEvaluateObjectSize  )
        .def("isNullPointerConstant", (clang::Expr::NullPointerConstantKind (clang::Expr::*)(clang::ASTContext &, clang::Expr::NullPointerConstantValueDependence) const)&clang::Expr::isNullPointerConstant  )
        .def("isOBJCGCCandidate", (bool (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::isOBJCGCCandidate  )
        .def("isBoundMemberFunction", (bool (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::isBoundMemberFunction  )
        .def("IgnoreImpCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreImplicit", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreImplicit();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreImplicit", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreImplicit();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParens", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParens();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParenCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenImpCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParenImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreConversionOperator", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreConversionOperator();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreConversionOperator", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreConversionOperator();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenImpCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParenImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenLValueCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParenLValueCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenLValueCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParenLValueCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenNoopCasts", []( clang::Expr& self, clang::ASTContext & Ctx) -> clang::Expr * {
         return self.IgnoreParenNoopCasts(Ctx);
        } , py::return_value_policy::reference_internal)
        .def("ignoreParenBaseCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.ignoreParenBaseCasts();
        } , py::return_value_policy::reference_internal)
        .def("ignoreParenBaseCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.ignoreParenBaseCasts();
        } , py::return_value_policy::reference_internal)
        .def("isDefaultArgument", (bool (clang::Expr::*)() const)&clang::Expr::isDefaultArgument  )
        .def("isTemporaryObject", (bool (clang::Expr::*)(clang::ASTContext &, const clang::CXXRecordDecl *) const)&clang::Expr::isTemporaryObject  )
        .def("isImplicitCXXThis", (bool (clang::Expr::*)() const)&clang::Expr::isImplicitCXXThis  )
        .def("IgnoreImpCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParens", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParens();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParenCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenNoopCasts", [](const clang::Expr& self, clang::ASTContext & Ctx) -> const clang::Expr * {
         return self.IgnoreParenNoopCasts(Ctx);
        } , py::return_value_policy::reference_internal)
        .def("getBestDynamicClassType", (const clang::CXXRecordDecl * (clang::Expr::*)() const)&clang::Expr::getBestDynamicClassType , py::return_value_policy::reference_internal )
        //.def("skipRValueSubobjectAdjustments", (const clang::Expr * (clang::Expr::*)(llvm::SmallVectorImpl<const clang::Expr *> &, llvm::SmallVectorImpl<clang::SubobjectAdjustment> &) const)&clang::Expr::skipRValueSubobjectAdjustments , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::OpaqueValueExpr, stmt_deleter<clang::OpaqueValueExpr>::type>(m, "OpaqueValueExpr" , py::base<clang::Expr>())

        .def("getLocation", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getLocation  )
        .def("getLocStart", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getLocEnd  )
        .def("getExprLoc", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::OpaqueValueExpr::*)())&clang::OpaqueValueExpr::children  )
        .def("getSourceExpr", (clang::Expr * (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getSourceExpr , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::DeclRefExpr, stmt_deleter<clang::DeclRefExpr>::type>(m, "DeclRefExpr" , py::base<clang::Expr>())

        .def("getDecl", []( clang::DeclRefExpr& self) -> clang::ValueDecl * {
         return self.getDecl();
        } , py::return_value_policy::reference_internal)
        .def("getDecl", [](const clang::DeclRefExpr& self) -> const clang::ValueDecl * {
         return self.getDecl();
        } , py::return_value_policy::reference_internal)
        .def("setDecl", (void (clang::DeclRefExpr::*)(clang::ValueDecl *))&clang::DeclRefExpr::setDecl  )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getNameInfo  )
        .def("getLocation", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getLocation  )
        .def("setLocation", (void (clang::DeclRefExpr::*)(clang::SourceLocation))&clang::DeclRefExpr::setLocation  )
        .def("getLocStart", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getLocEnd  )
        .def("hasQualifier", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasQualifier  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getQualifier , py::return_value_policy::reference_internal )
        .def("getFoundDecl", []( clang::DeclRefExpr& self) -> clang::NamedDecl * {
         return self.getFoundDecl();
        } , py::return_value_policy::reference_internal)
        .def("getFoundDecl", [](const clang::DeclRefExpr& self) -> const clang::NamedDecl * {
         return self.getFoundDecl();
        } , py::return_value_policy::reference_internal)
        .def("hasTemplateKWAndArgsInfo", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasTemplateKWAndArgsInfo  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getTemplateKeywordLoc  )
        .def("getLAngleLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getLAngleLoc  )
        .def("getRAngleLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getRAngleLoc  )
        .def("hasTemplateKeyword", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasTemplateKeyword  )
        .def("hasExplicitTemplateArgs", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasExplicitTemplateArgs  )
        //.def("copyTemplateArgumentsInto", (void (clang::DeclRefExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::DeclRefExpr::copyTemplateArgumentsInto  )
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getTemplateArgs , py::return_value_policy::reference_internal )
        .def("getNumTemplateArgs", (unsigned int (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getNumTemplateArgs  )
        //.def("template_arguments", (llvm::ArrayRef<clang::TemplateArgumentLoc> (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::template_arguments  )
        .def("hadMultipleCandidates", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hadMultipleCandidates  )
        .def("setHadMultipleCandidates", (void (clang::DeclRefExpr::*)(bool))&clang::DeclRefExpr::setHadMultipleCandidates  )
        .def("refersToEnclosingVariableOrCapture", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::refersToEnclosingVariableOrCapture  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DeclRefExpr::*)())&clang::DeclRefExpr::children  )
    ;

    py::class_<clang::PredefinedExpr, stmt_deleter<clang::PredefinedExpr>::type>(m, "PredefinedExpr" , py::base<clang::Expr>())

        .def("getIdentType", (clang::PredefinedExpr::IdentType (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getIdentType  )
        .def("getLocation", (clang::SourceLocation (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getLocation  )
        .def("setLocation", (void (clang::PredefinedExpr::*)(clang::SourceLocation))&clang::PredefinedExpr::setLocation  )
        .def("getFunctionName", []( clang::PredefinedExpr& self) -> clang::StringLiteral * {
         return self.getFunctionName();
        } , py::return_value_policy::reference_internal)
        .def("getFunctionName", [](const clang::PredefinedExpr& self) -> const clang::StringLiteral * {
         return self.getFunctionName();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::PredefinedExpr::*)())&clang::PredefinedExpr::children  )
    ;

    py::class_<clang::IntegerLiteral, stmt_deleter<clang::IntegerLiteral>::type>(m, "IntegerLiteral" , py::base<clang::Expr>())

        .def("getLocStart", (clang::SourceLocation (clang::IntegerLiteral::*)() const)&clang::IntegerLiteral::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::IntegerLiteral::*)() const)&clang::IntegerLiteral::getLocEnd  )
        .def("getLocation", (clang::SourceLocation (clang::IntegerLiteral::*)() const)&clang::IntegerLiteral::getLocation  )
        .def("setLocation", (void (clang::IntegerLiteral::*)(clang::SourceLocation))&clang::IntegerLiteral::setLocation  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::IntegerLiteral::*)())&clang::IntegerLiteral::children  )
    ;

    py::class_<clang::CharacterLiteral, stmt_deleter<clang::CharacterLiteral>::type>(m, "CharacterLiteral" , py::base<clang::Expr>())

        .def("getLocation", (clang::SourceLocation (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getLocation  )
        .def("getKind", (clang::CharacterLiteral::CharacterKind (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getKind  )
        .def("getLocStart", (clang::SourceLocation (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getLocEnd  )
        .def("getValue", (unsigned int (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getValue  )
        .def("setLocation", (void (clang::CharacterLiteral::*)(clang::SourceLocation))&clang::CharacterLiteral::setLocation  )
        .def("setKind", (void (clang::CharacterLiteral::*)(clang::CharacterLiteral::CharacterKind))&clang::CharacterLiteral::setKind  )
        .def("setValue", (void (clang::CharacterLiteral::*)(unsigned int))&clang::CharacterLiteral::setValue  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CharacterLiteral::*)())&clang::CharacterLiteral::children  )
    ;

    py::class_<clang::FloatingLiteral, stmt_deleter<clang::FloatingLiteral>::type>(m, "FloatingLiteral" , py::base<clang::Expr>())

        //.def("getValue", (llvm::APFloat (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getValue  )
        //.def("setValue", (void (clang::FloatingLiteral::*)(const clang::ASTContext &, const llvm::APFloat &))&clang::FloatingLiteral::setValue  )
        //.def("getRawSemantics", (clang::Stmt::APFloatSemantics (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getRawSemantics  )
        //.def("setRawSemantics", (void (clang::FloatingLiteral::*)(clang::Stmt::APFloatSemantics))&clang::FloatingLiteral::setRawSemantics  )
        //.def("getSemantics", (const llvm::fltSemantics & (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getSemantics  )
        //.def("setSemantics", (void (clang::FloatingLiteral::*)(const llvm::fltSemantics &))&clang::FloatingLiteral::setSemantics  )
        .def("isExact", (bool (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::isExact  )
        .def("setExact", (void (clang::FloatingLiteral::*)(bool))&clang::FloatingLiteral::setExact  )
        .def("getValueAsApproximateDouble", (double (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getValueAsApproximateDouble  )
        .def("getLocation", (clang::SourceLocation (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getLocation  )
        .def("setLocation", (void (clang::FloatingLiteral::*)(clang::SourceLocation))&clang::FloatingLiteral::setLocation  )
        .def("getLocStart", (clang::SourceLocation (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::FloatingLiteral::*)())&clang::FloatingLiteral::children  )
    ;

    py::class_<clang::ImaginaryLiteral, stmt_deleter<clang::ImaginaryLiteral>::type>(m, "ImaginaryLiteral" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::ImaginaryLiteral& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::ImaginaryLiteral& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::ImaginaryLiteral::*)(clang::Expr *))&clang::ImaginaryLiteral::setSubExpr  )
        .def("getLocStart", (clang::SourceLocation (clang::ImaginaryLiteral::*)() const)&clang::ImaginaryLiteral::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ImaginaryLiteral::*)() const)&clang::ImaginaryLiteral::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ImaginaryLiteral::*)())&clang::ImaginaryLiteral::children  )
    ;

    py::class_<clang::StringLiteral, stmt_deleter<clang::StringLiteral>::type>(m, "StringLiteral" , py::base<clang::Expr>())

        .def("getString", (llvm::StringRef (clang::StringLiteral::*)() const)&clang::StringLiteral::getString  )
        .def("getBytes", (llvm::StringRef (clang::StringLiteral::*)() const)&clang::StringLiteral::getBytes  )
        //.def("outputString", (void (clang::StringLiteral::*)(llvm::raw_ostream &) const)&clang::StringLiteral::outputString  )
        .def("getCodeUnit", (unsigned int (clang::StringLiteral::*)(unsigned long) const)&clang::StringLiteral::getCodeUnit  )
        .def("getByteLength", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getByteLength  )
        .def("getLength", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getLength  )
        .def("getCharByteWidth", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getCharByteWidth  )
        .def("setString", (void (clang::StringLiteral::*)(const clang::ASTContext &, llvm::StringRef, clang::StringLiteral::StringKind, bool))&clang::StringLiteral::setString  )
        .def("getKind", (clang::StringLiteral::StringKind (clang::StringLiteral::*)() const)&clang::StringLiteral::getKind  )
        .def("isAscii", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isAscii  )
        .def("isWide", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isWide  )
        .def("isUTF8", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isUTF8  )
        .def("isUTF16", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isUTF16  )
        .def("isUTF32", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isUTF32  )
        .def("isPascal", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isPascal  )
        .def("containsNonAsciiOrNull", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::containsNonAsciiOrNull  )
        .def("getNumConcatenated", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getNumConcatenated  )
        .def("getStrTokenLoc", (clang::SourceLocation (clang::StringLiteral::*)(unsigned int) const)&clang::StringLiteral::getStrTokenLoc  )
        .def("setStrTokenLoc", (void (clang::StringLiteral::*)(unsigned int, clang::SourceLocation))&clang::StringLiteral::setStrTokenLoc  )
        //.def("getLocationOfByte", (clang::SourceLocation (clang::StringLiteral::*)(unsigned int, const clang::SourceManager &, const clang::LangOptions &, const clang::TargetInfo &, unsigned int *, unsigned int *) const)&clang::StringLiteral::getLocationOfByte  )
        .def("getLocStart", (clang::SourceLocation (clang::StringLiteral::*)() const)&clang::StringLiteral::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::StringLiteral::*)() const)&clang::StringLiteral::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::StringLiteral::*)())&clang::StringLiteral::children  )
    ;

    py::class_<clang::ParenExpr, stmt_deleter<clang::ParenExpr>::type>(m, "ParenExpr" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::ParenExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::ParenExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::ParenExpr::*)(clang::Expr *))&clang::ParenExpr::setSubExpr  )
        .def("getLocStart", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getLocEnd  )
        .def("getLParen", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getLParen  )
        .def("setLParen", (void (clang::ParenExpr::*)(clang::SourceLocation))&clang::ParenExpr::setLParen  )
        .def("getRParen", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getRParen  )
        .def("setRParen", (void (clang::ParenExpr::*)(clang::SourceLocation))&clang::ParenExpr::setRParen  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ParenExpr::*)())&clang::ParenExpr::children  )
    ;

    py::class_<clang::UnaryOperator, stmt_deleter<clang::UnaryOperator>::type>(m, "UnaryOperator" , py::base<clang::Expr>())

        .def("getOpcode", (clang::UnaryOperatorKind (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getOpcode  )
        .def("setOpcode", (void (clang::UnaryOperator::*)(clang::UnaryOperatorKind))&clang::UnaryOperator::setOpcode  )
        .def("getSubExpr", (clang::Expr * (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getSubExpr , py::return_value_policy::reference_internal )
        .def("setSubExpr", (void (clang::UnaryOperator::*)(clang::Expr *))&clang::UnaryOperator::setSubExpr  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::UnaryOperator::*)(clang::SourceLocation))&clang::UnaryOperator::setOperatorLoc  )
        .def("isPrefix", [](const clang::UnaryOperator& self) -> bool {
         return self.isPrefix();
        } )
        .def("isPostfix", [](const clang::UnaryOperator& self) -> bool {
         return self.isPostfix();
        } )
        .def("isIncrementOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isIncrementOp();
        } )
        .def("isDecrementOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isDecrementOp();
        } )
        .def("isIncrementDecrementOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isIncrementDecrementOp();
        } )
        .def("isArithmeticOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isArithmeticOp();
        } )
        .def("getLocStart", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getLocEnd  )
        .def("getExprLoc", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnaryOperator::*)())&clang::UnaryOperator::children  )
    ;

    py::class_<clang::OffsetOfExpr, stmt_deleter<clang::OffsetOfExpr>::type>(m, "OffsetOfExpr" , py::base<clang::Expr>())

        .def("getOperatorLoc", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::OffsetOfExpr::*)(clang::SourceLocation))&clang::OffsetOfExpr::setOperatorLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::OffsetOfExpr::*)(clang::SourceLocation))&clang::OffsetOfExpr::setRParenLoc  )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeSourceInfo", (void (clang::OffsetOfExpr::*)(clang::TypeSourceInfo *))&clang::OffsetOfExpr::setTypeSourceInfo  )
        //.def("getComponent", (const clang::OffsetOfNode & (clang::OffsetOfExpr::*)(unsigned int) const)&clang::OffsetOfExpr::getComponent  )
        //.def("setComponent", (void (clang::OffsetOfExpr::*)(unsigned int, clang::OffsetOfNode))&clang::OffsetOfExpr::setComponent  )
        .def("getNumComponents", (unsigned int (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getNumComponents  )
        .def("getIndexExpr", []( clang::OffsetOfExpr& self, unsigned int Idx) -> clang::Expr * {
         return self.getIndexExpr(Idx);
        } , py::return_value_policy::reference_internal)
        .def("getIndexExpr", [](const clang::OffsetOfExpr& self, unsigned int Idx) -> const clang::Expr * {
         return self.getIndexExpr(Idx);
        } , py::return_value_policy::reference_internal)
        .def("setIndexExpr", (void (clang::OffsetOfExpr::*)(unsigned int, clang::Expr *))&clang::OffsetOfExpr::setIndexExpr  )
        .def("getNumExpressions", (unsigned int (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getNumExpressions  )
        .def("getLocStart", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::OffsetOfExpr::*)())&clang::OffsetOfExpr::children  )
    ;

    py::class_<clang::UnaryExprOrTypeTraitExpr, stmt_deleter<clang::UnaryExprOrTypeTraitExpr>::type>(m, "UnaryExprOrTypeTraitExpr" , py::base<clang::Expr>())

        .def("getKind", (clang::UnaryExprOrTypeTrait (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getKind  )
        .def("setKind", (void (clang::UnaryExprOrTypeTraitExpr::*)(clang::UnaryExprOrTypeTrait))&clang::UnaryExprOrTypeTraitExpr::setKind  )
        .def("isArgumentType", (bool (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::isArgumentType  )
        .def("getArgumentType", (clang::QualType (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getArgumentType  )
        .def("getArgumentTypeInfo", (clang::TypeSourceInfo * (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getArgumentTypeInfo , py::return_value_policy::reference_internal )
        .def("getArgumentExpr", []( clang::UnaryExprOrTypeTraitExpr& self) -> clang::Expr * {
         return self.getArgumentExpr();
        } , py::return_value_policy::reference_internal)
        .def("getArgumentExpr", [](const clang::UnaryExprOrTypeTraitExpr& self) -> const clang::Expr * {
         return self.getArgumentExpr();
        } , py::return_value_policy::reference_internal)
        .def("setArgument", []( clang::UnaryExprOrTypeTraitExpr& self, clang::Expr * E)  {
          self.setArgument(E);
        } )
        .def("setArgument", []( clang::UnaryExprOrTypeTraitExpr& self, clang::TypeSourceInfo * TInfo)  {
          self.setArgument(TInfo);
        } )
        .def("getTypeOfArgument", (clang::QualType (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getTypeOfArgument  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::UnaryExprOrTypeTraitExpr::*)(clang::SourceLocation))&clang::UnaryExprOrTypeTraitExpr::setOperatorLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::UnaryExprOrTypeTraitExpr::*)(clang::SourceLocation))&clang::UnaryExprOrTypeTraitExpr::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnaryExprOrTypeTraitExpr::*)())&clang::UnaryExprOrTypeTraitExpr::children  )
    ;

    py::class_<clang::ArraySubscriptExpr, stmt_deleter<clang::ArraySubscriptExpr>::type>(m, "ArraySubscriptExpr" , py::base<clang::Expr>())

        .def("getLHS", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getLHS();
        } , py::return_value_policy::reference_internal)
        .def("getLHS", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getLHS();
        } , py::return_value_policy::reference_internal)
        .def("setLHS", (void (clang::ArraySubscriptExpr::*)(clang::Expr *))&clang::ArraySubscriptExpr::setLHS  )
        .def("getRHS", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getRHS();
        } , py::return_value_policy::reference_internal)
        .def("getRHS", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getRHS();
        } , py::return_value_policy::reference_internal)
        .def("setRHS", (void (clang::ArraySubscriptExpr::*)(clang::Expr *))&clang::ArraySubscriptExpr::setRHS  )
        .def("getBase", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getBase", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getIdx", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getIdx();
        } , py::return_value_policy::reference_internal)
        .def("getIdx", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getIdx();
        } , py::return_value_policy::reference_internal)
        .def("getLocStart", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getLocEnd  )
        .def("getRBracketLoc", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getRBracketLoc  )
        .def("setRBracketLoc", (void (clang::ArraySubscriptExpr::*)(clang::SourceLocation))&clang::ArraySubscriptExpr::setRBracketLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ArraySubscriptExpr::*)())&clang::ArraySubscriptExpr::children  )
    ;

    py::class_<clang::CallExpr, stmt_deleter<clang::CallExpr>::type>(m, "CallExpr" , py::base<clang::Expr>())

        .def("getCallee", [](const clang::CallExpr& self) -> const clang::Expr * {
         return self.getCallee();
        } , py::return_value_policy::reference_internal)
        .def("getCallee", []( clang::CallExpr& self) -> clang::Expr * {
         return self.getCallee();
        } , py::return_value_policy::reference_internal)
        .def("setCallee", (void (clang::CallExpr::*)(clang::Expr *))&clang::CallExpr::setCallee  )
        .def("getCalleeDecl", []( clang::CallExpr& self) -> clang::Decl * {
         return self.getCalleeDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCalleeDecl", [](const clang::CallExpr& self) -> const clang::Decl * {
         return self.getCalleeDecl();
        } , py::return_value_policy::reference_internal)
        .def("getDirectCallee", []( clang::CallExpr& self) -> clang::FunctionDecl * {
         return self.getDirectCallee();
        } , py::return_value_policy::reference_internal)
        .def("getDirectCallee", [](const clang::CallExpr& self) -> const clang::FunctionDecl * {
         return self.getDirectCallee();
        } , py::return_value_policy::reference_internal)
        .def("getNumArgs", (unsigned int (clang::CallExpr::*)() const)&clang::CallExpr::getNumArgs  )
        .def("getArg", []( clang::CallExpr& self, unsigned int Arg) -> clang::Expr * {
         return self.getArg(Arg);
        } , py::return_value_policy::reference_internal)
        .def("getArg", [](const clang::CallExpr& self, unsigned int Arg) -> const clang::Expr * {
         return self.getArg(Arg);
        } , py::return_value_policy::reference_internal)
        .def("setArg", (void (clang::CallExpr::*)(unsigned int, clang::Expr *))&clang::CallExpr::setArg  )
        .def("setNumArgs", (void (clang::CallExpr::*)(const clang::ASTContext &, unsigned int))&clang::CallExpr::setNumArgs  )
        //.def("arguments", []( clang::CallExpr& self) -> llvm::iterator_range<clang::Stmt::ExprIterator> {
        // return self.arguments();
        //} )
        //.def("arguments", [](const clang::CallExpr& self) -> llvm::iterator_range<clang::Stmt::ConstExprIterator> {
        // return self.arguments();
        //} )
        //.def("getRawSubExprs", (llvm::ArrayRef<clang::Stmt *> (clang::CallExpr::*)())&clang::CallExpr::getRawSubExprs  )
        .def("getNumCommas", (unsigned int (clang::CallExpr::*)() const)&clang::CallExpr::getNumCommas  )
        .def("getBuiltinCallee", (unsigned int (clang::CallExpr::*)() const)&clang::CallExpr::getBuiltinCallee  )
        .def("isUnevaluatedBuiltinCall", (bool (clang::CallExpr::*)(const clang::ASTContext &) const)&clang::CallExpr::isUnevaluatedBuiltinCall  )
        .def("getCallReturnType", (clang::QualType (clang::CallExpr::*)(const clang::ASTContext &) const)&clang::CallExpr::getCallReturnType  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CallExpr::*)() const)&clang::CallExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::CallExpr::*)(clang::SourceLocation))&clang::CallExpr::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::CallExpr::*)() const)&clang::CallExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CallExpr::*)() const)&clang::CallExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CallExpr::*)())&clang::CallExpr::children  )
    ;

    py::class_<clang::MemberExpr, stmt_deleter<clang::MemberExpr>::type>(m, "MemberExpr" , py::base<clang::Expr>())

        .def("setBase", (void (clang::MemberExpr::*)(clang::Expr *))&clang::MemberExpr::setBase  )
        .def("getBase", (clang::Expr * (clang::MemberExpr::*)() const)&clang::MemberExpr::getBase , py::return_value_policy::reference_internal )
        .def("getMemberDecl", (clang::ValueDecl * (clang::MemberExpr::*)() const)&clang::MemberExpr::getMemberDecl , py::return_value_policy::reference_internal )
        .def("setMemberDecl", (void (clang::MemberExpr::*)(clang::ValueDecl *))&clang::MemberExpr::setMemberDecl  )
        //.def("getFoundDecl", (clang::DeclAccessPair (clang::MemberExpr::*)() const)&clang::MemberExpr::getFoundDecl  )
        .def("hasQualifier", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hasQualifier  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::MemberExpr::*)() const)&clang::MemberExpr::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::MemberExpr::*)() const)&clang::MemberExpr::getQualifier , py::return_value_policy::reference_internal )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getTemplateKeywordLoc  )
        .def("getLAngleLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getLAngleLoc  )
        .def("getRAngleLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getRAngleLoc  )
        .def("hasTemplateKeyword", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hasTemplateKeyword  )
        .def("hasExplicitTemplateArgs", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hasExplicitTemplateArgs  )
        //.def("copyTemplateArgumentsInto", (void (clang::MemberExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::MemberExpr::copyTemplateArgumentsInto  )
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::MemberExpr::*)() const)&clang::MemberExpr::getTemplateArgs , py::return_value_policy::reference_internal )
        .def("getNumTemplateArgs", (unsigned int (clang::MemberExpr::*)() const)&clang::MemberExpr::getNumTemplateArgs  )
        //.def("template_arguments", (llvm::ArrayRef<clang::TemplateArgumentLoc> (clang::MemberExpr::*)() const)&clang::MemberExpr::template_arguments  )
        .def("getMemberNameInfo", (clang::DeclarationNameInfo (clang::MemberExpr::*)() const)&clang::MemberExpr::getMemberNameInfo  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getOperatorLoc  )
        .def("isArrow", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::isArrow  )
        .def("setArrow", (void (clang::MemberExpr::*)(bool))&clang::MemberExpr::setArrow  )
        .def("getMemberLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getMemberLoc  )
        .def("setMemberLoc", (void (clang::MemberExpr::*)(clang::SourceLocation))&clang::MemberExpr::setMemberLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getLocEnd  )
        .def("getExprLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getExprLoc  )
        .def("isImplicitAccess", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::isImplicitAccess  )
        .def("hadMultipleCandidates", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hadMultipleCandidates  )
        .def("setHadMultipleCandidates", (void (clang::MemberExpr::*)(bool))&clang::MemberExpr::setHadMultipleCandidates  )
        //.def("performsVirtualDispatch", (bool (clang::MemberExpr::*)(const clang::LangOptions &) const)&clang::MemberExpr::performsVirtualDispatch  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MemberExpr::*)())&clang::MemberExpr::children  )
    ;

    py::class_<clang::CompoundLiteralExpr, stmt_deleter<clang::CompoundLiteralExpr>::type>(m, "CompoundLiteralExpr" , py::base<clang::Expr>())

        .def("getInitializer", [](const clang::CompoundLiteralExpr& self) -> const clang::Expr * {
         return self.getInitializer();
        } , py::return_value_policy::reference_internal)
        .def("getInitializer", []( clang::CompoundLiteralExpr& self) -> clang::Expr * {
         return self.getInitializer();
        } , py::return_value_policy::reference_internal)
        .def("setInitializer", (void (clang::CompoundLiteralExpr::*)(clang::Expr *))&clang::CompoundLiteralExpr::setInitializer  )
        .def("isFileScope", (bool (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::isFileScope  )
        .def("setFileScope", (void (clang::CompoundLiteralExpr::*)(bool))&clang::CompoundLiteralExpr::setFileScope  )
        .def("getLParenLoc", (clang::SourceLocation (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::CompoundLiteralExpr::*)(clang::SourceLocation))&clang::CompoundLiteralExpr::setLParenLoc  )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeSourceInfo", (void (clang::CompoundLiteralExpr::*)(clang::TypeSourceInfo *))&clang::CompoundLiteralExpr::setTypeSourceInfo  )
        .def("getLocStart", (clang::SourceLocation (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CompoundLiteralExpr::*)())&clang::CompoundLiteralExpr::children  )
    ;

    py::class_<clang::CastExpr, stmt_deleter<clang::CastExpr>::type>(m, "CastExpr" , py::base<clang::Expr>())

        .def("getCastKind", (clang::CastKind (clang::CastExpr::*)() const)&clang::CastExpr::getCastKind  )
        .def("setCastKind", (void (clang::CastExpr::*)(clang::CastKind))&clang::CastExpr::setCastKind  )
        .def("getCastKindName", (const char * (clang::CastExpr::*)() const)&clang::CastExpr::getCastKindName  )
        .def("getSubExpr", []( clang::CastExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", [](const clang::CastExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::CastExpr::*)(clang::Expr *))&clang::CastExpr::setSubExpr  )
        .def("getSubExprAsWritten", []( clang::CastExpr& self) -> clang::Expr * {
         return self.getSubExprAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("getSubExprAsWritten", [](const clang::CastExpr& self) -> const clang::Expr * {
         return self.getSubExprAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("path_empty", (bool (clang::CastExpr::*)() const)&clang::CastExpr::path_empty  )
        .def("path_size", (unsigned int (clang::CastExpr::*)() const)&clang::CastExpr::path_size  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CastExpr::*)())&clang::CastExpr::children  )
    ;

    py::class_<clang::ImplicitCastExpr, stmt_deleter<clang::ImplicitCastExpr>::type>(m, "ImplicitCastExpr" , py::base<clang::CastExpr>())

        .def("getLocStart", (clang::SourceLocation (clang::ImplicitCastExpr::*)() const)&clang::ImplicitCastExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ImplicitCastExpr::*)() const)&clang::ImplicitCastExpr::getLocEnd  )
    ;

    py::class_<clang::ExplicitCastExpr, stmt_deleter<clang::ExplicitCastExpr>::type>(m, "ExplicitCastExpr" , py::base<clang::CastExpr>())

        .def("getTypeInfoAsWritten", (clang::TypeSourceInfo * (clang::ExplicitCastExpr::*)() const)&clang::ExplicitCastExpr::getTypeInfoAsWritten , py::return_value_policy::reference_internal )
        .def("setTypeInfoAsWritten", (void (clang::ExplicitCastExpr::*)(clang::TypeSourceInfo *))&clang::ExplicitCastExpr::setTypeInfoAsWritten  )
        .def("getTypeAsWritten", (clang::QualType (clang::ExplicitCastExpr::*)() const)&clang::ExplicitCastExpr::getTypeAsWritten  )
    ;

    py::class_<clang::CStyleCastExpr, stmt_deleter<clang::CStyleCastExpr>::type>(m, "CStyleCastExpr" , py::base<clang::ExplicitCastExpr>())

        .def("getLParenLoc", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::CStyleCastExpr::*)(clang::SourceLocation))&clang::CStyleCastExpr::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::CStyleCastExpr::*)(clang::SourceLocation))&clang::CStyleCastExpr::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getLocEnd  )
    ;

    py::class_<clang::BinaryOperator, stmt_deleter<clang::BinaryOperator>::type>(m, "BinaryOperator" , py::base<clang::Expr>())

        .def("getExprLoc", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getExprLoc  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::BinaryOperator::*)(clang::SourceLocation))&clang::BinaryOperator::setOperatorLoc  )
        .def("getOpcode", (clang::BinaryOperatorKind (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getOpcode  )
        .def("setOpcode", (void (clang::BinaryOperator::*)(clang::BinaryOperatorKind))&clang::BinaryOperator::setOpcode  )
        .def("getLHS", (clang::Expr * (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getLHS , py::return_value_policy::reference_internal )
        .def("setLHS", (void (clang::BinaryOperator::*)(clang::Expr *))&clang::BinaryOperator::setLHS  )
        .def("getRHS", (clang::Expr * (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getRHS , py::return_value_policy::reference_internal )
        .def("setRHS", (void (clang::BinaryOperator::*)(clang::Expr *))&clang::BinaryOperator::setRHS  )
        .def("getLocStart", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getLocEnd  )
        .def("getOpcodeStr", [](const clang::BinaryOperator& self) -> llvm::StringRef {
         return self.getOpcodeStr();
        } )
        .def("isPtrMemOp", (bool (clang::BinaryOperator::*)() const)&clang::BinaryOperator::isPtrMemOp  )
        .def("isMultiplicativeOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isMultiplicativeOp();
        } )
        .def("isAdditiveOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isAdditiveOp();
        } )
        .def("isShiftOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isShiftOp();
        } )
        .def("isBitwiseOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isBitwiseOp();
        } )
        .def("isRelationalOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isRelationalOp();
        } )
        .def("isEqualityOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isEqualityOp();
        } )
        .def("isComparisonOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isComparisonOp();
        } )
        .def("isLogicalOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isLogicalOp();
        } )
        .def("isAssignmentOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isAssignmentOp();
        } )
        .def("isCompoundAssignmentOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isCompoundAssignmentOp();
        } )
        .def("isShiftAssignOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isShiftAssignOp();
        } )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BinaryOperator::*)())&clang::BinaryOperator::children  )
        .def("setFPContractable", (void (clang::BinaryOperator::*)(bool))&clang::BinaryOperator::setFPContractable  )
        .def("isFPContractable", (bool (clang::BinaryOperator::*)() const)&clang::BinaryOperator::isFPContractable  )
    ;

    py::class_<clang::CompoundAssignOperator, stmt_deleter<clang::CompoundAssignOperator>::type>(m, "CompoundAssignOperator" , py::base<clang::BinaryOperator>())

        .def("getComputationLHSType", (clang::QualType (clang::CompoundAssignOperator::*)() const)&clang::CompoundAssignOperator::getComputationLHSType  )
        .def("setComputationLHSType", (void (clang::CompoundAssignOperator::*)(clang::QualType))&clang::CompoundAssignOperator::setComputationLHSType  )
        .def("getComputationResultType", (clang::QualType (clang::CompoundAssignOperator::*)() const)&clang::CompoundAssignOperator::getComputationResultType  )
        .def("setComputationResultType", (void (clang::CompoundAssignOperator::*)(clang::QualType))&clang::CompoundAssignOperator::setComputationResultType  )
    ;

    py::class_<clang::AbstractConditionalOperator, stmt_deleter<clang::AbstractConditionalOperator>::type>(m, "AbstractConditionalOperator" , py::base<clang::Expr>())

        .def("getCond", (clang::Expr * (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getCond , py::return_value_policy::reference_internal )
        .def("getTrueExpr", (clang::Expr * (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getTrueExpr , py::return_value_policy::reference_internal )
        .def("getFalseExpr", (clang::Expr * (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getFalseExpr , py::return_value_policy::reference_internal )
        .def("getQuestionLoc", (clang::SourceLocation (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getQuestionLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getColonLoc  )
    ;

    py::class_<clang::ConditionalOperator, stmt_deleter<clang::ConditionalOperator>::type>(m, "ConditionalOperator" , py::base<clang::AbstractConditionalOperator>())

        .def("getCond", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getCond , py::return_value_policy::reference_internal )
        .def("getTrueExpr", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getTrueExpr , py::return_value_policy::reference_internal )
        .def("getFalseExpr", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getFalseExpr , py::return_value_policy::reference_internal )
        .def("getLHS", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getLHS , py::return_value_policy::reference_internal )
        .def("getRHS", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getRHS , py::return_value_policy::reference_internal )
        .def("getLocStart", (clang::SourceLocation (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ConditionalOperator::*)())&clang::ConditionalOperator::children  )
    ;

    py::class_<clang::BinaryConditionalOperator, stmt_deleter<clang::BinaryConditionalOperator>::type>(m, "BinaryConditionalOperator" , py::base<clang::AbstractConditionalOperator>())

        .def("getCommon", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getCommon , py::return_value_policy::reference_internal )
        .def("getOpaqueValue", (clang::OpaqueValueExpr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getOpaqueValue , py::return_value_policy::reference_internal )
        .def("getCond", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getCond , py::return_value_policy::reference_internal )
        .def("getTrueExpr", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getTrueExpr , py::return_value_policy::reference_internal )
        .def("getFalseExpr", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getFalseExpr , py::return_value_policy::reference_internal )
        .def("getLocStart", (clang::SourceLocation (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BinaryConditionalOperator::*)())&clang::BinaryConditionalOperator::children  )
    ;

    py::class_<clang::AddrLabelExpr, stmt_deleter<clang::AddrLabelExpr>::type>(m, "AddrLabelExpr" , py::base<clang::Expr>())

        .def("getAmpAmpLoc", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getAmpAmpLoc  )
        .def("setAmpAmpLoc", (void (clang::AddrLabelExpr::*)(clang::SourceLocation))&clang::AddrLabelExpr::setAmpAmpLoc  )
        .def("getLabelLoc", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getLabelLoc  )
        .def("setLabelLoc", (void (clang::AddrLabelExpr::*)(clang::SourceLocation))&clang::AddrLabelExpr::setLabelLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getLocEnd  )
        .def("getLabel", (clang::LabelDecl * (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getLabel , py::return_value_policy::reference_internal )
        .def("setLabel", (void (clang::AddrLabelExpr::*)(clang::LabelDecl *))&clang::AddrLabelExpr::setLabel  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AddrLabelExpr::*)())&clang::AddrLabelExpr::children  )
    ;

    py::class_<clang::StmtExpr, stmt_deleter<clang::StmtExpr>::type>(m, "StmtExpr" , py::base<clang::Expr>())

        .def("getSubStmt", []( clang::StmtExpr& self) -> clang::CompoundStmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", [](const clang::StmtExpr& self) -> const clang::CompoundStmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("setSubStmt", (void (clang::StmtExpr::*)(clang::CompoundStmt *))&clang::StmtExpr::setSubStmt  )
        .def("getLocStart", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getLocEnd  )
        .def("getLParenLoc", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::StmtExpr::*)(clang::SourceLocation))&clang::StmtExpr::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::StmtExpr::*)(clang::SourceLocation))&clang::StmtExpr::setRParenLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::StmtExpr::*)())&clang::StmtExpr::children  )
    ;

    py::class_<clang::ShuffleVectorExpr, stmt_deleter<clang::ShuffleVectorExpr>::type>(m, "ShuffleVectorExpr" , py::base<clang::Expr>())

        .def("getBuiltinLoc", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getBuiltinLoc  )
        .def("setBuiltinLoc", (void (clang::ShuffleVectorExpr::*)(clang::SourceLocation))&clang::ShuffleVectorExpr::setBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::ShuffleVectorExpr::*)(clang::SourceLocation))&clang::ShuffleVectorExpr::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getLocEnd  )
        .def("getNumSubExprs", (unsigned int (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getNumSubExprs  )
        .def("getExpr", []( clang::ShuffleVectorExpr& self, unsigned int Index) -> clang::Expr * {
         return self.getExpr(Index);
        } , py::return_value_policy::reference_internal)
        .def("getExpr", [](const clang::ShuffleVectorExpr& self, unsigned int Index) -> const clang::Expr * {
         return self.getExpr(Index);
        } , py::return_value_policy::reference_internal)
        //.def("setExprs", (void (clang::ShuffleVectorExpr::*)(const clang::ASTContext &, llvm::ArrayRef<clang::Expr *>))&clang::ShuffleVectorExpr::setExprs  )
        //.def("getShuffleMaskIdx", (llvm::APSInt (clang::ShuffleVectorExpr::*)(const clang::ASTContext &, unsigned int) const)&clang::ShuffleVectorExpr::getShuffleMaskIdx  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ShuffleVectorExpr::*)())&clang::ShuffleVectorExpr::children  )
    ;

    py::class_<clang::ConvertVectorExpr, stmt_deleter<clang::ConvertVectorExpr>::type>(m, "ConvertVectorExpr" , py::base<clang::Expr>())

        .def("getSrcExpr", (clang::Expr * (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getSrcExpr , py::return_value_policy::reference_internal )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeSourceInfo", (void (clang::ConvertVectorExpr::*)(clang::TypeSourceInfo *))&clang::ConvertVectorExpr::setTypeSourceInfo  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ConvertVectorExpr::*)())&clang::ConvertVectorExpr::children  )
    ;

    py::class_<clang::ChooseExpr, stmt_deleter<clang::ChooseExpr>::type>(m, "ChooseExpr" , py::base<clang::Expr>())

        .def("isConditionTrue", (bool (clang::ChooseExpr::*)() const)&clang::ChooseExpr::isConditionTrue  )
        .def("setIsConditionTrue", (void (clang::ChooseExpr::*)(bool))&clang::ChooseExpr::setIsConditionTrue  )
        .def("isConditionDependent", (bool (clang::ChooseExpr::*)() const)&clang::ChooseExpr::isConditionDependent  )
        .def("getChosenSubExpr", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getChosenSubExpr , py::return_value_policy::reference_internal )
        .def("getCond", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getCond , py::return_value_policy::reference_internal )
        .def("setCond", (void (clang::ChooseExpr::*)(clang::Expr *))&clang::ChooseExpr::setCond  )
        .def("getLHS", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getLHS , py::return_value_policy::reference_internal )
        .def("setLHS", (void (clang::ChooseExpr::*)(clang::Expr *))&clang::ChooseExpr::setLHS  )
        .def("getRHS", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getRHS , py::return_value_policy::reference_internal )
        .def("setRHS", (void (clang::ChooseExpr::*)(clang::Expr *))&clang::ChooseExpr::setRHS  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getBuiltinLoc  )
        .def("setBuiltinLoc", (void (clang::ChooseExpr::*)(clang::SourceLocation))&clang::ChooseExpr::setBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::ChooseExpr::*)(clang::SourceLocation))&clang::ChooseExpr::setRParenLoc  )
        .def("getLocStart", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ChooseExpr::*)())&clang::ChooseExpr::children  )
    ;

    py::class_<clang::GNUNullExpr, stmt_deleter<clang::GNUNullExpr>::type>(m, "GNUNullExpr" , py::base<clang::Expr>())

        .def("getTokenLocation", (clang::SourceLocation (clang::GNUNullExpr::*)() const)&clang::GNUNullExpr::getTokenLocation  )
        .def("setTokenLocation", (void (clang::GNUNullExpr::*)(clang::SourceLocation))&clang::GNUNullExpr::setTokenLocation  )
        .def("getLocStart", (clang::SourceLocation (clang::GNUNullExpr::*)() const)&clang::GNUNullExpr::getLocStart  )
        .def("getLocEnd", (clang::SourceLocation (clang::GNUNullExpr::*)() const)&clang::GNUNullExpr::getLocEnd  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::GNUNullExpr::*)())&clang::GNUNullExpr::children  )
    ;
}
